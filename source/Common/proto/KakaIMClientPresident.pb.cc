// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaIMClientPresident.proto

#include "KakaIMClientPresident.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace kakaIM {
namespace president {
class RequestNodeMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestNodeMessage>
      _instance;
} _RequestNodeMessage_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo>
      _instance;
} _NodeInfo_default_instance_;
class ResponseNodeMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseNodeMessage>
      _instance;
} _ResponseNodeMessage_default_instance_;
}  // namespace president
}  // namespace kakaIM
namespace protobuf_KakaIMClientPresident_2eproto {
void InitDefaultsRequestNodeMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_RequestNodeMessage_default_instance_;
    new (ptr) ::kakaIM::president::RequestNodeMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::RequestNodeMessage::InitAsDefaultInstance();
}

void InitDefaultsRequestNodeMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestNodeMessageImpl);
}

void InitDefaultsNodeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_NodeInfo_default_instance_;
    new (ptr) ::kakaIM::president::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::NodeInfo::InitAsDefaultInstance();
}

void InitDefaultsNodeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeInfoImpl);
}

void InitDefaultsResponseNodeMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KakaIMClientPresident_2eproto::InitDefaultsNodeInfo();
  {
    void* ptr = &::kakaIM::president::_ResponseNodeMessage_default_instance_;
    new (ptr) ::kakaIM::president::ResponseNodeMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::ResponseNodeMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseNodeMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseNodeMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestNodeMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestNodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestNodeMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestNodeMessage, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestNodeMessage, latitude_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeInfo, ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeInfo, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseNodeMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseNodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseNodeMessage, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseNodeMessage, errortype_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::kakaIM::president::RequestNodeMessage)},
  { 11, 18, sizeof(::kakaIM::president::NodeInfo)},
  { 20, 27, sizeof(::kakaIM::president::ResponseNodeMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_RequestNodeMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_ResponseNodeMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "KakaIMClientPresident.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033KakaIMClientPresident.proto\022\020kakaIM.pr"
      "esident\"N\n\022RequestNodeMessage\022\023\n\013userAcc"
      "ount\030\001 \002(\t\022\021\n\tLongitude\030\002 \002(\002\022\020\n\010latitud"
      "e\030\003 \002(\002\")\n\010NodeInfo\022\017\n\007ip_addr\030\001 \002(\t\022\014\n\004"
      "port\030\002 \001(\005\"\241\001\n\023ResponseNodeMessage\022(\n\004no"
      "de\030\001 \003(\0132\032.kakaIM.president.NodeInfo\022>\n\t"
      "errorType\030\002 \001(\0162+.kakaIM.president.Respo"
      "nseNodeMessage.Error\" \n\005Error\022\027\n\023ServerI"
      "nternalError\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KakaIMClientPresident.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KakaIMClientPresident_2eproto
namespace kakaIM {
namespace president {
const ::google::protobuf::EnumDescriptor* ResponseNodeMessage_Error_descriptor() {
  protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMClientPresident_2eproto::file_level_enum_descriptors[0];
}
bool ResponseNodeMessage_Error_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseNodeMessage_Error ResponseNodeMessage::ServerInternalError;
const ResponseNodeMessage_Error ResponseNodeMessage::Error_MIN;
const ResponseNodeMessage_Error ResponseNodeMessage::Error_MAX;
const int ResponseNodeMessage::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RequestNodeMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestNodeMessage::kUserAccountFieldNumber;
const int RequestNodeMessage::kLongitudeFieldNumber;
const int RequestNodeMessage::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestNodeMessage::RequestNodeMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsRequestNodeMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.RequestNodeMessage)
}
RequestNodeMessage::RequestNodeMessage(const RequestNodeMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.RequestNodeMessage)
}

void RequestNodeMessage::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

RequestNodeMessage::~RequestNodeMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.RequestNodeMessage)
  SharedDtor();
}

void RequestNodeMessage::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestNodeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNodeMessage::descriptor() {
  ::protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMClientPresident_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestNodeMessage& RequestNodeMessage::default_instance() {
  ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsRequestNodeMessage();
  return *internal_default_instance();
}


void RequestNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.RequestNodeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    useraccount_.UnsafeMutablePointer()->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestNodeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.RequestNodeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.RequestNodeMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.RequestNodeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.RequestNodeMessage)
  return false;
#undef DO_
}

void RequestNodeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.RequestNodeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestNodeMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required float Longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // required float latitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.RequestNodeMessage)
}

::google::protobuf::uint8* RequestNodeMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.RequestNodeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestNodeMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required float Longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // required float latitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.RequestNodeMessage)
  return target;
}

size_t RequestNodeMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.RequestNodeMessage)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_longitude()) {
    // required float Longitude = 2;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float latitude = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RequestNodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.RequestNodeMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required float Longitude = 2;
    total_size += 1 + 4;

    // required float latitude = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNodeMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.RequestNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestNodeMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestNodeMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.RequestNodeMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.RequestNodeMessage)
    MergeFrom(*source);
  }
}

void RequestNodeMessage::MergeFrom(const RequestNodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.RequestNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestNodeMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.RequestNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNodeMessage::CopyFrom(const RequestNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.RequestNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNodeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RequestNodeMessage::Swap(RequestNodeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestNodeMessage::InternalSwap(RequestNodeMessage* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestNodeMessage::GetMetadata() const {
  protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMClientPresident_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kIpAddrFieldNumber;
const int NodeInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsNodeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_addr()) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.NodeInfo)
}

void NodeInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:kakaIM.president.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  ::protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMClientPresident_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfo& NodeInfo::default_instance() {
  ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsNodeInfo();
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!ip_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    ip_addr_.UnsafeMutablePointer()->clear();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.NodeInfo.ip_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.NodeInfo.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.NodeInfo.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  // optional int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string ip_addr = 1;
  if (has_ip_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }
  // optional int32 port = 2;
  if (has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip_addr();
      ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMClientPresident_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseNodeMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseNodeMessage::kNodeFieldNumber;
const int ResponseNodeMessage::kErrorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseNodeMessage::ResponseNodeMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsResponseNodeMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.ResponseNodeMessage)
}
ResponseNodeMessage::ResponseNodeMessage(const ResponseNodeMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      node_(from.node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errortype_ = from.errortype_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.ResponseNodeMessage)
}

void ResponseNodeMessage::SharedCtor() {
  _cached_size_ = 0;
  errortype_ = 1;
}

ResponseNodeMessage::~ResponseNodeMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.ResponseNodeMessage)
  SharedDtor();
}

void ResponseNodeMessage::SharedDtor() {
}

void ResponseNodeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseNodeMessage::descriptor() {
  ::protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMClientPresident_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseNodeMessage& ResponseNodeMessage::default_instance() {
  ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsResponseNodeMessage();
  return *internal_default_instance();
}


void ResponseNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.ResponseNodeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  errortype_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseNodeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.ResponseNodeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kakaIM.president.NodeInfo node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.president.ResponseNodeMessage.Error errorType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::president::ResponseNodeMessage_Error_IsValid(value)) {
            set_errortype(static_cast< ::kakaIM::president::ResponseNodeMessage_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.ResponseNodeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.ResponseNodeMessage)
  return false;
#undef DO_
}

void ResponseNodeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.ResponseNodeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kakaIM.president.NodeInfo node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .kakaIM.president.ResponseNodeMessage.Error errorType = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errortype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.ResponseNodeMessage)
}

::google::protobuf::uint8* ResponseNodeMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.ResponseNodeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kakaIM.president.NodeInfo node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .kakaIM.president.ResponseNodeMessage.Error errorType = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errortype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.ResponseNodeMessage)
  return target;
}

size_t ResponseNodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.ResponseNodeMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .kakaIM.president.NodeInfo node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  // optional .kakaIM.president.ResponseNodeMessage.Error errorType = 2;
  if (has_errortype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errortype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseNodeMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.ResponseNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseNodeMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseNodeMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.ResponseNodeMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.ResponseNodeMessage)
    MergeFrom(*source);
  }
}

void ResponseNodeMessage::MergeFrom(const ResponseNodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.ResponseNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  if (from.has_errortype()) {
    set_errortype(from.errortype());
  }
}

void ResponseNodeMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.ResponseNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseNodeMessage::CopyFrom(const ResponseNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.ResponseNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseNodeMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void ResponseNodeMessage::Swap(ResponseNodeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseNodeMessage::InternalSwap(ResponseNodeMessage* other) {
  using std::swap;
  CastToBase(&node_)->InternalSwap(CastToBase(&other->node_));
  swap(errortype_, other->errortype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseNodeMessage::GetMetadata() const {
  protobuf_KakaIMClientPresident_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMClientPresident_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace president
}  // namespace kakaIM
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::president::RequestNodeMessage* Arena::Create< ::kakaIM::president::RequestNodeMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::president::RequestNodeMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::president::NodeInfo* Arena::Create< ::kakaIM::president::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::president::NodeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::president::ResponseNodeMessage* Arena::Create< ::kakaIM::president::ResponseNodeMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::president::ResponseNodeMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
