// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaIMClientPresident.proto

#ifndef PROTOBUF_KakaIMClientPresident_2eproto__INCLUDED
#define PROTOBUF_KakaIMClientPresident_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_KakaIMClientPresident_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestNodeMessageImpl();
void InitDefaultsRequestNodeMessage();
void InitDefaultsNodeInfoImpl();
void InitDefaultsNodeInfo();
void InitDefaultsResponseNodeMessageImpl();
void InitDefaultsResponseNodeMessage();
inline void InitDefaults() {
  InitDefaultsRequestNodeMessage();
  InitDefaultsNodeInfo();
  InitDefaultsResponseNodeMessage();
}
}  // namespace protobuf_KakaIMClientPresident_2eproto
namespace kakaIM {
namespace president {
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class RequestNodeMessage;
class RequestNodeMessageDefaultTypeInternal;
extern RequestNodeMessageDefaultTypeInternal _RequestNodeMessage_default_instance_;
class ResponseNodeMessage;
class ResponseNodeMessageDefaultTypeInternal;
extern ResponseNodeMessageDefaultTypeInternal _ResponseNodeMessage_default_instance_;
}  // namespace president
}  // namespace kakaIM
namespace kakaIM {
namespace president {

enum ResponseNodeMessage_Error {
  ResponseNodeMessage_Error_ServerInternalError = 1
};
bool ResponseNodeMessage_Error_IsValid(int value);
const ResponseNodeMessage_Error ResponseNodeMessage_Error_Error_MIN = ResponseNodeMessage_Error_ServerInternalError;
const ResponseNodeMessage_Error ResponseNodeMessage_Error_Error_MAX = ResponseNodeMessage_Error_ServerInternalError;
const int ResponseNodeMessage_Error_Error_ARRAYSIZE = ResponseNodeMessage_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseNodeMessage_Error_descriptor();
inline const ::std::string& ResponseNodeMessage_Error_Name(ResponseNodeMessage_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseNodeMessage_Error_descriptor(), value);
}
inline bool ResponseNodeMessage_Error_Parse(
    const ::std::string& name, ResponseNodeMessage_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseNodeMessage_Error>(
    ResponseNodeMessage_Error_descriptor(), name, value);
}
// ===================================================================

class RequestNodeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.president.RequestNodeMessage) */ {
 public:
  RequestNodeMessage();
  virtual ~RequestNodeMessage();

  RequestNodeMessage(const RequestNodeMessage& from);

  inline RequestNodeMessage& operator=(const RequestNodeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestNodeMessage(RequestNodeMessage&& from) noexcept
    : RequestNodeMessage() {
    *this = ::std::move(from);
  }

  inline RequestNodeMessage& operator=(RequestNodeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestNodeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestNodeMessage* internal_default_instance() {
    return reinterpret_cast<const RequestNodeMessage*>(
               &_RequestNodeMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RequestNodeMessage* other);
  friend void swap(RequestNodeMessage& a, RequestNodeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestNodeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestNodeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestNodeMessage& from);
  void MergeFrom(const RequestNodeMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestNodeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userAccount = 1;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 1;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // required float Longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  float longitude() const;
  void set_longitude(float value);

  // required float latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  float latitude() const;
  void set_latitude(float value);

  // @@protoc_insertion_point(class_scope:kakaIM.president.RequestNodeMessage)
 private:
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  float longitude_;
  float latitude_;
  friend struct ::protobuf_KakaIMClientPresident_2eproto::TableStruct;
  friend void ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsRequestNodeMessageImpl();
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.president.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip_addr = 1;
  bool has_ip_addr() const;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // optional int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kakaIM.president.NodeInfo)
 private:
  void set_has_ip_addr();
  void clear_has_ip_addr();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_KakaIMClientPresident_2eproto::TableStruct;
  friend void ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsNodeInfoImpl();
};
// -------------------------------------------------------------------

class ResponseNodeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.president.ResponseNodeMessage) */ {
 public:
  ResponseNodeMessage();
  virtual ~ResponseNodeMessage();

  ResponseNodeMessage(const ResponseNodeMessage& from);

  inline ResponseNodeMessage& operator=(const ResponseNodeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseNodeMessage(ResponseNodeMessage&& from) noexcept
    : ResponseNodeMessage() {
    *this = ::std::move(from);
  }

  inline ResponseNodeMessage& operator=(ResponseNodeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseNodeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseNodeMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseNodeMessage*>(
               &_ResponseNodeMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ResponseNodeMessage* other);
  friend void swap(ResponseNodeMessage& a, ResponseNodeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseNodeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseNodeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseNodeMessage& from);
  void MergeFrom(const ResponseNodeMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseNodeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseNodeMessage_Error Error;
  static const Error ServerInternalError =
    ResponseNodeMessage_Error_ServerInternalError;
  static inline bool Error_IsValid(int value) {
    return ResponseNodeMessage_Error_IsValid(value);
  }
  static const Error Error_MIN =
    ResponseNodeMessage_Error_Error_MIN;
  static const Error Error_MAX =
    ResponseNodeMessage_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    ResponseNodeMessage_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return ResponseNodeMessage_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return ResponseNodeMessage_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return ResponseNodeMessage_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .kakaIM.president.NodeInfo node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::kakaIM::president::NodeInfo& node(int index) const;
  ::kakaIM::president::NodeInfo* mutable_node(int index);
  ::kakaIM::president::NodeInfo* add_node();
  ::google::protobuf::RepeatedPtrField< ::kakaIM::president::NodeInfo >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::kakaIM::president::NodeInfo >&
      node() const;

  // optional .kakaIM.president.ResponseNodeMessage.Error errorType = 2;
  bool has_errortype() const;
  void clear_errortype();
  static const int kErrorTypeFieldNumber = 2;
  ::kakaIM::president::ResponseNodeMessage_Error errortype() const;
  void set_errortype(::kakaIM::president::ResponseNodeMessage_Error value);

  // @@protoc_insertion_point(class_scope:kakaIM.president.ResponseNodeMessage)
 private:
  void set_has_errortype();
  void clear_has_errortype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kakaIM::president::NodeInfo > node_;
  int errortype_;
  friend struct ::protobuf_KakaIMClientPresident_2eproto::TableStruct;
  friend void ::protobuf_KakaIMClientPresident_2eproto::InitDefaultsResponseNodeMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestNodeMessage

// required string userAccount = 1;
inline bool RequestNodeMessage::has_useraccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestNodeMessage::set_has_useraccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestNodeMessage::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestNodeMessage::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& RequestNodeMessage::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.president.RequestNodeMessage.userAccount)
  return useraccount_.GetNoArena();
}
inline void RequestNodeMessage::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.president.RequestNodeMessage.userAccount)
}
#if LANG_CXX11
inline void RequestNodeMessage::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.president.RequestNodeMessage.userAccount)
}
#endif
inline void RequestNodeMessage::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.president.RequestNodeMessage.userAccount)
}
inline void RequestNodeMessage::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.president.RequestNodeMessage.userAccount)
}
inline ::std::string* RequestNodeMessage::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.president.RequestNodeMessage.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestNodeMessage::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.president.RequestNodeMessage.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestNodeMessage::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.president.RequestNodeMessage.userAccount)
}

// required float Longitude = 2;
inline bool RequestNodeMessage::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestNodeMessage::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestNodeMessage::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestNodeMessage::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float RequestNodeMessage::longitude() const {
  // @@protoc_insertion_point(field_get:kakaIM.president.RequestNodeMessage.Longitude)
  return longitude_;
}
inline void RequestNodeMessage::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.president.RequestNodeMessage.Longitude)
}

// required float latitude = 3;
inline bool RequestNodeMessage::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestNodeMessage::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestNodeMessage::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestNodeMessage::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float RequestNodeMessage::latitude() const {
  // @@protoc_insertion_point(field_get:kakaIM.president.RequestNodeMessage.latitude)
  return latitude_;
}
inline void RequestNodeMessage::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.president.RequestNodeMessage.latitude)
}

// -------------------------------------------------------------------

// NodeInfo

// required string ip_addr = 1;
inline bool NodeInfo::has_ip_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_ip_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_ip_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_addr();
}
inline const ::std::string& NodeInfo::ip_addr() const {
  // @@protoc_insertion_point(field_get:kakaIM.president.NodeInfo.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void NodeInfo::set_ip_addr(const ::std::string& value) {
  set_has_ip_addr();
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.president.NodeInfo.ip_addr)
}
#if LANG_CXX11
inline void NodeInfo::set_ip_addr(::std::string&& value) {
  set_has_ip_addr();
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.president.NodeInfo.ip_addr)
}
#endif
inline void NodeInfo::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_addr();
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.president.NodeInfo.ip_addr)
}
inline void NodeInfo::set_ip_addr(const char* value, size_t size) {
  set_has_ip_addr();
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.president.NodeInfo.ip_addr)
}
inline ::std::string* NodeInfo::mutable_ip_addr() {
  set_has_ip_addr();
  // @@protoc_insertion_point(field_mutable:kakaIM.president.NodeInfo.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_ip_addr() {
  // @@protoc_insertion_point(field_release:kakaIM.president.NodeInfo.ip_addr)
  clear_has_ip_addr();
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    set_has_ip_addr();
  } else {
    clear_has_ip_addr();
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.president.NodeInfo.ip_addr)
}

// optional int32 port = 2;
inline bool NodeInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 NodeInfo::port() const {
  // @@protoc_insertion_point(field_get:kakaIM.president.NodeInfo.port)
  return port_;
}
inline void NodeInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.president.NodeInfo.port)
}

// -------------------------------------------------------------------

// ResponseNodeMessage

// repeated .kakaIM.president.NodeInfo node = 1;
inline int ResponseNodeMessage::node_size() const {
  return node_.size();
}
inline void ResponseNodeMessage::clear_node() {
  node_.Clear();
}
inline const ::kakaIM::president::NodeInfo& ResponseNodeMessage::node(int index) const {
  // @@protoc_insertion_point(field_get:kakaIM.president.ResponseNodeMessage.node)
  return node_.Get(index);
}
inline ::kakaIM::president::NodeInfo* ResponseNodeMessage::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:kakaIM.president.ResponseNodeMessage.node)
  return node_.Mutable(index);
}
inline ::kakaIM::president::NodeInfo* ResponseNodeMessage::add_node() {
  // @@protoc_insertion_point(field_add:kakaIM.president.ResponseNodeMessage.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kakaIM::president::NodeInfo >*
ResponseNodeMessage::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:kakaIM.president.ResponseNodeMessage.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kakaIM::president::NodeInfo >&
ResponseNodeMessage::node() const {
  // @@protoc_insertion_point(field_list:kakaIM.president.ResponseNodeMessage.node)
  return node_;
}

// optional .kakaIM.president.ResponseNodeMessage.Error errorType = 2;
inline bool ResponseNodeMessage::has_errortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseNodeMessage::set_has_errortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseNodeMessage::clear_has_errortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseNodeMessage::clear_errortype() {
  errortype_ = 1;
  clear_has_errortype();
}
inline ::kakaIM::president::ResponseNodeMessage_Error ResponseNodeMessage::errortype() const {
  // @@protoc_insertion_point(field_get:kakaIM.president.ResponseNodeMessage.errorType)
  return static_cast< ::kakaIM::president::ResponseNodeMessage_Error >(errortype_);
}
inline void ResponseNodeMessage::set_errortype(::kakaIM::president::ResponseNodeMessage_Error value) {
  assert(::kakaIM::president::ResponseNodeMessage_Error_IsValid(value));
  set_has_errortype();
  errortype_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.president.ResponseNodeMessage.errorType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace president
}  // namespace kakaIM

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kakaIM::president::ResponseNodeMessage_Error> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::president::ResponseNodeMessage_Error>() {
  return ::kakaIM::president::ResponseNodeMessage_Error_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KakaIMClientPresident_2eproto__INCLUDED
