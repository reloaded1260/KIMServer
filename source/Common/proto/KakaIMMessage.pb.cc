// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaIMMessage.proto

#include "KakaIMMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace kakaIM {
namespace Node {
class RequestSessionIDMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSessionIDMessage>
      _instance;
} _RequestSessionIDMessage_default_instance_;
class ResponseSessionIDMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSessionIDMessage>
      _instance;
} _ResponseSessionIDMessage_default_instance_;
class LoginMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginMessage>
      _instance;
} _LoginMessage_default_instance_;
class ResponseLoginMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseLoginMessage>
      _instance;
} _ResponseLoginMessage_default_instance_;
class RegisterMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterMessage>
      _instance;
} _RegisterMessage_default_instance_;
class ResponseRegisterMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseRegisterMessage>
      _instance;
} _ResponseRegisterMessage_default_instance_;
class HeartBeatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatMessage>
      _instance;
} _HeartBeatMessage_default_instance_;
class ResponseHeartBeatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeartBeatMessage>
      _instance;
} _ResponseHeartBeatMessage_default_instance_;
class LogoutMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutMessage>
      _instance;
} _LogoutMessage_default_instance_;
class ResponseLogoutMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseLogoutMessage>
      _instance;
} _ResponseLogoutMessage_default_instance_;
class BuildingRelationshipRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuildingRelationshipRequestMessage>
      _instance;
} _BuildingRelationshipRequestMessage_default_instance_;
class BuildingRelationshipAnswerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuildingRelationshipAnswerMessage>
      _instance;
} _BuildingRelationshipAnswerMessage_default_instance_;
class DestroyingRelationshipRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestroyingRelationshipRequestMessage>
      _instance;
} _DestroyingRelationshipRequestMessage_default_instance_;
class DestoryingRelationshipResponseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestoryingRelationshipResponseMessage>
      _instance;
} _DestoryingRelationshipResponseMessage_default_instance_;
class FriendListRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendListRequestMessage>
      _instance;
} _FriendListRequestMessage_default_instance_;
class FriendListItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendListItem>
      _instance;
} _FriendListItem_default_instance_;
class FriendListResponseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendListResponseMessage>
      _instance;
} _FriendListResponseMessage_default_instance_;
class OnlineStateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OnlineStateMessage>
      _instance;
} _OnlineStateMessage_default_instance_;
class ChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessage>
      _instance;
} _ChatMessage_default_instance_;
class NotificationMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationMessage>
      _instance;
} _NotificationMessage_default_instance_;
class PullChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullChatMessage>
      _instance;
} _PullChatMessage_default_instance_;
class FetchUserVCardMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchUserVCardMessage>
      _instance;
} _FetchUserVCardMessage_default_instance_;
class UserVCardResponseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserVCardResponseMessage>
      _instance;
} _UserVCardResponseMessage_default_instance_;
class UpdateUserVCardMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateUserVCardMessage>
      _instance;
} _UpdateUserVCardMessage_default_instance_;
class UpdateUserVCardMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateUserVCardMessageResponse>
      _instance;
} _UpdateUserVCardMessageResponse_default_instance_;
class ChatGroupCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupCreateRequest>
      _instance;
} _ChatGroupCreateRequest_default_instance_;
class ChatGroupCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupCreateResponse>
      _instance;
} _ChatGroupCreateResponse_default_instance_;
class ChatGroupDisbandRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupDisbandRequest>
      _instance;
} _ChatGroupDisbandRequest_default_instance_;
class ChatGroupDisbandResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupDisbandResponse>
      _instance;
} _ChatGroupDisbandResponse_default_instance_;
class ChatGroupJoinRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupJoinRequest>
      _instance;
} _ChatGroupJoinRequest_default_instance_;
class ChatGroupJoinResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupJoinResponse>
      _instance;
} _ChatGroupJoinResponse_default_instance_;
class ChatGroupQuitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupQuitRequest>
      _instance;
} _ChatGroupQuitRequest_default_instance_;
class ChatGroupQuitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatGroupQuitResponse>
      _instance;
} _ChatGroupQuitResponse_default_instance_;
class UpdateChatGroupInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateChatGroupInfoRequest>
      _instance;
} _UpdateChatGroupInfoRequest_default_instance_;
class UpdateChatGroupInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateChatGroupInfoResponse>
      _instance;
} _UpdateChatGroupInfoResponse_default_instance_;
class FetchChatGroupInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupInfoRequest>
      _instance;
} _FetchChatGroupInfoRequest_default_instance_;
class FetchChatGroupInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupInfoResponse>
      _instance;
} _FetchChatGroupInfoResponse_default_instance_;
class FetchChatGroupMemberListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupMemberListRequest>
      _instance;
} _FetchChatGroupMemberListRequest_default_instance_;
class FetchChatGroupMemberListResponse_ChatGroupMemberInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupMemberListResponse_ChatGroupMemberInfo>
      _instance;
} _FetchChatGroupMemberListResponse_ChatGroupMemberInfo_default_instance_;
class FetchChatGroupMemberListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupMemberListResponse>
      _instance;
} _FetchChatGroupMemberListResponse_default_instance_;
class FetchChatGroupListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupListRequest>
      _instance;
} _FetchChatGroupListRequest_default_instance_;
class FetchChatGroupListResponse_GroupInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupListResponse_GroupInfo>
      _instance;
} _FetchChatGroupListResponse_GroupInfo_default_instance_;
class FetchChatGroupListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchChatGroupListResponse>
      _instance;
} _FetchChatGroupListResponse_default_instance_;
class GroupChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupChatMessage>
      _instance;
} _GroupChatMessage_default_instance_;
class PullGroupChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullGroupChatMessage>
      _instance;
} _PullGroupChatMessage_default_instance_;
}  // namespace Node
}  // namespace kakaIM
namespace protobuf_KakaIMMessage_2eproto {
void InitDefaultsRequestSessionIDMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_RequestSessionIDMessage_default_instance_;
    new (ptr) ::kakaIM::Node::RequestSessionIDMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::RequestSessionIDMessage::InitAsDefaultInstance();
}

void InitDefaultsRequestSessionIDMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestSessionIDMessageImpl);
}

void InitDefaultsResponseSessionIDMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ResponseSessionIDMessage_default_instance_;
    new (ptr) ::kakaIM::Node::ResponseSessionIDMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ResponseSessionIDMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseSessionIDMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseSessionIDMessageImpl);
}

void InitDefaultsLoginMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_LoginMessage_default_instance_;
    new (ptr) ::kakaIM::Node::LoginMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::LoginMessage::InitAsDefaultInstance();
}

void InitDefaultsLoginMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginMessageImpl);
}

void InitDefaultsResponseLoginMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ResponseLoginMessage_default_instance_;
    new (ptr) ::kakaIM::Node::ResponseLoginMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ResponseLoginMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseLoginMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseLoginMessageImpl);
}

void InitDefaultsRegisterMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_RegisterMessage_default_instance_;
    new (ptr) ::kakaIM::Node::RegisterMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::RegisterMessage::InitAsDefaultInstance();
}

void InitDefaultsRegisterMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRegisterMessageImpl);
}

void InitDefaultsResponseRegisterMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ResponseRegisterMessage_default_instance_;
    new (ptr) ::kakaIM::Node::ResponseRegisterMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ResponseRegisterMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseRegisterMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseRegisterMessageImpl);
}

void InitDefaultsHeartBeatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_HeartBeatMessage_default_instance_;
    new (ptr) ::kakaIM::Node::HeartBeatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::HeartBeatMessage::InitAsDefaultInstance();
}

void InitDefaultsHeartBeatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeartBeatMessageImpl);
}

void InitDefaultsResponseHeartBeatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ResponseHeartBeatMessage_default_instance_;
    new (ptr) ::kakaIM::Node::ResponseHeartBeatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ResponseHeartBeatMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseHeartBeatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseHeartBeatMessageImpl);
}

void InitDefaultsLogoutMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_LogoutMessage_default_instance_;
    new (ptr) ::kakaIM::Node::LogoutMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::LogoutMessage::InitAsDefaultInstance();
}

void InitDefaultsLogoutMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogoutMessageImpl);
}

void InitDefaultsResponseLogoutMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ResponseLogoutMessage_default_instance_;
    new (ptr) ::kakaIM::Node::ResponseLogoutMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ResponseLogoutMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseLogoutMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseLogoutMessageImpl);
}

void InitDefaultsBuildingRelationshipRequestMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_BuildingRelationshipRequestMessage_default_instance_;
    new (ptr) ::kakaIM::Node::BuildingRelationshipRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::BuildingRelationshipRequestMessage::InitAsDefaultInstance();
}

void InitDefaultsBuildingRelationshipRequestMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBuildingRelationshipRequestMessageImpl);
}

void InitDefaultsBuildingRelationshipAnswerMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_BuildingRelationshipAnswerMessage_default_instance_;
    new (ptr) ::kakaIM::Node::BuildingRelationshipAnswerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::BuildingRelationshipAnswerMessage::InitAsDefaultInstance();
}

void InitDefaultsBuildingRelationshipAnswerMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBuildingRelationshipAnswerMessageImpl);
}

void InitDefaultsDestroyingRelationshipRequestMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_DestroyingRelationshipRequestMessage_default_instance_;
    new (ptr) ::kakaIM::Node::DestroyingRelationshipRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::DestroyingRelationshipRequestMessage::InitAsDefaultInstance();
}

void InitDefaultsDestroyingRelationshipRequestMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDestroyingRelationshipRequestMessageImpl);
}

void InitDefaultsDestoryingRelationshipResponseMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_DestoryingRelationshipResponseMessage_default_instance_;
    new (ptr) ::kakaIM::Node::DestoryingRelationshipResponseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::DestoryingRelationshipResponseMessage::InitAsDefaultInstance();
}

void InitDefaultsDestoryingRelationshipResponseMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDestoryingRelationshipResponseMessageImpl);
}

void InitDefaultsFriendListRequestMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FriendListRequestMessage_default_instance_;
    new (ptr) ::kakaIM::Node::FriendListRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FriendListRequestMessage::InitAsDefaultInstance();
}

void InitDefaultsFriendListRequestMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFriendListRequestMessageImpl);
}

void InitDefaultsFriendListItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FriendListItem_default_instance_;
    new (ptr) ::kakaIM::Node::FriendListItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FriendListItem::InitAsDefaultInstance();
}

void InitDefaultsFriendListItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFriendListItemImpl);
}

void InitDefaultsFriendListResponseMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListItem();
  {
    void* ptr = &::kakaIM::Node::_FriendListResponseMessage_default_instance_;
    new (ptr) ::kakaIM::Node::FriendListResponseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FriendListResponseMessage::InitAsDefaultInstance();
}

void InitDefaultsFriendListResponseMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFriendListResponseMessageImpl);
}

void InitDefaultsOnlineStateMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_OnlineStateMessage_default_instance_;
    new (ptr) ::kakaIM::Node::OnlineStateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::OnlineStateMessage::InitAsDefaultInstance();
}

void InitDefaultsOnlineStateMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOnlineStateMessageImpl);
}

void InitDefaultsChatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatMessage_default_instance_;
    new (ptr) ::kakaIM::Node::ChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatMessage::InitAsDefaultInstance();
}

void InitDefaultsChatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatMessageImpl);
}

void InitDefaultsNotificationMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_NotificationMessage_default_instance_;
    new (ptr) ::kakaIM::Node::NotificationMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::NotificationMessage::InitAsDefaultInstance();
}

void InitDefaultsNotificationMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNotificationMessageImpl);
}

void InitDefaultsPullChatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_PullChatMessage_default_instance_;
    new (ptr) ::kakaIM::Node::PullChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::PullChatMessage::InitAsDefaultInstance();
}

void InitDefaultsPullChatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPullChatMessageImpl);
}

void InitDefaultsFetchUserVCardMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchUserVCardMessage_default_instance_;
    new (ptr) ::kakaIM::Node::FetchUserVCardMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchUserVCardMessage::InitAsDefaultInstance();
}

void InitDefaultsFetchUserVCardMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchUserVCardMessageImpl);
}

void InitDefaultsUserVCardResponseMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_UserVCardResponseMessage_default_instance_;
    new (ptr) ::kakaIM::Node::UserVCardResponseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::UserVCardResponseMessage::InitAsDefaultInstance();
}

void InitDefaultsUserVCardResponseMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserVCardResponseMessageImpl);
}

void InitDefaultsUpdateUserVCardMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_UpdateUserVCardMessage_default_instance_;
    new (ptr) ::kakaIM::Node::UpdateUserVCardMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::UpdateUserVCardMessage::InitAsDefaultInstance();
}

void InitDefaultsUpdateUserVCardMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateUserVCardMessageImpl);
}

void InitDefaultsUpdateUserVCardMessageResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_UpdateUserVCardMessageResponse_default_instance_;
    new (ptr) ::kakaIM::Node::UpdateUserVCardMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::UpdateUserVCardMessageResponse::InitAsDefaultInstance();
}

void InitDefaultsUpdateUserVCardMessageResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateUserVCardMessageResponseImpl);
}

void InitDefaultsChatGroupCreateRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupCreateRequest_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupCreateRequest::InitAsDefaultInstance();
}

void InitDefaultsChatGroupCreateRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupCreateRequestImpl);
}

void InitDefaultsChatGroupCreateResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupCreateResponse_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupCreateResponse::InitAsDefaultInstance();
}

void InitDefaultsChatGroupCreateResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupCreateResponseImpl);
}

void InitDefaultsChatGroupDisbandRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupDisbandRequest_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupDisbandRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupDisbandRequest::InitAsDefaultInstance();
}

void InitDefaultsChatGroupDisbandRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupDisbandRequestImpl);
}

void InitDefaultsChatGroupDisbandResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupDisbandResponse_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupDisbandResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupDisbandResponse::InitAsDefaultInstance();
}

void InitDefaultsChatGroupDisbandResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupDisbandResponseImpl);
}

void InitDefaultsChatGroupJoinRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupJoinRequest_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupJoinRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupJoinRequest::InitAsDefaultInstance();
}

void InitDefaultsChatGroupJoinRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupJoinRequestImpl);
}

void InitDefaultsChatGroupJoinResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupJoinResponse_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupJoinResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupJoinResponse::InitAsDefaultInstance();
}

void InitDefaultsChatGroupJoinResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupJoinResponseImpl);
}

void InitDefaultsChatGroupQuitRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupQuitRequest_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupQuitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupQuitRequest::InitAsDefaultInstance();
}

void InitDefaultsChatGroupQuitRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupQuitRequestImpl);
}

void InitDefaultsChatGroupQuitResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_ChatGroupQuitResponse_default_instance_;
    new (ptr) ::kakaIM::Node::ChatGroupQuitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::ChatGroupQuitResponse::InitAsDefaultInstance();
}

void InitDefaultsChatGroupQuitResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatGroupQuitResponseImpl);
}

void InitDefaultsUpdateChatGroupInfoRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_UpdateChatGroupInfoRequest_default_instance_;
    new (ptr) ::kakaIM::Node::UpdateChatGroupInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::UpdateChatGroupInfoRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateChatGroupInfoRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateChatGroupInfoRequestImpl);
}

void InitDefaultsUpdateChatGroupInfoResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_UpdateChatGroupInfoResponse_default_instance_;
    new (ptr) ::kakaIM::Node::UpdateChatGroupInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::UpdateChatGroupInfoResponse::InitAsDefaultInstance();
}

void InitDefaultsUpdateChatGroupInfoResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateChatGroupInfoResponseImpl);
}

void InitDefaultsFetchChatGroupInfoRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupInfoRequest_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupInfoRequest::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupInfoRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupInfoRequestImpl);
}

void InitDefaultsFetchChatGroupInfoResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupInfoResponse_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupInfoResponse::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupInfoResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupInfoResponseImpl);
}

void InitDefaultsFetchChatGroupMemberListRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupMemberListRequest_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupMemberListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupMemberListRequest::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupMemberListRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupMemberListRequestImpl);
}

void InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupMemberListResponse_ChatGroupMemberInfo_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfoImpl);
}

void InitDefaultsFetchChatGroupMemberListResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfo();
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupMemberListResponse_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupMemberListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupMemberListResponse::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupMemberListResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupMemberListResponseImpl);
}

void InitDefaultsFetchChatGroupListRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupListRequest_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupListRequest::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupListRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupListRequestImpl);
}

void InitDefaultsFetchChatGroupListResponse_GroupInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupListResponse_GroupInfo_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupListResponse_GroupInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupListResponse_GroupInfoImpl);
}

void InitDefaultsFetchChatGroupListResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponse_GroupInfo();
  {
    void* ptr = &::kakaIM::Node::_FetchChatGroupListResponse_default_instance_;
    new (ptr) ::kakaIM::Node::FetchChatGroupListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::FetchChatGroupListResponse::InitAsDefaultInstance();
}

void InitDefaultsFetchChatGroupListResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFetchChatGroupListResponseImpl);
}

void InitDefaultsGroupChatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_GroupChatMessage_default_instance_;
    new (ptr) ::kakaIM::Node::GroupChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::GroupChatMessage::InitAsDefaultInstance();
}

void InitDefaultsGroupChatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGroupChatMessageImpl);
}

void InitDefaultsPullGroupChatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::Node::_PullGroupChatMessage_default_instance_;
    new (ptr) ::kakaIM::Node::PullGroupChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::Node::PullGroupChatMessage::InitAsDefaultInstance();
}

void InitDefaultsPullGroupChatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPullGroupChatMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[45];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[21];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RequestSessionIDMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RequestSessionIDMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseSessionIDMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseSessionIDMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseSessionIDMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseSessionIDMessage, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LoginMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LoginMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LoginMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LoginMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LoginMessage, userpassword_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLoginMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLoginMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLoginMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLoginMessage, loginstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLoginMessage, failureerror_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, userpassword_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, usernickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::RegisterMessage, sex_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseRegisterMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseRegisterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseRegisterMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseRegisterMessage, registerstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseRegisterMessage, failureerror_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::HeartBeatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::HeartBeatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::HeartBeatMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::HeartBeatMessage, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseHeartBeatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseHeartBeatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseHeartBeatMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseHeartBeatMessage, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LogoutMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LogoutMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LogoutMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::LogoutMessage, offlinemailestate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLogoutMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLogoutMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLogoutMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ResponseLogoutMessage, offlinemailestate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, applicant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, sponsoraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, targetaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, introduction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipRequestMessage, messageid_),
  0,
  4,
  1,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, applicant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, targetaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, sponsoraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::BuildingRelationshipAnswerMessage, messageid_),
  0,
  3,
  1,
  2,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestroyingRelationshipRequestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestroyingRelationshipRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestroyingRelationshipRequestMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestroyingRelationshipRequestMessage, sponsoraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestroyingRelationshipRequestMessage, targetaccount_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestoryingRelationshipResponseMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestoryingRelationshipResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestoryingRelationshipResponseMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestoryingRelationshipResponseMessage, sponsoraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestoryingRelationshipResponseMessage, targetaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::DestoryingRelationshipResponseMessage, response_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListRequestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListRequestMessage, sessionid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListItem, friendaccount_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListResponseMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListResponseMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FriendListResponseMessage, friend__),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::OnlineStateMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::OnlineStateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::OnlineStateMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::OnlineStateMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::OnlineStateMessage, userstate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, senderaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, receiveraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatMessage, messageid_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::NotificationMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::NotificationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::NotificationMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::NotificationMessage, messageid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullChatMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullChatMessage, messageid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchUserVCardMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchUserVCardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchUserVCardMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchUserVCardMessage, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, mood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UserVCardResponseMessage, avator_),
  0,
  1,
  2,
  5,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, mood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessage, avator_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessageResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessageResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateUserVCardMessageResponse, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateRequest, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateRequest, groupdescrption_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupCreateResponse, groupid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandRequest, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandRequest, operatorid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandResponse, operatorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupDisbandResponse, result_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, operatorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, introduction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinRequest, applicant_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, applicant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupJoinResponse, operatorid_),
  0,
  1,
  2,
  5,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitRequest, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitRequest, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitRequest, operatorid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::ChatGroupQuitResponse, operatorid_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoRequest, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoRequest, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoRequest, groupdescrption_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoResponse, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::UpdateChatGroupInfoResponse, operator__),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoRequest, groupid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, groupdescrption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupInfoResponse, groupmaster_),
  0,
  1,
  5,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListRequest, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListRequest, groupid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo, groupnickname_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupMemberListResponse, groupmember_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListRequest, sessionid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse_GroupInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse_GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse_GroupInfo, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse_GroupInfo, groupname_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::FetchChatGroupListResponse, group_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::GroupChatMessage, msgid_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullGroupChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullGroupChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullGroupChatMessage, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullGroupChatMessage, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::Node::PullGroupChatMessage, messageid_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::kakaIM::Node::RequestSessionIDMessage)},
  { 5, 12, sizeof(::kakaIM::Node::ResponseSessionIDMessage)},
  { 14, 22, sizeof(::kakaIM::Node::LoginMessage)},
  { 25, 33, sizeof(::kakaIM::Node::ResponseLoginMessage)},
  { 36, 46, sizeof(::kakaIM::Node::RegisterMessage)},
  { 51, 59, sizeof(::kakaIM::Node::ResponseRegisterMessage)},
  { 62, 69, sizeof(::kakaIM::Node::HeartBeatMessage)},
  { 71, 78, sizeof(::kakaIM::Node::ResponseHeartBeatMessage)},
  { 80, 87, sizeof(::kakaIM::Node::LogoutMessage)},
  { 89, 96, sizeof(::kakaIM::Node::ResponseLogoutMessage)},
  { 98, 109, sizeof(::kakaIM::Node::BuildingRelationshipRequestMessage)},
  { 115, 126, sizeof(::kakaIM::Node::BuildingRelationshipAnswerMessage)},
  { 132, 140, sizeof(::kakaIM::Node::DestroyingRelationshipRequestMessage)},
  { 143, 152, sizeof(::kakaIM::Node::DestoryingRelationshipResponseMessage)},
  { 156, 162, sizeof(::kakaIM::Node::FriendListRequestMessage)},
  { 163, 169, sizeof(::kakaIM::Node::FriendListItem)},
  { 170, 177, sizeof(::kakaIM::Node::FriendListResponseMessage)},
  { 179, 187, sizeof(::kakaIM::Node::OnlineStateMessage)},
  { 190, 201, sizeof(::kakaIM::Node::ChatMessage)},
  { 207, 214, sizeof(::kakaIM::Node::NotificationMessage)},
  { 216, 223, sizeof(::kakaIM::Node::PullChatMessage)},
  { 225, 232, sizeof(::kakaIM::Node::FetchUserVCardMessage)},
  { 234, 245, sizeof(::kakaIM::Node::UserVCardResponseMessage)},
  { 251, 261, sizeof(::kakaIM::Node::UpdateUserVCardMessage)},
  { 266, 273, sizeof(::kakaIM::Node::UpdateUserVCardMessageResponse)},
  { 275, 283, sizeof(::kakaIM::Node::ChatGroupCreateRequest)},
  { 286, 294, sizeof(::kakaIM::Node::ChatGroupCreateResponse)},
  { 297, 305, sizeof(::kakaIM::Node::ChatGroupDisbandRequest)},
  { 308, 316, sizeof(::kakaIM::Node::ChatGroupDisbandResponse)},
  { 319, 330, sizeof(::kakaIM::Node::ChatGroupJoinRequest)},
  { 336, 347, sizeof(::kakaIM::Node::ChatGroupJoinResponse)},
  { 353, 362, sizeof(::kakaIM::Node::ChatGroupQuitRequest)},
  { 366, 376, sizeof(::kakaIM::Node::ChatGroupQuitResponse)},
  { 381, 390, sizeof(::kakaIM::Node::UpdateChatGroupInfoRequest)},
  { 394, 403, sizeof(::kakaIM::Node::UpdateChatGroupInfoResponse)},
  { 407, 414, sizeof(::kakaIM::Node::FetchChatGroupInfoRequest)},
  { 416, 427, sizeof(::kakaIM::Node::FetchChatGroupInfoResponse)},
  { 433, 440, sizeof(::kakaIM::Node::FetchChatGroupMemberListRequest)},
  { 442, 449, sizeof(::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo)},
  { 451, 460, sizeof(::kakaIM::Node::FetchChatGroupMemberListResponse)},
  { 464, 470, sizeof(::kakaIM::Node::FetchChatGroupListRequest)},
  { 471, 478, sizeof(::kakaIM::Node::FetchChatGroupListResponse_GroupInfo)},
  { 480, 487, sizeof(::kakaIM::Node::FetchChatGroupListResponse)},
  { 489, 499, sizeof(::kakaIM::Node::GroupChatMessage)},
  { 504, 512, sizeof(::kakaIM::Node::PullGroupChatMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_RequestSessionIDMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ResponseSessionIDMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_LoginMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ResponseLoginMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_RegisterMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ResponseRegisterMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_HeartBeatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ResponseHeartBeatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_LogoutMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ResponseLogoutMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_BuildingRelationshipRequestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_BuildingRelationshipAnswerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_DestroyingRelationshipRequestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_DestoryingRelationshipResponseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FriendListRequestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FriendListItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FriendListResponseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_OnlineStateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_NotificationMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_PullChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchUserVCardMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_UserVCardResponseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_UpdateUserVCardMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_UpdateUserVCardMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupDisbandRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupDisbandResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupJoinRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupJoinResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupQuitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_ChatGroupQuitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_UpdateChatGroupInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_UpdateChatGroupInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupMemberListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupMemberListResponse_ChatGroupMemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupMemberListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupListResponse_GroupInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_FetchChatGroupListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_GroupChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::Node::_PullGroupChatMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "KakaIMMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 45);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023KakaIMMessage.proto\022\013kakaIM.Node\"\031\n\027Re"
      "questSessionIDMessage\"\234\001\n\030ResponseSessio"
      "nIDMessage\022\021\n\tsessionID\030\001 \002(\t\022<\n\006status\030"
      "\002 \002(\0162,.kakaIM.Node.ResponseSessionIDMes"
      "sage.Status\"/\n\006Status\022\013\n\007Success\020\001\022\030\n\024Se"
      "rverInterlnalError\020\002\"L\n\014LoginMessage\022\021\n\t"
      "sessionID\030\001 \002(\t\022\023\n\013userAccount\030\002 \002(\t\022\024\n\014"
      "userPassword\030\003 \002(\t\"\235\002\n\024ResponseLoginMess"
      "age\022\021\n\tsessionID\030\001 \002(\t\022@\n\nloginState\030\002 \002"
      "(\0162,.kakaIM.Node.ResponseLoginMessage.Lo"
      "ginState\022D\n\014failureError\030\003 \001(\0162..kakaIM."
      "Node.ResponseLoginMessage.FailureError\"%"
      "\n\nLoginState\022\013\n\007Success\020\001\022\n\n\006Failed\020\002\"C\n"
      "\014FailureError\022\032\n\026WrongAccountOrPassword\020"
      "\001\022\027\n\023ServerInternalError\020\002\"\315\001\n\017RegisterM"
      "essage\022\021\n\tsessionID\030\001 \002(\t\022\023\n\013userAccount"
      "\030\002 \002(\t\022\024\n\014userPassword\030\003 \002(\t\022\024\n\014userNick"
      "Name\030\004 \001(\t\0229\n\003sex\030\005 \001(\0162$.kakaIM.Node.Re"
      "gisterMessage.UserSex:\006Unkown\"+\n\007UserSex"
      "\022\010\n\004male\020\001\022\n\n\006female\020\002\022\n\n\006Unkown\020\003\"\255\002\n\027R"
      "esponseRegisterMessage\022\021\n\tsessionID\030\001 \002("
      "\t\022I\n\rregisterState\030\002 \002(\01622.kakaIM.Node.R"
      "esponseRegisterMessage.RegisterState\022G\n\014"
      "failureError\030\003 \001(\01621.kakaIM.Node.Respons"
      "eRegisterMessage.FailureError\"(\n\rRegiste"
      "rState\022\013\n\007Success\020\001\022\n\n\006Failed\020\002\"A\n\014Failu"
      "reError\022\030\n\024AccountAlreadyExists\020\001\022\027\n\023Ser"
      "verInternalError\020\002\"8\n\020HeartBeatMessage\022\021"
      "\n\tsessionID\030\001 \002(\t\022\021\n\ttimestamp\030\002 \002(\t\"@\n\030"
      "ResponseHeartBeatMessage\022\021\n\tsessionID\030\001 "
      "\002(\t\022\021\n\ttimestamp\030\002 \002(\t\"\231\001\n\rLogoutMessage"
      "\022\021\n\tsessionID\030\001 \002(\t\022L\n\021offlineMaileState"
      "\030\002 \001(\0162+.kakaIM.Node.LogoutMessage.Offli"
      "neMailState:\004Open\"\'\n\020OfflineMailState\022\010\n"
      "\004Open\020\001\022\t\n\005Close\020\002\"\251\001\n\025ResponseLogoutMes"
      "sage\022\021\n\tsessionID\030\001 \002(\t\022T\n\021offlineMaileS"
      "tate\030\002 \001(\01623.kakaIM.Node.ResponseLogoutM"
      "essage.OfflineMailState:\004Open\"\'\n\020Offline"
      "MailState\022\010\n\004Open\020\001\022\t\n\005Close\020\002\"\245\001\n\"Build"
      "ingRelationshipRequestMessage\022\021\n\tsession"
      "ID\030\001 \002(\t\022\024\n\014applicant_id\030\002 \001(\004\022\026\n\016sponso"
      "rAccount\030\003 \002(\t\022\025\n\rtargetAccount\030\004 \002(\t\022\024\n"
      "\014introduction\030\005 \002(\t\022\021\n\tmessageID\030\006 \001(\004\"\237"
      "\002\n!BuildingRelationshipAnswerMessage\022\021\n\t"
      "sessionID\030\001 \002(\t\022\024\n\014applicant_id\030\002 \002(\004\022\025\n"
      "\rtargetAccount\030\003 \002(\t\022\026\n\016sponsorAccount\030\004"
      " \002(\t\022Y\n\006answer\030\005 \002(\0162I.kakaIM.Node.Build"
      "ingRelationshipAnswerMessage.BuildingRel"
      "ationshipAnswer\022\021\n\tmessageID\030\006 \001(\004\"4\n\032Bu"
      "ildingRelationshipAnswer\022\n\n\006Accept\020\001\022\n\n\006"
      "Reject\020\002\"h\n$DestroyingRelationshipReques"
      "tMessage\022\021\n\tsessionID\030\001 \002(\t\022\026\n\016sponsorAc"
      "count\030\002 \002(\t\022\025\n\rtargetAccount\030\003 \002(\t\"\253\002\n%D"
      "estoryingRelationshipResponseMessage\022\021\n\t"
      "sessionID\030\001 \002(\t\022\026\n\016sponsorAccount\030\002 \002(\t\022"
      "\025\n\rtargetAccount\030\003 \002(\t\022c\n\010response\030\004 \002(\016"
      "2Q.kakaIM.Node.DestoryingRelationshipRes"
      "ponseMessage.DestoryingRelationshipRespo"
      "nse\"[\n\036DestoryingRelationshipResponse\022\013\n"
      "\007Success\020\001\022\026\n\022ServerInteralError\020\002\022\024\n\020Il"
      "legalOperation\020\003\"-\n\030FriendListRequestMes"
      "sage\022\021\n\tsessionID\030\001 \002(\t\"\'\n\016FriendListIte"
      "m\022\025\n\rfriendAccount\030\001 \002(\t\"[\n\031FriendListRe"
      "sponseMessage\022\021\n\tsessionID\030\001 \002(\t\022+\n\006frie"
      "nd\030\002 \003(\0132\033.kakaIM.Node.FriendListItem\"\263\001"
      "\n\022OnlineStateMessage\022\021\n\tsessionID\030\001 \002(\t\022"
      "\023\n\013userAccount\030\002 \002(\t\022>\n\tuserState\030\003 \002(\0162"
      "+.kakaIM.Node.OnlineStateMessage.OnlineS"
      "tate\"5\n\013OnlineState\022\n\n\006Online\020\001\022\013\n\007Offli"
      "ne\020\002\022\r\n\tInvisible\020\003\"\207\001\n\013ChatMessage\022\021\n\ts"
      "essionID\030\001 \002(\t\022\025\n\rsenderAccount\030\002 \002(\t\022\027\n"
      "\017receiverAccount\030\003 \002(\t\022\017\n\007content\030\004 \002(\t\022"
      "\021\n\ttimestamp\030\005 \002(\t\022\021\n\tmessageID\030\006 \001(\004\"\256\001"
      "\n\023NotificationMessage\022F\n\004type\030\001 \002(\01628.ka"
      "kaIM.Node.NotificationMessage.Notificati"
      "onMessageType\022\021\n\tmessageID\030\002 \001(\004\"<\n\027Noti"
      "ficationMessageType\022!\n\035SystemNotificatio"
      "nMessageType\020\001\"7\n\017PullChatMessage\022\021\n\tses"
      "sionID\030\001 \002(\t\022\021\n\tmessageID\030\002 \002(\004\":\n\025Fetch"
      "UserVCardMessage\022\021\n\tsessionID\030\001 \002(\t\022\016\n\006u"
      "serID\030\002 \002(\t\"\232\001\n\030UserVCardResponseMessage"
      "\022\021\n\tsessionID\030\001 \002(\t\022\016\n\006userID\030\002 \002(\t\022\020\n\010n"
      "ickname\030\003 \002(\t\022+\n\006gender\030\004 \002(\0162\033.kakaIM.N"
      "ode.UserGenderType\022\014\n\004mood\030\005 \001(\t\022\016\n\006avat"
      "or\030\006 \001(\014\"\210\001\n\026UpdateUserVCardMessage\022\021\n\ts"
      "essionID\030\001 \002(\t\022\020\n\010nickname\030\002 \001(\t\022+\n\006gend"
      "er\030\003 \001(\0162\033.kakaIM.Node.UserGenderType\022\014\n"
      "\004mood\030\004 \001(\t\022\016\n\006avator\030\005 \001(\014\"\276\001\n\036UpdateUs"
      "erVCardMessageResponse\022\021\n\tsessionID\030\001 \002("
      "\t\022S\n\005state\030\002 \002(\0162D.kakaIM.Node.UpdateUse"
      "rVCardMessageResponse.UpdateUserVCardSta"
      "teType\"4\n\030UpdateUserVCardStateType\022\013\n\007Su"
      "ccess\020\001\022\013\n\007Failure\020\002\"W\n\026ChatGroupCreateR"
      "equest\022\021\n\tsessionID\030\001 \002(\t\022\021\n\tgroupName\030\002"
      " \002(\t\022\027\n\017groupDescrption\030\003 \002(\t\"\313\001\n\027ChatGr"
      "oupCreateResponse\022\021\n\tsessionID\030\001 \002(\t\022R\n\006"
      "result\030\002 \002(\0162B.kakaIM.Node.ChatGroupCrea"
      "teResponse.ChatGroupCreateResponseResult"
      "\022\017\n\007groupId\030\003 \001(\t\"8\n\035ChatGroupCreateResp"
      "onseResult\022\013\n\007Success\020\001\022\n\n\006Failed\020\002\"Q\n\027C"
      "hatGroupDisbandRequest\022\021\n\tsessionID\030\001 \002("
      "\t\022\017\n\007groupId\030\002 \002(\t\022\022\n\noperatorId\030\003 \002(\t\"\322"
      "\001\n\030ChatGroupDisbandResponse\022\021\n\tsessionID"
      "\030\001 \002(\t\022\022\n\noperatorId\030\002 \002(\t\022T\n\006result\030\003 \002"
      "(\0162D.kakaIM.Node.ChatGroupDisbandRespons"
      "e.ChatGroupDisbandResponseResult\"9\n\036Chat"
      "GroupDisbandResponseResult\022\013\n\007Success\020\001\022"
      "\n\n\006Failed\020\002\"\217\001\n\024ChatGroupJoinRequest\022\021\n\t"
      "sessionID\030\001 \002(\t\022\017\n\007groupId\030\002 \002(\t\022\023\n\013user"
      "Account\030\003 \002(\t\022\022\n\noperatorId\030\004 \001(\t\022\024\n\014int"
      "roduction\030\005 \001(\t\022\024\n\014applicant_id\030\006 \001(\004\"\313\002"
      "\n\025ChatGroupJoinResponse\022\021\n\tsessionID\030\001 \002"
      "(\t\022\017\n\007groupId\030\002 \002(\t\022\023\n\013userAccount\030\003 \002(\t"
      "\022N\n\006result\030\004 \002(\0162>.kakaIM.Node.ChatGroup"
      "JoinResponse.ChatGroupJoinResponseResult"
      "\022\024\n\014applicant_id\030\005 \001(\004\022\022\n\noperatorId\030\006 \001"
      "(\t\"\177\n\033ChatGroupJoinResponseResult\022\t\n\005All"
      "ow\020\001\022\n\n\006Reject\020\002\022\027\n\023ServerInternalError\020"
      "\003\022\026\n\022InfomationNotMatch\020\004\022\030\n\024Authorizati"
      "onNotMath\020\005\"c\n\024ChatGroupQuitRequest\022\021\n\ts"
      "essionID\030\001 \002(\t\022\023\n\013userAccount\030\002 \002(\t\022\017\n\007g"
      "roupId\030\003 \002(\t\022\022\n\noperatorId\030\004 \001(\t\"\354\001\n\025Cha"
      "tGroupQuitResponse\022\021\n\tsessionID\030\001 \002(\t\022\023\n"
      "\013userAccount\030\002 \002(\t\022\017\n\007groupId\030\003 \002(\t\022N\n\006r"
      "esult\030\004 \002(\0162>.kakaIM.Node.ChatGroupQuitR"
      "esponse.ChatGroupQuitResponseResult\022\022\n\no"
      "peratorId\030\005 \001(\t\"6\n\033ChatGroupQuitResponse"
      "Result\022\013\n\007Success\020\001\022\n\n\006Failed\020\002\"l\n\032Updat"
      "eChatGroupInfoRequest\022\021\n\tsessionID\030\001 \002(\t"
      "\022\017\n\007groupId\030\002 \002(\t\022\021\n\tgroupName\030\003 \002(\t\022\027\n\017"
      "groupDescrption\030\004 \002(\t\"\271\002\n\033UpdateChatGrou"
      "pInfoResponse\022\021\n\tsessionID\030\001 \002(\t\022\017\n\007grou"
      "pId\030\002 \002(\t\022Z\n\006result\030\004 \002(\0162J.kakaIM.Node."
      "UpdateChatGroupInfoResponse.UpdateChatGr"
      "oupInfoResponseResult\022\020\n\010operator\030\003 \001(\t\""
      "\207\001\n!UpdateChatGroupInfoResponseResult\022\013\n"
      "\007Success\020\001\022\n\n\006Failed\020\002\022\027\n\023ServerInternal"
      "Error\020\003\022\026\n\022InfomationNotMatch\020\004\022\030\n\024Autho"
      "rizationNotMath\020\005\"\?\n\031FetchChatGroupInfoR"
      "equest\022\021\n\tsessionID\030\001 \002(\t\022\017\n\007groupId\030\002 \002"
      "(\t\"\230\002\n\032FetchChatGroupInfoResponse\022\021\n\tses"
      "sionID\030\001 \002(\t\022\017\n\007groupId\030\002 \002(\t\022X\n\006result\030"
      "\003 \002(\0162H.kakaIM.Node.FetchChatGroupInfoRe"
      "sponse.FetchChatGroupInfoResponseResult\022"
      "\021\n\tgroupName\030\004 \001(\t\022\027\n\017groupDescrption\030\005 "
      "\001(\t\022\023\n\013groupMaster\030\006 \001(\t\";\n FetchChatGro"
      "upInfoResponseResult\022\013\n\007Success\020\001\022\n\n\006Fai"
      "led\020\002\"E\n\037FetchChatGroupMemberListRequest"
      "\022\021\n\tsessionID\030\001 \002(\t\022\017\n\007groupId\030\002 \002(\t\"\212\003\n"
      " FetchChatGroupMemberListResponse\022\021\n\tses"
      "sionID\030\001 \002(\t\022\017\n\007groupId\030\002 \002(\t\022d\n\006result\030"
      "\003 \002(\0162T.kakaIM.Node.FetchChatGroupMember"
      "ListResponse.FetchChatGroupMemberListRes"
      "ponseResult\022V\n\013groupMember\030\004 \003(\0132A.kakaI"
      "M.Node.FetchChatGroupMemberListResponse."
      "ChatGroupMemberInfo\032A\n\023ChatGroupMemberIn"
      "fo\022\023\n\013userAccount\030\001 \002(\t\022\025\n\rgroupNickName"
      "\030\002 \001(\t\"A\n&FetchChatGroupMemberListRespon"
      "seResult\022\013\n\007Success\020\001\022\n\n\006Failed\020\002\".\n\031Fet"
      "chChatGroupListRequest\022\021\n\tsessionID\030\001 \002("
      "\t\"\242\001\n\032FetchChatGroupListResponse\022\021\n\tsess"
      "ionID\030\001 \002(\t\022@\n\005group\030\002 \003(\01321.kakaIM.Node"
      ".FetchChatGroupListResponse.GroupInfo\032/\n"
      "\tGroupInfo\022\017\n\007groupId\030\001 \002(\t\022\021\n\tgroupName"
      "\030\002 \002(\t\"f\n\020GroupChatMessage\022\021\n\tsessionID\030"
      "\001 \002(\t\022\016\n\006sender\030\002 \002(\t\022\017\n\007groupId\030\003 \002(\t\022\017"
      "\n\007content\030\004 \002(\t\022\r\n\005msgId\030\005 \001(\004\"M\n\024PullGr"
      "oupChatMessage\022\021\n\tsessionID\030\001 \002(\t\022\017\n\007gro"
      "upID\030\002 \002(\t\022\021\n\tmessageID\030\003 \002(\004*2\n\016UserGen"
      "derType\022\010\n\004Male\020\001\022\n\n\006Female\020\002\022\n\n\006Unkown\020"
      "\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KakaIMMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KakaIMMessage_2eproto
namespace kakaIM {
namespace Node {
const ::google::protobuf::EnumDescriptor* ResponseSessionIDMessage_Status_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[0];
}
bool ResponseSessionIDMessage_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseSessionIDMessage_Status ResponseSessionIDMessage::Success;
const ResponseSessionIDMessage_Status ResponseSessionIDMessage::ServerInterlnalError;
const ResponseSessionIDMessage_Status ResponseSessionIDMessage::Status_MIN;
const ResponseSessionIDMessage_Status ResponseSessionIDMessage::Status_MAX;
const int ResponseSessionIDMessage::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseLoginMessage_LoginState_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[1];
}
bool ResponseLoginMessage_LoginState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseLoginMessage_LoginState ResponseLoginMessage::Success;
const ResponseLoginMessage_LoginState ResponseLoginMessage::Failed;
const ResponseLoginMessage_LoginState ResponseLoginMessage::LoginState_MIN;
const ResponseLoginMessage_LoginState ResponseLoginMessage::LoginState_MAX;
const int ResponseLoginMessage::LoginState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseLoginMessage_FailureError_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[2];
}
bool ResponseLoginMessage_FailureError_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseLoginMessage_FailureError ResponseLoginMessage::WrongAccountOrPassword;
const ResponseLoginMessage_FailureError ResponseLoginMessage::ServerInternalError;
const ResponseLoginMessage_FailureError ResponseLoginMessage::FailureError_MIN;
const ResponseLoginMessage_FailureError ResponseLoginMessage::FailureError_MAX;
const int ResponseLoginMessage::FailureError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RegisterMessage_UserSex_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[3];
}
bool RegisterMessage_UserSex_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RegisterMessage_UserSex RegisterMessage::male;
const RegisterMessage_UserSex RegisterMessage::female;
const RegisterMessage_UserSex RegisterMessage::Unkown;
const RegisterMessage_UserSex RegisterMessage::UserSex_MIN;
const RegisterMessage_UserSex RegisterMessage::UserSex_MAX;
const int RegisterMessage::UserSex_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseRegisterMessage_RegisterState_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[4];
}
bool ResponseRegisterMessage_RegisterState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseRegisterMessage_RegisterState ResponseRegisterMessage::Success;
const ResponseRegisterMessage_RegisterState ResponseRegisterMessage::Failed;
const ResponseRegisterMessage_RegisterState ResponseRegisterMessage::RegisterState_MIN;
const ResponseRegisterMessage_RegisterState ResponseRegisterMessage::RegisterState_MAX;
const int ResponseRegisterMessage::RegisterState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseRegisterMessage_FailureError_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[5];
}
bool ResponseRegisterMessage_FailureError_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseRegisterMessage_FailureError ResponseRegisterMessage::AccountAlreadyExists;
const ResponseRegisterMessage_FailureError ResponseRegisterMessage::ServerInternalError;
const ResponseRegisterMessage_FailureError ResponseRegisterMessage::FailureError_MIN;
const ResponseRegisterMessage_FailureError ResponseRegisterMessage::FailureError_MAX;
const int ResponseRegisterMessage::FailureError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LogoutMessage_OfflineMailState_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[6];
}
bool LogoutMessage_OfflineMailState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogoutMessage_OfflineMailState LogoutMessage::Open;
const LogoutMessage_OfflineMailState LogoutMessage::Close;
const LogoutMessage_OfflineMailState LogoutMessage::OfflineMailState_MIN;
const LogoutMessage_OfflineMailState LogoutMessage::OfflineMailState_MAX;
const int LogoutMessage::OfflineMailState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseLogoutMessage_OfflineMailState_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[7];
}
bool ResponseLogoutMessage_OfflineMailState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage::Open;
const ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage::Close;
const ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage::OfflineMailState_MIN;
const ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage::OfflineMailState_MAX;
const int ResponseLogoutMessage::OfflineMailState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[8];
}
bool BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage::Accept;
const BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage::Reject;
const BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage::BuildingRelationshipAnswer_MIN;
const BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage::BuildingRelationshipAnswer_MAX;
const int BuildingRelationshipAnswerMessage::BuildingRelationshipAnswer_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[9];
}
bool DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage::Success;
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage::ServerInteralError;
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage::IllegalOperation;
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage::DestoryingRelationshipResponse_MIN;
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage::DestoryingRelationshipResponse_MAX;
const int DestoryingRelationshipResponseMessage::DestoryingRelationshipResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OnlineStateMessage_OnlineState_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[10];
}
bool OnlineStateMessage_OnlineState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OnlineStateMessage_OnlineState OnlineStateMessage::Online;
const OnlineStateMessage_OnlineState OnlineStateMessage::Offline;
const OnlineStateMessage_OnlineState OnlineStateMessage::Invisible;
const OnlineStateMessage_OnlineState OnlineStateMessage::OnlineState_MIN;
const OnlineStateMessage_OnlineState OnlineStateMessage::OnlineState_MAX;
const int OnlineStateMessage::OnlineState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NotificationMessage_NotificationMessageType_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[11];
}
bool NotificationMessage_NotificationMessageType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NotificationMessage_NotificationMessageType NotificationMessage::SystemNotificationMessageType;
const NotificationMessage_NotificationMessageType NotificationMessage::NotificationMessageType_MIN;
const NotificationMessage_NotificationMessageType NotificationMessage::NotificationMessageType_MAX;
const int NotificationMessage::NotificationMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UpdateUserVCardMessageResponse_UpdateUserVCardStateType_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[12];
}
bool UpdateUserVCardMessageResponse_UpdateUserVCardStateType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse::Success;
const UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse::Failure;
const UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse::UpdateUserVCardStateType_MIN;
const UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse::UpdateUserVCardStateType_MAX;
const int UpdateUserVCardMessageResponse::UpdateUserVCardStateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatGroupCreateResponse_ChatGroupCreateResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[13];
}
bool ChatGroupCreateResponse_ChatGroupCreateResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse::Success;
const ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse::Failed;
const ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse::ChatGroupCreateResponseResult_MIN;
const ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse::ChatGroupCreateResponseResult_MAX;
const int ChatGroupCreateResponse::ChatGroupCreateResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[14];
}
bool ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse::Success;
const ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse::Failed;
const ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse::ChatGroupDisbandResponseResult_MIN;
const ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse::ChatGroupDisbandResponseResult_MAX;
const int ChatGroupDisbandResponse::ChatGroupDisbandResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatGroupJoinResponse_ChatGroupJoinResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[15];
}
bool ChatGroupJoinResponse_ChatGroupJoinResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::Allow;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::Reject;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::ServerInternalError;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::InfomationNotMatch;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::AuthorizationNotMath;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::ChatGroupJoinResponseResult_MIN;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::ChatGroupJoinResponseResult_MAX;
const int ChatGroupJoinResponse::ChatGroupJoinResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatGroupQuitResponse_ChatGroupQuitResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[16];
}
bool ChatGroupQuitResponse_ChatGroupQuitResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse::Success;
const ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse::Failed;
const ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse::ChatGroupQuitResponseResult_MIN;
const ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse::ChatGroupQuitResponseResult_MAX;
const int ChatGroupQuitResponse::ChatGroupQuitResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[17];
}
bool UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::Success;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::Failed;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::ServerInternalError;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::InfomationNotMatch;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::AuthorizationNotMath;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::UpdateChatGroupInfoResponseResult_MIN;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::UpdateChatGroupInfoResponseResult_MAX;
const int UpdateChatGroupInfoResponse::UpdateChatGroupInfoResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[18];
}
bool FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse::Success;
const FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse::Failed;
const FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse::FetchChatGroupInfoResponseResult_MIN;
const FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse::FetchChatGroupInfoResponseResult_MAX;
const int FetchChatGroupInfoResponse::FetchChatGroupInfoResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[19];
}
bool FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse::Success;
const FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse::Failed;
const FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse::FetchChatGroupMemberListResponseResult_MIN;
const FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse::FetchChatGroupMemberListResponseResult_MAX;
const int FetchChatGroupMemberListResponse::FetchChatGroupMemberListResponseResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserGenderType_descriptor() {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMMessage_2eproto::file_level_enum_descriptors[20];
}
bool UserGenderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestSessionIDMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSessionIDMessage::RequestSessionIDMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsRequestSessionIDMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.RequestSessionIDMessage)
}
RequestSessionIDMessage::RequestSessionIDMessage(const RequestSessionIDMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.RequestSessionIDMessage)
}

void RequestSessionIDMessage::SharedCtor() {
  _cached_size_ = 0;
}

RequestSessionIDMessage::~RequestSessionIDMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.RequestSessionIDMessage)
  SharedDtor();
}

void RequestSessionIDMessage::SharedDtor() {
}

void RequestSessionIDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSessionIDMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestSessionIDMessage& RequestSessionIDMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsRequestSessionIDMessage();
  return *internal_default_instance();
}


void RequestSessionIDMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.RequestSessionIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestSessionIDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.RequestSessionIDMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.RequestSessionIDMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.RequestSessionIDMessage)
  return false;
#undef DO_
}

void RequestSessionIDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.RequestSessionIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.RequestSessionIDMessage)
}

::google::protobuf::uint8* RequestSessionIDMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.RequestSessionIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.RequestSessionIDMessage)
  return target;
}

size_t RequestSessionIDMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.RequestSessionIDMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSessionIDMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.RequestSessionIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSessionIDMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSessionIDMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.RequestSessionIDMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.RequestSessionIDMessage)
    MergeFrom(*source);
  }
}

void RequestSessionIDMessage::MergeFrom(const RequestSessionIDMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.RequestSessionIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestSessionIDMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.RequestSessionIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSessionIDMessage::CopyFrom(const RequestSessionIDMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.RequestSessionIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSessionIDMessage::IsInitialized() const {
  return true;
}

void RequestSessionIDMessage::Swap(RequestSessionIDMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSessionIDMessage::InternalSwap(RequestSessionIDMessage* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSessionIDMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseSessionIDMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSessionIDMessage::kSessionIDFieldNumber;
const int ResponseSessionIDMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSessionIDMessage::ResponseSessionIDMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseSessionIDMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ResponseSessionIDMessage)
}
ResponseSessionIDMessage::ResponseSessionIDMessage(const ResponseSessionIDMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ResponseSessionIDMessage)
}

void ResponseSessionIDMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
}

ResponseSessionIDMessage::~ResponseSessionIDMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ResponseSessionIDMessage)
  SharedDtor();
}

void ResponseSessionIDMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseSessionIDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSessionIDMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseSessionIDMessage& ResponseSessionIDMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseSessionIDMessage();
  return *internal_default_instance();
}


void ResponseSessionIDMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ResponseSessionIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseSessionIDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ResponseSessionIDMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ResponseSessionIDMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ResponseSessionIDMessage_Status_IsValid(value)) {
            set_status(static_cast< ::kakaIM::Node::ResponseSessionIDMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ResponseSessionIDMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ResponseSessionIDMessage)
  return false;
#undef DO_
}

void ResponseSessionIDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ResponseSessionIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseSessionIDMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ResponseSessionIDMessage)
}

::google::protobuf::uint8* ResponseSessionIDMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ResponseSessionIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseSessionIDMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ResponseSessionIDMessage)
  return target;
}

size_t ResponseSessionIDMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ResponseSessionIDMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_status()) {
    // required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t ResponseSessionIDMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ResponseSessionIDMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSessionIDMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ResponseSessionIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSessionIDMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSessionIDMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ResponseSessionIDMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ResponseSessionIDMessage)
    MergeFrom(*source);
  }
}

void ResponseSessionIDMessage::MergeFrom(const ResponseSessionIDMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ResponseSessionIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseSessionIDMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ResponseSessionIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSessionIDMessage::CopyFrom(const ResponseSessionIDMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ResponseSessionIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSessionIDMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResponseSessionIDMessage::Swap(ResponseSessionIDMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSessionIDMessage::InternalSwap(ResponseSessionIDMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSessionIDMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginMessage::kSessionIDFieldNumber;
const int LoginMessage::kUserAccountFieldNumber;
const int LoginMessage::kUserPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginMessage::LoginMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsLoginMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.LoginMessage)
}
LoginMessage::LoginMessage(const LoginMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpassword()) {
    userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.LoginMessage)
}

void LoginMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginMessage::~LoginMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.LoginMessage)
  SharedDtor();
}

void LoginMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginMessage& LoginMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsLoginMessage();
  return *internal_default_instance();
}


void LoginMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.LoginMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!userpassword_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      userpassword_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.LoginMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.LoginMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.LoginMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPassword = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpassword().data(), static_cast<int>(this->userpassword().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.LoginMessage.userPassword");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.LoginMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.LoginMessage)
  return false;
#undef DO_
}

void LoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.LoginMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LoginMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LoginMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->useraccount(), output);
  }

  // required string userPassword = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), static_cast<int>(this->userpassword().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LoginMessage.userPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userpassword(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.LoginMessage)
}

::google::protobuf::uint8* LoginMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.LoginMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LoginMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LoginMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->useraccount(), target);
  }

  // required string userPassword = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), static_cast<int>(this->userpassword().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LoginMessage.userPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userpassword(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.LoginMessage)
  return target;
}

size_t LoginMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.LoginMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_useraccount()) {
    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_userpassword()) {
    // required string userPassword = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());
  }

  return total_size;
}
size_t LoginMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.LoginMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required string userPassword = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.LoginMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.LoginMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.LoginMessage)
    MergeFrom(*source);
  }
}

void LoginMessage::MergeFrom(const LoginMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.LoginMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_userpassword();
      userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
    }
  }
}

void LoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.LoginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginMessage::CopyFrom(const LoginMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.LoginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LoginMessage::Swap(LoginMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginMessage::InternalSwap(LoginMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  useraccount_.Swap(&other->useraccount_);
  userpassword_.Swap(&other->userpassword_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseLoginMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseLoginMessage::kSessionIDFieldNumber;
const int ResponseLoginMessage::kLoginStateFieldNumber;
const int ResponseLoginMessage::kFailureErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLoginMessage::ResponseLoginMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseLoginMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ResponseLoginMessage)
}
ResponseLoginMessage::ResponseLoginMessage(const ResponseLoginMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  ::memcpy(&loginstate_, &from.loginstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&failureerror_) -
    reinterpret_cast<char*>(&loginstate_)) + sizeof(failureerror_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ResponseLoginMessage)
}

void ResponseLoginMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginstate_ = 1;
  failureerror_ = 1;
}

ResponseLoginMessage::~ResponseLoginMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ResponseLoginMessage)
  SharedDtor();
}

void ResponseLoginMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseLoginMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLoginMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseLoginMessage& ResponseLoginMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseLoginMessage();
  return *internal_default_instance();
}


void ResponseLoginMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ResponseLoginMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    loginstate_ = 1;
    failureerror_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseLoginMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ResponseLoginMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ResponseLoginMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ResponseLoginMessage_LoginState_IsValid(value)) {
            set_loginstate(static_cast< ::kakaIM::Node::ResponseLoginMessage_LoginState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.Node.ResponseLoginMessage.FailureError failureError = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ResponseLoginMessage_FailureError_IsValid(value)) {
            set_failureerror(static_cast< ::kakaIM::Node::ResponseLoginMessage_FailureError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ResponseLoginMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ResponseLoginMessage)
  return false;
#undef DO_
}

void ResponseLoginMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ResponseLoginMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseLoginMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->loginstate(), output);
  }

  // optional .kakaIM.Node.ResponseLoginMessage.FailureError failureError = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->failureerror(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ResponseLoginMessage)
}

::google::protobuf::uint8* ResponseLoginMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ResponseLoginMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseLoginMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->loginstate(), target);
  }

  // optional .kakaIM.Node.ResponseLoginMessage.FailureError failureError = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->failureerror(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ResponseLoginMessage)
  return target;
}

size_t ResponseLoginMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ResponseLoginMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_loginstate()) {
    // required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loginstate());
  }

  return total_size;
}
size_t ResponseLoginMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ResponseLoginMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loginstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .kakaIM.Node.ResponseLoginMessage.FailureError failureError = 3;
  if (has_failureerror()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->failureerror());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLoginMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ResponseLoginMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLoginMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLoginMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ResponseLoginMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ResponseLoginMessage)
    MergeFrom(*source);
  }
}

void ResponseLoginMessage::MergeFrom(const ResponseLoginMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ResponseLoginMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      loginstate_ = from.loginstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      failureerror_ = from.failureerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseLoginMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ResponseLoginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLoginMessage::CopyFrom(const ResponseLoginMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ResponseLoginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLoginMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResponseLoginMessage::Swap(ResponseLoginMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLoginMessage::InternalSwap(ResponseLoginMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(loginstate_, other->loginstate_);
  swap(failureerror_, other->failureerror_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseLoginMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterMessage::kSessionIDFieldNumber;
const int RegisterMessage::kUserAccountFieldNumber;
const int RegisterMessage::kUserPasswordFieldNumber;
const int RegisterMessage::kUserNickNameFieldNumber;
const int RegisterMessage::kSexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterMessage::RegisterMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsRegisterMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.RegisterMessage)
}
RegisterMessage::RegisterMessage(const RegisterMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpassword()) {
    userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  usernickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_usernickname()) {
    usernickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usernickname_);
  }
  sex_ = from.sex_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.RegisterMessage)
}

void RegisterMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usernickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 3;
}

RegisterMessage::~RegisterMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.RegisterMessage)
  SharedDtor();
}

void RegisterMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usernickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterMessage& RegisterMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsRegisterMessage();
  return *internal_default_instance();
}


void RegisterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.RegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!userpassword_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      userpassword_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!usernickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      usernickname_.UnsafeMutablePointer()->clear();
    }
    sex_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.RegisterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.RegisterMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.RegisterMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPassword = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpassword().data(), static_cast<int>(this->userpassword().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.RegisterMessage.userPassword");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userNickName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usernickname().data(), static_cast<int>(this->usernickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.RegisterMessage.userNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.Node.RegisterMessage.UserSex sex = 5 [default = Unkown];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::RegisterMessage_UserSex_IsValid(value)) {
            set_sex(static_cast< ::kakaIM::Node::RegisterMessage_UserSex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.RegisterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.RegisterMessage)
  return false;
#undef DO_
}

void RegisterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.RegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->useraccount(), output);
  }

  // required string userPassword = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), static_cast<int>(this->userpassword().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.userPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userpassword(), output);
  }

  // optional string userNickName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usernickname().data(), static_cast<int>(this->usernickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.userNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->usernickname(), output);
  }

  // optional .kakaIM.Node.RegisterMessage.UserSex sex = 5 [default = Unkown];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.RegisterMessage)
}

::google::protobuf::uint8* RegisterMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.RegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->useraccount(), target);
  }

  // required string userPassword = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), static_cast<int>(this->userpassword().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.userPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userpassword(), target);
  }

  // optional string userNickName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usernickname().data(), static_cast<int>(this->usernickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.RegisterMessage.userNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usernickname(), target);
  }

  // optional .kakaIM.Node.RegisterMessage.UserSex sex = 5 [default = Unkown];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.RegisterMessage)
  return target;
}

size_t RegisterMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.RegisterMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_useraccount()) {
    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_userpassword()) {
    // required string userPassword = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());
  }

  return total_size;
}
size_t RegisterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.RegisterMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required string userPassword = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string userNickName = 4;
    if (has_usernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usernickname());
    }

    // optional .kakaIM.Node.RegisterMessage.UserSex sex = 5 [default = Unkown];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.RegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.RegisterMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.RegisterMessage)
    MergeFrom(*source);
  }
}

void RegisterMessage::MergeFrom(const RegisterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.RegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_userpassword();
      userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_usernickname();
      usernickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usernickname_);
    }
    if (cached_has_bits & 0x00000010u) {
      sex_ = from.sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.RegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMessage::CopyFrom(const RegisterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.RegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RegisterMessage::Swap(RegisterMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterMessage::InternalSwap(RegisterMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  useraccount_.Swap(&other->useraccount_);
  userpassword_.Swap(&other->userpassword_);
  usernickname_.Swap(&other->usernickname_);
  swap(sex_, other->sex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseRegisterMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseRegisterMessage::kSessionIDFieldNumber;
const int ResponseRegisterMessage::kRegisterStateFieldNumber;
const int ResponseRegisterMessage::kFailureErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseRegisterMessage::ResponseRegisterMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseRegisterMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ResponseRegisterMessage)
}
ResponseRegisterMessage::ResponseRegisterMessage(const ResponseRegisterMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  ::memcpy(&registerstate_, &from.registerstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&failureerror_) -
    reinterpret_cast<char*>(&registerstate_)) + sizeof(failureerror_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ResponseRegisterMessage)
}

void ResponseRegisterMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registerstate_ = 1;
  failureerror_ = 1;
}

ResponseRegisterMessage::~ResponseRegisterMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ResponseRegisterMessage)
  SharedDtor();
}

void ResponseRegisterMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseRegisterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegisterMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseRegisterMessage& ResponseRegisterMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseRegisterMessage();
  return *internal_default_instance();
}


void ResponseRegisterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ResponseRegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    registerstate_ = 1;
    failureerror_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseRegisterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ResponseRegisterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ResponseRegisterMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ResponseRegisterMessage_RegisterState_IsValid(value)) {
            set_registerstate(static_cast< ::kakaIM::Node::ResponseRegisterMessage_RegisterState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.Node.ResponseRegisterMessage.FailureError failureError = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ResponseRegisterMessage_FailureError_IsValid(value)) {
            set_failureerror(static_cast< ::kakaIM::Node::ResponseRegisterMessage_FailureError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ResponseRegisterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ResponseRegisterMessage)
  return false;
#undef DO_
}

void ResponseRegisterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ResponseRegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseRegisterMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->registerstate(), output);
  }

  // optional .kakaIM.Node.ResponseRegisterMessage.FailureError failureError = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->failureerror(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ResponseRegisterMessage)
}

::google::protobuf::uint8* ResponseRegisterMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ResponseRegisterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseRegisterMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->registerstate(), target);
  }

  // optional .kakaIM.Node.ResponseRegisterMessage.FailureError failureError = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->failureerror(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ResponseRegisterMessage)
  return target;
}

size_t ResponseRegisterMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ResponseRegisterMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_registerstate()) {
    // required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->registerstate());
  }

  return total_size;
}
size_t ResponseRegisterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ResponseRegisterMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->registerstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .kakaIM.Node.ResponseRegisterMessage.FailureError failureError = 3;
  if (has_failureerror()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->failureerror());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegisterMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ResponseRegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRegisterMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseRegisterMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ResponseRegisterMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ResponseRegisterMessage)
    MergeFrom(*source);
  }
}

void ResponseRegisterMessage::MergeFrom(const ResponseRegisterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ResponseRegisterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      registerstate_ = from.registerstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      failureerror_ = from.failureerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseRegisterMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ResponseRegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegisterMessage::CopyFrom(const ResponseRegisterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ResponseRegisterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegisterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResponseRegisterMessage::Swap(ResponseRegisterMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseRegisterMessage::InternalSwap(ResponseRegisterMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(registerstate_, other->registerstate_);
  swap(failureerror_, other->failureerror_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseRegisterMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartBeatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatMessage::kSessionIDFieldNumber;
const int HeartBeatMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatMessage::HeartBeatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsHeartBeatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.HeartBeatMessage)
}
HeartBeatMessage::HeartBeatMessage(const HeartBeatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.HeartBeatMessage)
}

void HeartBeatMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartBeatMessage::~HeartBeatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.HeartBeatMessage)
  SharedDtor();
}

void HeartBeatMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeatMessage& HeartBeatMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsHeartBeatMessage();
  return *internal_default_instance();
}


void HeartBeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      timestamp_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.HeartBeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.HeartBeatMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.HeartBeatMessage.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.HeartBeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.HeartBeatMessage)
  return false;
#undef DO_
}

void HeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.HeartBeatMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.HeartBeatMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.HeartBeatMessage)
}

::google::protobuf::uint8* HeartBeatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.HeartBeatMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.HeartBeatMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.HeartBeatMessage)
  return target;
}

size_t HeartBeatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.HeartBeatMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_timestamp()) {
    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  return total_size;
}
size_t HeartBeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.HeartBeatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.HeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.HeartBeatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.HeartBeatMessage)
    MergeFrom(*source);
  }
}

void HeartBeatMessage::MergeFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.HeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
  }
}

void HeartBeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.HeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatMessage::CopyFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.HeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeartBeatMessage::Swap(HeartBeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatMessage::InternalSwap(HeartBeatMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  timestamp_.Swap(&other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseHeartBeatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeartBeatMessage::kSessionIDFieldNumber;
const int ResponseHeartBeatMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeartBeatMessage::ResponseHeartBeatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseHeartBeatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ResponseHeartBeatMessage)
}
ResponseHeartBeatMessage::ResponseHeartBeatMessage(const ResponseHeartBeatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ResponseHeartBeatMessage)
}

void ResponseHeartBeatMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseHeartBeatMessage::~ResponseHeartBeatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ResponseHeartBeatMessage)
  SharedDtor();
}

void ResponseHeartBeatMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseHeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeartBeatMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeartBeatMessage& ResponseHeartBeatMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseHeartBeatMessage();
  return *internal_default_instance();
}


void ResponseHeartBeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ResponseHeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      timestamp_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseHeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ResponseHeartBeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ResponseHeartBeatMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ResponseHeartBeatMessage.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ResponseHeartBeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ResponseHeartBeatMessage)
  return false;
#undef DO_
}

void ResponseHeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ResponseHeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseHeartBeatMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseHeartBeatMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ResponseHeartBeatMessage)
}

::google::protobuf::uint8* ResponseHeartBeatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ResponseHeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseHeartBeatMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseHeartBeatMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ResponseHeartBeatMessage)
  return target;
}

size_t ResponseHeartBeatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ResponseHeartBeatMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_timestamp()) {
    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  return total_size;
}
size_t ResponseHeartBeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ResponseHeartBeatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeartBeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ResponseHeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeartBeatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeartBeatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ResponseHeartBeatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ResponseHeartBeatMessage)
    MergeFrom(*source);
  }
}

void ResponseHeartBeatMessage::MergeFrom(const ResponseHeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ResponseHeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
  }
}

void ResponseHeartBeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ResponseHeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeartBeatMessage::CopyFrom(const ResponseHeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ResponseHeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeartBeatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResponseHeartBeatMessage::Swap(ResponseHeartBeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeartBeatMessage::InternalSwap(ResponseHeartBeatMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  timestamp_.Swap(&other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeartBeatMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogoutMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutMessage::kSessionIDFieldNumber;
const int LogoutMessage::kOfflineMaileStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutMessage::LogoutMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsLogoutMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.LogoutMessage)
}
LogoutMessage::LogoutMessage(const LogoutMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  offlinemailestate_ = from.offlinemailestate_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.LogoutMessage)
}

void LogoutMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offlinemailestate_ = 1;
}

LogoutMessage::~LogoutMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.LogoutMessage)
  SharedDtor();
}

void LogoutMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogoutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutMessage& LogoutMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsLogoutMessage();
  return *internal_default_instance();
}


void LogoutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.LogoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    offlinemailestate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.LogoutMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.LogoutMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.Node.LogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::LogoutMessage_OfflineMailState_IsValid(value)) {
            set_offlinemailestate(static_cast< ::kakaIM::Node::LogoutMessage_OfflineMailState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.LogoutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.LogoutMessage)
  return false;
#undef DO_
}

void LogoutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.LogoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LogoutMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional .kakaIM.Node.LogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->offlinemailestate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.LogoutMessage)
}

::google::protobuf::uint8* LogoutMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.LogoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.LogoutMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional .kakaIM.Node.LogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->offlinemailestate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.LogoutMessage)
  return target;
}

size_t LogoutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.LogoutMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  // optional .kakaIM.Node.LogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  if (has_offlinemailestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offlinemailestate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.LogoutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.LogoutMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.LogoutMessage)
    MergeFrom(*source);
  }
}

void LogoutMessage::MergeFrom(const LogoutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.LogoutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      offlinemailestate_ = from.offlinemailestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogoutMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.LogoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutMessage::CopyFrom(const LogoutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.LogoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogoutMessage::Swap(LogoutMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutMessage::InternalSwap(LogoutMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(offlinemailestate_, other->offlinemailestate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseLogoutMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseLogoutMessage::kSessionIDFieldNumber;
const int ResponseLogoutMessage::kOfflineMaileStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLogoutMessage::ResponseLogoutMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseLogoutMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ResponseLogoutMessage)
}
ResponseLogoutMessage::ResponseLogoutMessage(const ResponseLogoutMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  offlinemailestate_ = from.offlinemailestate_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ResponseLogoutMessage)
}

void ResponseLogoutMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offlinemailestate_ = 1;
}

ResponseLogoutMessage::~ResponseLogoutMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ResponseLogoutMessage)
  SharedDtor();
}

void ResponseLogoutMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseLogoutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLogoutMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseLogoutMessage& ResponseLogoutMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseLogoutMessage();
  return *internal_default_instance();
}


void ResponseLogoutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ResponseLogoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    offlinemailestate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseLogoutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ResponseLogoutMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ResponseLogoutMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.Node.ResponseLogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ResponseLogoutMessage_OfflineMailState_IsValid(value)) {
            set_offlinemailestate(static_cast< ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ResponseLogoutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ResponseLogoutMessage)
  return false;
#undef DO_
}

void ResponseLogoutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ResponseLogoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseLogoutMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional .kakaIM.Node.ResponseLogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->offlinemailestate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ResponseLogoutMessage)
}

::google::protobuf::uint8* ResponseLogoutMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ResponseLogoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ResponseLogoutMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional .kakaIM.Node.ResponseLogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->offlinemailestate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ResponseLogoutMessage)
  return target;
}

size_t ResponseLogoutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ResponseLogoutMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  // optional .kakaIM.Node.ResponseLogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  if (has_offlinemailestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offlinemailestate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLogoutMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ResponseLogoutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLogoutMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLogoutMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ResponseLogoutMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ResponseLogoutMessage)
    MergeFrom(*source);
  }
}

void ResponseLogoutMessage::MergeFrom(const ResponseLogoutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ResponseLogoutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      offlinemailestate_ = from.offlinemailestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseLogoutMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ResponseLogoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLogoutMessage::CopyFrom(const ResponseLogoutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ResponseLogoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLogoutMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResponseLogoutMessage::Swap(ResponseLogoutMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLogoutMessage::InternalSwap(ResponseLogoutMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(offlinemailestate_, other->offlinemailestate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseLogoutMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuildingRelationshipRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildingRelationshipRequestMessage::kSessionIDFieldNumber;
const int BuildingRelationshipRequestMessage::kApplicantIdFieldNumber;
const int BuildingRelationshipRequestMessage::kSponsorAccountFieldNumber;
const int BuildingRelationshipRequestMessage::kTargetAccountFieldNumber;
const int BuildingRelationshipRequestMessage::kIntroductionFieldNumber;
const int BuildingRelationshipRequestMessage::kMessageIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildingRelationshipRequestMessage::BuildingRelationshipRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsBuildingRelationshipRequestMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.BuildingRelationshipRequestMessage)
}
BuildingRelationshipRequestMessage::BuildingRelationshipRequestMessage(const BuildingRelationshipRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsoraccount()) {
    sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
  }
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetaccount()) {
    targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
  }
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_introduction()) {
    introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
  }
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&messageid_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(messageid_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.BuildingRelationshipRequestMessage)
}

void BuildingRelationshipRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messageid_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(messageid_));
}

BuildingRelationshipRequestMessage::~BuildingRelationshipRequestMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.BuildingRelationshipRequestMessage)
  SharedDtor();
}

void BuildingRelationshipRequestMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BuildingRelationshipRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingRelationshipRequestMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuildingRelationshipRequestMessage& BuildingRelationshipRequestMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsBuildingRelationshipRequestMessage();
  return *internal_default_instance();
}


void BuildingRelationshipRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sponsoraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sponsoraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!targetaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      targetaccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!introduction_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      introduction_.UnsafeMutablePointer()->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&applicant_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&messageid_) -
        reinterpret_cast<char*>(&applicant_id_)) + sizeof(messageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BuildingRelationshipRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipRequestMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 applicant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_applicant_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applicant_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sponsorAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsoraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string introduction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->introduction().data(), static_cast<int>(this->introduction().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipRequestMessage.introduction");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 messageID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.BuildingRelationshipRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.BuildingRelationshipRequestMessage)
  return false;
#undef DO_
}

void BuildingRelationshipRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional uint64 applicant_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->applicant_id(), output);
  }

  // required string sponsorAccount = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sponsoraccount(), output);
  }

  // required string targetAccount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->targetaccount(), output);
  }

  // required string introduction = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), static_cast<int>(this->introduction().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.introduction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->introduction(), output);
  }

  // optional uint64 messageID = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->messageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.BuildingRelationshipRequestMessage)
}

::google::protobuf::uint8* BuildingRelationshipRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional uint64 applicant_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->applicant_id(), target);
  }

  // required string sponsorAccount = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sponsoraccount(), target);
  }

  // required string targetAccount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetaccount(), target);
  }

  // required string introduction = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), static_cast<int>(this->introduction().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipRequestMessage.introduction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->introduction(), target);
  }

  // optional uint64 messageID = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->messageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.BuildingRelationshipRequestMessage)
  return target;
}

size_t BuildingRelationshipRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_sponsoraccount()) {
    // required string sponsorAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());
  }

  if (has_targetaccount()) {
    // required string targetAccount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());
  }

  if (has_introduction()) {
    // required string introduction = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->introduction());
  }

  return total_size;
}
size_t BuildingRelationshipRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string sponsorAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());

    // required string targetAccount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());

    // required string introduction = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->introduction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional uint64 applicant_id = 2;
    if (has_applicant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applicant_id());
    }

    // optional uint64 messageID = 6;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingRelationshipRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildingRelationshipRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildingRelationshipRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.BuildingRelationshipRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.BuildingRelationshipRequestMessage)
    MergeFrom(*source);
  }
}

void BuildingRelationshipRequestMessage::MergeFrom(const BuildingRelationshipRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sponsoraccount();
      sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_targetaccount();
      targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_introduction();
      introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
    }
    if (cached_has_bits & 0x00000010u) {
      applicant_id_ = from.applicant_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuildingRelationshipRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingRelationshipRequestMessage::CopyFrom(const BuildingRelationshipRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.BuildingRelationshipRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingRelationshipRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void BuildingRelationshipRequestMessage::Swap(BuildingRelationshipRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildingRelationshipRequestMessage::InternalSwap(BuildingRelationshipRequestMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  sponsoraccount_.Swap(&other->sponsoraccount_);
  targetaccount_.Swap(&other->targetaccount_);
  introduction_.Swap(&other->introduction_);
  swap(applicant_id_, other->applicant_id_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildingRelationshipRequestMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuildingRelationshipAnswerMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildingRelationshipAnswerMessage::kSessionIDFieldNumber;
const int BuildingRelationshipAnswerMessage::kApplicantIdFieldNumber;
const int BuildingRelationshipAnswerMessage::kTargetAccountFieldNumber;
const int BuildingRelationshipAnswerMessage::kSponsorAccountFieldNumber;
const int BuildingRelationshipAnswerMessage::kAnswerFieldNumber;
const int BuildingRelationshipAnswerMessage::kMessageIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildingRelationshipAnswerMessage::BuildingRelationshipAnswerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsBuildingRelationshipAnswerMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.BuildingRelationshipAnswerMessage)
}
BuildingRelationshipAnswerMessage::BuildingRelationshipAnswerMessage(const BuildingRelationshipAnswerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetaccount()) {
    targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
  }
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsoraccount()) {
    sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
  }
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&answer_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(answer_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.BuildingRelationshipAnswerMessage)
}

void BuildingRelationshipAnswerMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicant_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messageid_) -
      reinterpret_cast<char*>(&applicant_id_)) + sizeof(messageid_));
  answer_ = 1;
}

BuildingRelationshipAnswerMessage::~BuildingRelationshipAnswerMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.BuildingRelationshipAnswerMessage)
  SharedDtor();
}

void BuildingRelationshipAnswerMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BuildingRelationshipAnswerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingRelationshipAnswerMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuildingRelationshipAnswerMessage& BuildingRelationshipAnswerMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsBuildingRelationshipAnswerMessage();
  return *internal_default_instance();
}


void BuildingRelationshipAnswerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!targetaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      targetaccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!sponsoraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sponsoraccount_.UnsafeMutablePointer()->clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&applicant_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&messageid_) -
        reinterpret_cast<char*>(&applicant_id_)) + sizeof(messageid_));
    answer_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BuildingRelationshipAnswerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 applicant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_applicant_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applicant_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sponsorAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsoraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_IsValid(value)) {
            set_answer(static_cast< ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 messageID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.BuildingRelationshipAnswerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.BuildingRelationshipAnswerMessage)
  return false;
#undef DO_
}

void BuildingRelationshipAnswerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required uint64 applicant_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->applicant_id(), output);
  }

  // required string targetAccount = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetaccount(), output);
  }

  // required string sponsorAccount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sponsoraccount(), output);
  }

  // required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->answer(), output);
  }

  // optional uint64 messageID = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->messageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.BuildingRelationshipAnswerMessage)
}

::google::protobuf::uint8* BuildingRelationshipAnswerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required uint64 applicant_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->applicant_id(), target);
  }

  // required string targetAccount = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetaccount(), target);
  }

  // required string sponsorAccount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sponsoraccount(), target);
  }

  // required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->answer(), target);
  }

  // optional uint64 messageID = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->messageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.BuildingRelationshipAnswerMessage)
  return target;
}

size_t BuildingRelationshipAnswerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_targetaccount()) {
    // required string targetAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());
  }

  if (has_sponsoraccount()) {
    // required string sponsorAccount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());
  }

  if (has_applicant_id()) {
    // required uint64 applicant_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applicant_id());
  }

  if (has_answer()) {
    // required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer());
  }

  return total_size;
}
size_t BuildingRelationshipAnswerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string targetAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());

    // required string sponsorAccount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());

    // required uint64 applicant_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applicant_id());

    // required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 messageID = 6;
  if (has_messageid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingRelationshipAnswerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildingRelationshipAnswerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildingRelationshipAnswerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.BuildingRelationshipAnswerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.BuildingRelationshipAnswerMessage)
    MergeFrom(*source);
  }
}

void BuildingRelationshipAnswerMessage::MergeFrom(const BuildingRelationshipAnswerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_targetaccount();
      targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sponsoraccount();
      sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      applicant_id_ = from.applicant_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      messageid_ = from.messageid_;
    }
    if (cached_has_bits & 0x00000020u) {
      answer_ = from.answer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuildingRelationshipAnswerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingRelationshipAnswerMessage::CopyFrom(const BuildingRelationshipAnswerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.BuildingRelationshipAnswerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingRelationshipAnswerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  return true;
}

void BuildingRelationshipAnswerMessage::Swap(BuildingRelationshipAnswerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuildingRelationshipAnswerMessage::InternalSwap(BuildingRelationshipAnswerMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  targetaccount_.Swap(&other->targetaccount_);
  sponsoraccount_.Swap(&other->sponsoraccount_);
  swap(applicant_id_, other->applicant_id_);
  swap(messageid_, other->messageid_);
  swap(answer_, other->answer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildingRelationshipAnswerMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DestroyingRelationshipRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyingRelationshipRequestMessage::kSessionIDFieldNumber;
const int DestroyingRelationshipRequestMessage::kSponsorAccountFieldNumber;
const int DestroyingRelationshipRequestMessage::kTargetAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyingRelationshipRequestMessage::DestroyingRelationshipRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsDestroyingRelationshipRequestMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.DestroyingRelationshipRequestMessage)
}
DestroyingRelationshipRequestMessage::DestroyingRelationshipRequestMessage(const DestroyingRelationshipRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsoraccount()) {
    sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
  }
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetaccount()) {
    targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.DestroyingRelationshipRequestMessage)
}

void DestroyingRelationshipRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DestroyingRelationshipRequestMessage::~DestroyingRelationshipRequestMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.DestroyingRelationshipRequestMessage)
  SharedDtor();
}

void DestroyingRelationshipRequestMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DestroyingRelationshipRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyingRelationshipRequestMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestroyingRelationshipRequestMessage& DestroyingRelationshipRequestMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsDestroyingRelationshipRequestMessage();
  return *internal_default_instance();
}


void DestroyingRelationshipRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sponsoraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sponsoraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!targetaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      targetaccount_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestroyingRelationshipRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sponsorAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsoraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.DestroyingRelationshipRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.DestroyingRelationshipRequestMessage)
  return false;
#undef DO_
}

void DestroyingRelationshipRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string sponsorAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sponsoraccount(), output);
  }

  // required string targetAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.DestroyingRelationshipRequestMessage)
}

::google::protobuf::uint8* DestroyingRelationshipRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string sponsorAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sponsoraccount(), target);
  }

  // required string targetAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.DestroyingRelationshipRequestMessage)
  return target;
}

size_t DestroyingRelationshipRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_sponsoraccount()) {
    // required string sponsorAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());
  }

  if (has_targetaccount()) {
    // required string targetAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());
  }

  return total_size;
}
size_t DestroyingRelationshipRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string sponsorAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());

    // required string targetAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyingRelationshipRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyingRelationshipRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyingRelationshipRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.DestroyingRelationshipRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.DestroyingRelationshipRequestMessage)
    MergeFrom(*source);
  }
}

void DestroyingRelationshipRequestMessage::MergeFrom(const DestroyingRelationshipRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sponsoraccount();
      sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_targetaccount();
      targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
    }
  }
}

void DestroyingRelationshipRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyingRelationshipRequestMessage::CopyFrom(const DestroyingRelationshipRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.DestroyingRelationshipRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyingRelationshipRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DestroyingRelationshipRequestMessage::Swap(DestroyingRelationshipRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyingRelationshipRequestMessage::InternalSwap(DestroyingRelationshipRequestMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  sponsoraccount_.Swap(&other->sponsoraccount_);
  targetaccount_.Swap(&other->targetaccount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyingRelationshipRequestMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DestoryingRelationshipResponseMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestoryingRelationshipResponseMessage::kSessionIDFieldNumber;
const int DestoryingRelationshipResponseMessage::kSponsorAccountFieldNumber;
const int DestoryingRelationshipResponseMessage::kTargetAccountFieldNumber;
const int DestoryingRelationshipResponseMessage::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestoryingRelationshipResponseMessage::DestoryingRelationshipResponseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsDestoryingRelationshipResponseMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.DestoryingRelationshipResponseMessage)
}
DestoryingRelationshipResponseMessage::DestoryingRelationshipResponseMessage(const DestoryingRelationshipResponseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsoraccount()) {
    sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
  }
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetaccount()) {
    targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
  }
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.DestoryingRelationshipResponseMessage)
}

void DestoryingRelationshipResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = 1;
}

DestoryingRelationshipResponseMessage::~DestoryingRelationshipResponseMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.DestoryingRelationshipResponseMessage)
  SharedDtor();
}

void DestoryingRelationshipResponseMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsoraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DestoryingRelationshipResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestoryingRelationshipResponseMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestoryingRelationshipResponseMessage& DestoryingRelationshipResponseMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsDestoryingRelationshipResponseMessage();
  return *internal_default_instance();
}


void DestoryingRelationshipResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sponsoraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sponsoraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!targetaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      targetaccount_.UnsafeMutablePointer()->clear();
    }
    response_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestoryingRelationshipResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sponsorAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsoraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IsValid(value)) {
            set_response(static_cast< ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.DestoryingRelationshipResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.DestoryingRelationshipResponseMessage)
  return false;
#undef DO_
}

void DestoryingRelationshipResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string sponsorAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sponsoraccount(), output);
  }

  // required string targetAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetaccount(), output);
  }

  // required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.DestoryingRelationshipResponseMessage)
}

::google::protobuf::uint8* DestoryingRelationshipResponseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string sponsorAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsoraccount().data(), static_cast<int>(this->sponsoraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sponsoraccount(), target);
  }

  // required string targetAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetaccount().data(), static_cast<int>(this->targetaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetaccount(), target);
  }

  // required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.DestoryingRelationshipResponseMessage)
  return target;
}

size_t DestoryingRelationshipResponseMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_sponsoraccount()) {
    // required string sponsorAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());
  }

  if (has_targetaccount()) {
    // required string targetAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());
  }

  if (has_response()) {
    // required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  return total_size;
}
size_t DestoryingRelationshipResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string sponsorAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sponsoraccount());

    // required string targetAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetaccount());

    // required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestoryingRelationshipResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DestoryingRelationshipResponseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestoryingRelationshipResponseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.DestoryingRelationshipResponseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.DestoryingRelationshipResponseMessage)
    MergeFrom(*source);
  }
}

void DestoryingRelationshipResponseMessage::MergeFrom(const DestoryingRelationshipResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sponsoraccount();
      sponsoraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsoraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_targetaccount();
      targetaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetaccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DestoryingRelationshipResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestoryingRelationshipResponseMessage::CopyFrom(const DestoryingRelationshipResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.DestoryingRelationshipResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestoryingRelationshipResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DestoryingRelationshipResponseMessage::Swap(DestoryingRelationshipResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestoryingRelationshipResponseMessage::InternalSwap(DestoryingRelationshipResponseMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  sponsoraccount_.Swap(&other->sponsoraccount_);
  targetaccount_.Swap(&other->targetaccount_);
  swap(response_, other->response_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestoryingRelationshipResponseMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendListRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListRequestMessage::kSessionIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListRequestMessage::FriendListRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListRequestMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FriendListRequestMessage)
}
FriendListRequestMessage::FriendListRequestMessage(const FriendListRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FriendListRequestMessage)
}

void FriendListRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendListRequestMessage::~FriendListRequestMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FriendListRequestMessage)
  SharedDtor();
}

void FriendListRequestMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendListRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListRequestMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendListRequestMessage& FriendListRequestMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListRequestMessage();
  return *internal_default_instance();
}


void FriendListRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FriendListRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    sessionid_.UnsafeMutablePointer()->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendListRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FriendListRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FriendListRequestMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FriendListRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FriendListRequestMessage)
  return false;
#undef DO_
}

void FriendListRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FriendListRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FriendListRequestMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FriendListRequestMessage)
}

::google::protobuf::uint8* FriendListRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FriendListRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FriendListRequestMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FriendListRequestMessage)
  return target;
}

size_t FriendListRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FriendListRequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FriendListRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FriendListRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FriendListRequestMessage)
    MergeFrom(*source);
  }
}

void FriendListRequestMessage::MergeFrom(const FriendListRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FriendListRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessionid()) {
    set_has_sessionid();
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
}

void FriendListRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FriendListRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListRequestMessage::CopyFrom(const FriendListRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FriendListRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FriendListRequestMessage::Swap(FriendListRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListRequestMessage::InternalSwap(FriendListRequestMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListRequestMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendListItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListItem::kFriendAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListItem::FriendListItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FriendListItem)
}
FriendListItem::FriendListItem(const FriendListItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friendaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friendaccount()) {
    friendaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendaccount_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FriendListItem)
}

void FriendListItem::SharedCtor() {
  _cached_size_ = 0;
  friendaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendListItem::~FriendListItem() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FriendListItem)
  SharedDtor();
}

void FriendListItem::SharedDtor() {
  friendaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListItem::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendListItem& FriendListItem::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListItem();
  return *internal_default_instance();
}


void FriendListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FriendListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!friendaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    friendaccount_.UnsafeMutablePointer()->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FriendListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string friendAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendaccount().data(), static_cast<int>(this->friendaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FriendListItem.friendAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FriendListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FriendListItem)
  return false;
#undef DO_
}

void FriendListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FriendListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string friendAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendaccount().data(), static_cast<int>(this->friendaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FriendListItem.friendAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->friendaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FriendListItem)
}

::google::protobuf::uint8* FriendListItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FriendListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string friendAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendaccount().data(), static_cast<int>(this->friendaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FriendListItem.friendAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friendaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FriendListItem)
  return target;
}

size_t FriendListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FriendListItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string friendAccount = 1;
  if (has_friendaccount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friendaccount());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FriendListItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FriendListItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FriendListItem)
    MergeFrom(*source);
  }
}

void FriendListItem::MergeFrom(const FriendListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FriendListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friendaccount()) {
    set_has_friendaccount();
    friendaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendaccount_);
  }
}

void FriendListItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FriendListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListItem::CopyFrom(const FriendListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FriendListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FriendListItem::Swap(FriendListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListItem::InternalSwap(FriendListItem* other) {
  using std::swap;
  friendaccount_.Swap(&other->friendaccount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListItem::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendListResponseMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListResponseMessage::kSessionIDFieldNumber;
const int FriendListResponseMessage::kFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListResponseMessage::FriendListResponseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListResponseMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FriendListResponseMessage)
}
FriendListResponseMessage::FriendListResponseMessage(const FriendListResponseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friend__(from.friend__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FriendListResponseMessage)
}

void FriendListResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendListResponseMessage::~FriendListResponseMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FriendListResponseMessage)
  SharedDtor();
}

void FriendListResponseMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendListResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListResponseMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendListResponseMessage& FriendListResponseMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListResponseMessage();
  return *internal_default_instance();
}


void FriendListResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FriendListResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend__.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    sessionid_.UnsafeMutablePointer()->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendListResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FriendListResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FriendListResponseMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kakaIM.Node.FriendListItem friend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friend_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FriendListResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FriendListResponseMessage)
  return false;
#undef DO_
}

void FriendListResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FriendListResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FriendListResponseMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // repeated .kakaIM.Node.FriendListItem friend = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friend__size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->friend_(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FriendListResponseMessage)
}

::google::protobuf::uint8* FriendListResponseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FriendListResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FriendListResponseMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // repeated .kakaIM.Node.FriendListItem friend = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friend__size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->friend_(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FriendListResponseMessage)
  return target;
}

size_t FriendListResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FriendListResponseMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  // repeated .kakaIM.Node.FriendListItem friend = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->friend__size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friend_(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FriendListResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListResponseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListResponseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FriendListResponseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FriendListResponseMessage)
    MergeFrom(*source);
  }
}

void FriendListResponseMessage::MergeFrom(const FriendListResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FriendListResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friend__.MergeFrom(from.friend__);
  if (from.has_sessionid()) {
    set_has_sessionid();
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
}

void FriendListResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FriendListResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListResponseMessage::CopyFrom(const FriendListResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FriendListResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friend_())) return false;
  return true;
}

void FriendListResponseMessage::Swap(FriendListResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListResponseMessage::InternalSwap(FriendListResponseMessage* other) {
  using std::swap;
  CastToBase(&friend__)->InternalSwap(CastToBase(&other->friend__));
  sessionid_.Swap(&other->sessionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListResponseMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OnlineStateMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnlineStateMessage::kSessionIDFieldNumber;
const int OnlineStateMessage::kUserAccountFieldNumber;
const int OnlineStateMessage::kUserStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlineStateMessage::OnlineStateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsOnlineStateMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.OnlineStateMessage)
}
OnlineStateMessage::OnlineStateMessage(const OnlineStateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  userstate_ = from.userstate_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.OnlineStateMessage)
}

void OnlineStateMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userstate_ = 1;
}

OnlineStateMessage::~OnlineStateMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.OnlineStateMessage)
  SharedDtor();
}

void OnlineStateMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnlineStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineStateMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnlineStateMessage& OnlineStateMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsOnlineStateMessage();
  return *internal_default_instance();
}


void OnlineStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.OnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    userstate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OnlineStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.OnlineStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.OnlineStateMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.OnlineStateMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::OnlineStateMessage_OnlineState_IsValid(value)) {
            set_userstate(static_cast< ::kakaIM::Node::OnlineStateMessage_OnlineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.OnlineStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.OnlineStateMessage)
  return false;
#undef DO_
}

void OnlineStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.OnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.OnlineStateMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.OnlineStateMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->useraccount(), output);
  }

  // required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->userstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.OnlineStateMessage)
}

::google::protobuf::uint8* OnlineStateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.OnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.OnlineStateMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.OnlineStateMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->useraccount(), target);
  }

  // required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->userstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.OnlineStateMessage)
  return target;
}

size_t OnlineStateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.OnlineStateMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_useraccount()) {
    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_userstate()) {
    // required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->userstate());
  }

  return total_size;
}
size_t OnlineStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.OnlineStateMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->userstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.OnlineStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlineStateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnlineStateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.OnlineStateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.OnlineStateMessage)
    MergeFrom(*source);
  }
}

void OnlineStateMessage::MergeFrom(const OnlineStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.OnlineStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      userstate_ = from.userstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OnlineStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.OnlineStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineStateMessage::CopyFrom(const OnlineStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.OnlineStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineStateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void OnlineStateMessage::Swap(OnlineStateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlineStateMessage::InternalSwap(OnlineStateMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  useraccount_.Swap(&other->useraccount_);
  swap(userstate_, other->userstate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnlineStateMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kSessionIDFieldNumber;
const int ChatMessage::kSenderAccountFieldNumber;
const int ChatMessage::kReceiverAccountFieldNumber;
const int ChatMessage::kContentFieldNumber;
const int ChatMessage::kTimestampFieldNumber;
const int ChatMessage::kMessageIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  senderaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_senderaccount()) {
    senderaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderaccount_);
  }
  receiveraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiveraccount()) {
    receiveraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiveraccount_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  messageid_ = from.messageid_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatMessage)
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiveraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = GOOGLE_ULONGLONG(0);
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiveraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatMessage& ChatMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatMessage();
  return *internal_default_instance();
}


void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!senderaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      senderaccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!receiveraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      receiveraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      content_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      timestamp_.UnsafeMutablePointer()->clear();
    }
  }
  messageid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string senderAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->senderaccount().data(), static_cast<int>(this->senderaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatMessage.senderAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string receiverAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiveraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiveraccount().data(), static_cast<int>(this->receiveraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatMessage.receiverAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatMessage.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatMessage.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 messageID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string senderAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderaccount().data(), static_cast<int>(this->senderaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.senderAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->senderaccount(), output);
  }

  // required string receiverAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiveraccount().data(), static_cast<int>(this->receiveraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.receiverAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->receiveraccount(), output);
  }

  // required string content = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // required string timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->timestamp(), output);
  }

  // optional uint64 messageID = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->messageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string senderAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderaccount().data(), static_cast<int>(this->senderaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.senderAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->senderaccount(), target);
  }

  // required string receiverAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiveraccount().data(), static_cast<int>(this->receiveraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.receiverAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->receiveraccount(), target);
  }

  // required string content = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // required string timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }

  // optional uint64 messageID = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->messageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatMessage)
  return target;
}

size_t ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_senderaccount()) {
    // required string senderAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->senderaccount());
  }

  if (has_receiveraccount()) {
    // required string receiverAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiveraccount());
  }

  if (has_content()) {
    // required string content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  if (has_timestamp()) {
    // required string timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  return total_size;
}
size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string senderAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->senderaccount());

    // required string receiverAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiveraccount());

    // required string content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());

    // required string timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 messageID = 6;
  if (has_messageid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_senderaccount();
      senderaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderaccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_receiveraccount();
      receiveraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiveraccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (cached_has_bits & 0x00000020u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  senderaccount_.Swap(&other->senderaccount_);
  receiveraccount_.Swap(&other->receiveraccount_);
  content_.Swap(&other->content_);
  timestamp_.Swap(&other->timestamp_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationMessage::kTypeFieldNumber;
const int NotificationMessage::kMessageIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationMessage::NotificationMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsNotificationMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.NotificationMessage)
}
NotificationMessage::NotificationMessage(const NotificationMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&messageid_, &from.messageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&messageid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.NotificationMessage)
}

void NotificationMessage::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
}

NotificationMessage::~NotificationMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.NotificationMessage)
  SharedDtor();
}

void NotificationMessage::SharedDtor() {
}

void NotificationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotificationMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationMessage& NotificationMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsNotificationMessage();
  return *internal_default_instance();
}


void NotificationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.NotificationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    messageid_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NotificationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.NotificationMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kakaIM.Node.NotificationMessage.NotificationMessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::NotificationMessage_NotificationMessageType_IsValid(value)) {
            set_type(static_cast< ::kakaIM::Node::NotificationMessage_NotificationMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 messageID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.NotificationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.NotificationMessage)
  return false;
#undef DO_
}

void NotificationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.NotificationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .kakaIM.Node.NotificationMessage.NotificationMessageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 messageID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->messageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.NotificationMessage)
}

::google::protobuf::uint8* NotificationMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.NotificationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .kakaIM.Node.NotificationMessage.NotificationMessageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 messageID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->messageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.NotificationMessage)
  return target;
}

size_t NotificationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.NotificationMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .kakaIM.Node.NotificationMessage.NotificationMessageType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional uint64 messageID = 2;
  if (has_messageid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.NotificationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.NotificationMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.NotificationMessage)
    MergeFrom(*source);
  }
}

void NotificationMessage::MergeFrom(const NotificationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.NotificationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      messageid_ = from.messageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotificationMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.NotificationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationMessage::CopyFrom(const NotificationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.NotificationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void NotificationMessage::Swap(NotificationMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationMessage::InternalSwap(NotificationMessage* other) {
  using std::swap;
  swap(messageid_, other->messageid_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotificationMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PullChatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullChatMessage::kSessionIDFieldNumber;
const int PullChatMessage::kMessageIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullChatMessage::PullChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsPullChatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.PullChatMessage)
}
PullChatMessage::PullChatMessage(const PullChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  messageid_ = from.messageid_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.PullChatMessage)
}

void PullChatMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = GOOGLE_ULONGLONG(0);
}

PullChatMessage::~PullChatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.PullChatMessage)
  SharedDtor();
}

void PullChatMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PullChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullChatMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PullChatMessage& PullChatMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsPullChatMessage();
  return *internal_default_instance();
}


void PullChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.PullChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    sessionid_.UnsafeMutablePointer()->clear();
  }
  messageid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PullChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.PullChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.PullChatMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 messageID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.PullChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.PullChatMessage)
  return false;
#undef DO_
}

void PullChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.PullChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.PullChatMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required uint64 messageID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->messageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.PullChatMessage)
}

::google::protobuf::uint8* PullChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.PullChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.PullChatMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required uint64 messageID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->messageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.PullChatMessage)
  return target;
}

size_t PullChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.PullChatMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_messageid()) {
    // required uint64 messageID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());
  }

  return total_size;
}
size_t PullChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.PullChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required uint64 messageID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.PullChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PullChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.PullChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.PullChatMessage)
    MergeFrom(*source);
  }
}

void PullChatMessage::MergeFrom(const PullChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.PullChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PullChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.PullChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullChatMessage::CopyFrom(const PullChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.PullChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PullChatMessage::Swap(PullChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullChatMessage::InternalSwap(PullChatMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullChatMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchUserVCardMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchUserVCardMessage::kSessionIDFieldNumber;
const int FetchUserVCardMessage::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchUserVCardMessage::FetchUserVCardMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchUserVCardMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchUserVCardMessage)
}
FetchUserVCardMessage::FetchUserVCardMessage(const FetchUserVCardMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchUserVCardMessage)
}

void FetchUserVCardMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchUserVCardMessage::~FetchUserVCardMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchUserVCardMessage)
  SharedDtor();
}

void FetchUserVCardMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchUserVCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchUserVCardMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchUserVCardMessage& FetchUserVCardMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchUserVCardMessage();
  return *internal_default_instance();
}


void FetchUserVCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchUserVCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      userid_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchUserVCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchUserVCardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchUserVCardMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchUserVCardMessage.userID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchUserVCardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchUserVCardMessage)
  return false;
#undef DO_
}

void FetchUserVCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchUserVCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchUserVCardMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchUserVCardMessage.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchUserVCardMessage)
}

::google::protobuf::uint8* FetchUserVCardMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchUserVCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchUserVCardMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchUserVCardMessage.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchUserVCardMessage)
  return target;
}

size_t FetchUserVCardMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.FetchUserVCardMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_userid()) {
    // required string userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  return total_size;
}
size_t FetchUserVCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchUserVCardMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchUserVCardMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchUserVCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchUserVCardMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchUserVCardMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchUserVCardMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchUserVCardMessage)
    MergeFrom(*source);
  }
}

void FetchUserVCardMessage::MergeFrom(const FetchUserVCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchUserVCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
}

void FetchUserVCardMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchUserVCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchUserVCardMessage::CopyFrom(const FetchUserVCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchUserVCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchUserVCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FetchUserVCardMessage::Swap(FetchUserVCardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchUserVCardMessage::InternalSwap(FetchUserVCardMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  userid_.Swap(&other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchUserVCardMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserVCardResponseMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserVCardResponseMessage::kSessionIDFieldNumber;
const int UserVCardResponseMessage::kUserIDFieldNumber;
const int UserVCardResponseMessage::kNicknameFieldNumber;
const int UserVCardResponseMessage::kGenderFieldNumber;
const int UserVCardResponseMessage::kMoodFieldNumber;
const int UserVCardResponseMessage::kAvatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserVCardResponseMessage::UserVCardResponseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsUserVCardResponseMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.UserVCardResponseMessage)
}
UserVCardResponseMessage::UserVCardResponseMessage(const UserVCardResponseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  mood_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mood()) {
    mood_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mood_);
  }
  avator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avator()) {
    avator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avator_);
  }
  gender_ = from.gender_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.UserVCardResponseMessage)
}

void UserVCardResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mood_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 1;
}

UserVCardResponseMessage::~UserVCardResponseMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.UserVCardResponseMessage)
  SharedDtor();
}

void UserVCardResponseMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mood_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserVCardResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserVCardResponseMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserVCardResponseMessage& UserVCardResponseMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsUserVCardResponseMessage();
  return *internal_default_instance();
}


void UserVCardResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.UserVCardResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      userid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      nickname_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!mood_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      mood_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!avator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      avator_.UnsafeMutablePointer()->clear();
    }
    gender_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserVCardResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.UserVCardResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UserVCardResponseMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UserVCardResponseMessage.userID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UserVCardResponseMessage.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.UserGenderType gender = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::UserGenderType_IsValid(value)) {
            set_gender(static_cast< ::kakaIM::Node::UserGenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mood = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mood()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mood().data(), static_cast<int>(this->mood().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UserVCardResponseMessage.mood");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avator = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.UserVCardResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.UserVCardResponseMessage)
  return false;
#undef DO_
}

void UserVCardResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.UserVCardResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // required string nickname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // required .kakaIM.Node.UserGenderType gender = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }

  // optional string mood = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), static_cast<int>(this->mood().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.mood");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mood(), output);
  }

  // optional bytes avator = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->avator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.UserVCardResponseMessage)
}

::google::protobuf::uint8* UserVCardResponseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.UserVCardResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string nickname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // required .kakaIM.Node.UserGenderType gender = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gender(), target);
  }

  // optional string mood = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), static_cast<int>(this->mood().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UserVCardResponseMessage.mood");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mood(), target);
  }

  // optional bytes avator = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->avator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.UserVCardResponseMessage)
  return target;
}

size_t UserVCardResponseMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.UserVCardResponseMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_userid()) {
    // required string userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_nickname()) {
    // required string nickname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_gender()) {
    // required .kakaIM.Node.UserGenderType gender = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
  }

  return total_size;
}
size_t UserVCardResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.UserVCardResponseMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string nickname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required .kakaIM.Node.UserGenderType gender = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string mood = 5;
    if (has_mood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mood());
    }

    // optional bytes avator = 6;
    if (has_avator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avator());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserVCardResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.UserVCardResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserVCardResponseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserVCardResponseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.UserVCardResponseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.UserVCardResponseMessage)
    MergeFrom(*source);
  }
}

void UserVCardResponseMessage::MergeFrom(const UserVCardResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.UserVCardResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mood();
      mood_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mood_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_avator();
      avator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avator_);
    }
    if (cached_has_bits & 0x00000020u) {
      gender_ = from.gender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserVCardResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.UserVCardResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserVCardResponseMessage::CopyFrom(const UserVCardResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.UserVCardResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserVCardResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  return true;
}

void UserVCardResponseMessage::Swap(UserVCardResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserVCardResponseMessage::InternalSwap(UserVCardResponseMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  userid_.Swap(&other->userid_);
  nickname_.Swap(&other->nickname_);
  mood_.Swap(&other->mood_);
  avator_.Swap(&other->avator_);
  swap(gender_, other->gender_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserVCardResponseMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateUserVCardMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateUserVCardMessage::kSessionIDFieldNumber;
const int UpdateUserVCardMessage::kNicknameFieldNumber;
const int UpdateUserVCardMessage::kGenderFieldNumber;
const int UpdateUserVCardMessage::kMoodFieldNumber;
const int UpdateUserVCardMessage::kAvatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateUserVCardMessage::UpdateUserVCardMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateUserVCardMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.UpdateUserVCardMessage)
}
UpdateUserVCardMessage::UpdateUserVCardMessage(const UpdateUserVCardMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  mood_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mood()) {
    mood_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mood_);
  }
  avator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avator()) {
    avator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avator_);
  }
  gender_ = from.gender_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.UpdateUserVCardMessage)
}

void UpdateUserVCardMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mood_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 1;
}

UpdateUserVCardMessage::~UpdateUserVCardMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.UpdateUserVCardMessage)
  SharedDtor();
}

void UpdateUserVCardMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mood_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateUserVCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserVCardMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateUserVCardMessage& UpdateUserVCardMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateUserVCardMessage();
  return *internal_default_instance();
}


void UpdateUserVCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.UpdateUserVCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      nickname_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!mood_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      mood_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!avator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      avator_.UnsafeMutablePointer()->clear();
    }
    gender_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateUserVCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.UpdateUserVCardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateUserVCardMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateUserVCardMessage.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.Node.UserGenderType gender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::UserGenderType_IsValid(value)) {
            set_gender(static_cast< ::kakaIM::Node::UserGenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mood = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mood()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mood().data(), static_cast<int>(this->mood().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateUserVCardMessage.mood");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.UpdateUserVCardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.UpdateUserVCardMessage)
  return false;
#undef DO_
}

void UpdateUserVCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.UpdateUserVCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessage.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional .kakaIM.Node.UserGenderType gender = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gender(), output);
  }

  // optional string mood = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), static_cast<int>(this->mood().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessage.mood");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mood(), output);
  }

  // optional bytes avator = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->avator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.UpdateUserVCardMessage)
}

::google::protobuf::uint8* UpdateUserVCardMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.UpdateUserVCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessage.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional .kakaIM.Node.UserGenderType gender = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gender(), target);
  }

  // optional string mood = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mood().data(), static_cast<int>(this->mood().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessage.mood");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mood(), target);
  }

  // optional bytes avator = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.UpdateUserVCardMessage)
  return target;
}

size_t UpdateUserVCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.UpdateUserVCardMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string mood = 4;
    if (has_mood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mood());
    }

    // optional bytes avator = 5;
    if (has_avator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avator());
    }

    // optional .kakaIM.Node.UserGenderType gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserVCardMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.UpdateUserVCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserVCardMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateUserVCardMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.UpdateUserVCardMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.UpdateUserVCardMessage)
    MergeFrom(*source);
  }
}

void UpdateUserVCardMessage::MergeFrom(const UpdateUserVCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.UpdateUserVCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mood();
      mood_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mood_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_avator();
      avator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avator_);
    }
    if (cached_has_bits & 0x00000010u) {
      gender_ = from.gender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateUserVCardMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.UpdateUserVCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserVCardMessage::CopyFrom(const UpdateUserVCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.UpdateUserVCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserVCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UpdateUserVCardMessage::Swap(UpdateUserVCardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateUserVCardMessage::InternalSwap(UpdateUserVCardMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  nickname_.Swap(&other->nickname_);
  mood_.Swap(&other->mood_);
  avator_.Swap(&other->avator_);
  swap(gender_, other->gender_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateUserVCardMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateUserVCardMessageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateUserVCardMessageResponse::kSessionIDFieldNumber;
const int UpdateUserVCardMessageResponse::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateUserVCardMessageResponse::UpdateUserVCardMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateUserVCardMessageResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.UpdateUserVCardMessageResponse)
}
UpdateUserVCardMessageResponse::UpdateUserVCardMessageResponse(const UpdateUserVCardMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.UpdateUserVCardMessageResponse)
}

void UpdateUserVCardMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 1;
}

UpdateUserVCardMessageResponse::~UpdateUserVCardMessageResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.UpdateUserVCardMessageResponse)
  SharedDtor();
}

void UpdateUserVCardMessageResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateUserVCardMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserVCardMessageResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateUserVCardMessageResponse& UpdateUserVCardMessageResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateUserVCardMessageResponse();
  return *internal_default_instance();
}


void UpdateUserVCardMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateUserVCardMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateUserVCardMessageResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType_IsValid(value)) {
            set_state(static_cast< ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.UpdateUserVCardMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.UpdateUserVCardMessageResponse)
  return false;
#undef DO_
}

void UpdateUserVCardMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessageResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.UpdateUserVCardMessageResponse)
}

::google::protobuf::uint8* UpdateUserVCardMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateUserVCardMessageResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.UpdateUserVCardMessageResponse)
  return target;
}

size_t UpdateUserVCardMessageResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_state()) {
    // required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t UpdateUserVCardMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserVCardMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserVCardMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateUserVCardMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.UpdateUserVCardMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.UpdateUserVCardMessageResponse)
    MergeFrom(*source);
  }
}

void UpdateUserVCardMessageResponse::MergeFrom(const UpdateUserVCardMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateUserVCardMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserVCardMessageResponse::CopyFrom(const UpdateUserVCardMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.UpdateUserVCardMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserVCardMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UpdateUserVCardMessageResponse::Swap(UpdateUserVCardMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateUserVCardMessageResponse::InternalSwap(UpdateUserVCardMessageResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateUserVCardMessageResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupCreateRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupCreateRequest::kSessionIDFieldNumber;
const int ChatGroupCreateRequest::kGroupNameFieldNumber;
const int ChatGroupCreateRequest::kGroupDescrptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupCreateRequest::ChatGroupCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupCreateRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupCreateRequest)
}
ChatGroupCreateRequest::ChatGroupCreateRequest(const ChatGroupCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupdescrption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupdescrption()) {
    groupdescrption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupdescrption_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupCreateRequest)
}

void ChatGroupCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupdescrption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatGroupCreateRequest::~ChatGroupCreateRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupCreateRequest)
  SharedDtor();
}

void ChatGroupCreateRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupdescrption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupCreateRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupCreateRequest& ChatGroupCreateRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupCreateRequest();
  return *internal_default_instance();
}


void ChatGroupCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupname_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!groupdescrption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupdescrption_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupCreateRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupCreateRequest.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupDescrption = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupdescrption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupCreateRequest.groupDescrption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupCreateRequest)
  return false;
#undef DO_
}

void ChatGroupCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateRequest.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // required string groupDescrption = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateRequest.groupDescrption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupdescrption(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupCreateRequest)
}

::google::protobuf::uint8* ChatGroupCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateRequest.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // required string groupDescrption = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateRequest.groupDescrption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupdescrption(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupCreateRequest)
  return target;
}

size_t ChatGroupCreateRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupCreateRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupname()) {
    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_groupdescrption()) {
    // required string groupDescrption = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupdescrption());
  }

  return total_size;
}
size_t ChatGroupCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required string groupDescrption = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupdescrption());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupCreateRequest)
    MergeFrom(*source);
  }
}

void ChatGroupCreateRequest::MergeFrom(const ChatGroupCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupdescrption();
      groupdescrption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupdescrption_);
    }
  }
}

void ChatGroupCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupCreateRequest::CopyFrom(const ChatGroupCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupCreateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ChatGroupCreateRequest::Swap(ChatGroupCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupCreateRequest::InternalSwap(ChatGroupCreateRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupname_.Swap(&other->groupname_);
  groupdescrption_.Swap(&other->groupdescrption_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupCreateRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupCreateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupCreateResponse::kSessionIDFieldNumber;
const int ChatGroupCreateResponse::kResultFieldNumber;
const int ChatGroupCreateResponse::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupCreateResponse::ChatGroupCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupCreateResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupCreateResponse)
}
ChatGroupCreateResponse::ChatGroupCreateResponse(const ChatGroupCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupCreateResponse)
}

void ChatGroupCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
}

ChatGroupCreateResponse::~ChatGroupCreateResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupCreateResponse)
  SharedDtor();
}

void ChatGroupCreateResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupCreateResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupCreateResponse& ChatGroupCreateResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupCreateResponse();
  return *internal_default_instance();
}


void ChatGroupCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupCreateResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupCreateResponse.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupCreateResponse)
  return false;
#undef DO_
}

void ChatGroupCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string groupId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateResponse.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupCreateResponse)
}

::google::protobuf::uint8* ChatGroupCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string groupId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupCreateResponse.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupCreateResponse)
  return target;
}

size_t ChatGroupCreateResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupCreateResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_result()) {
    // required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t ChatGroupCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string groupId = 3;
  if (has_groupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupCreateResponse)
    MergeFrom(*source);
  }
}

void ChatGroupCreateResponse::MergeFrom(const ChatGroupCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatGroupCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupCreateResponse::CopyFrom(const ChatGroupCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupCreateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void ChatGroupCreateResponse::Swap(ChatGroupCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupCreateResponse::InternalSwap(ChatGroupCreateResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupCreateResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupDisbandRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupDisbandRequest::kSessionIDFieldNumber;
const int ChatGroupDisbandRequest::kGroupIdFieldNumber;
const int ChatGroupDisbandRequest::kOperatorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupDisbandRequest::ChatGroupDisbandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupDisbandRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupDisbandRequest)
}
ChatGroupDisbandRequest::ChatGroupDisbandRequest(const ChatGroupDisbandRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operatorid()) {
    operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupDisbandRequest)
}

void ChatGroupDisbandRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatGroupDisbandRequest::~ChatGroupDisbandRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupDisbandRequest)
  SharedDtor();
}

void ChatGroupDisbandRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupDisbandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupDisbandRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupDisbandRequest& ChatGroupDisbandRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupDisbandRequest();
  return *internal_default_instance();
}


void ChatGroupDisbandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupDisbandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!operatorid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operatorid_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupDisbandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupDisbandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupDisbandRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupDisbandRequest.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string operatorId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operatorid().data(), static_cast<int>(this->operatorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupDisbandRequest.operatorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupDisbandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupDisbandRequest)
  return false;
#undef DO_
}

void ChatGroupDisbandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupDisbandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandRequest.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required string operatorId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandRequest.operatorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operatorid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupDisbandRequest)
}

::google::protobuf::uint8* ChatGroupDisbandRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupDisbandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandRequest.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required string operatorId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandRequest.operatorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operatorid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupDisbandRequest)
  return target;
}

size_t ChatGroupDisbandRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupDisbandRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_operatorid()) {
    // required string operatorId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operatorid());
  }

  return total_size;
}
size_t ChatGroupDisbandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupDisbandRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string operatorId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operatorid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupDisbandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupDisbandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupDisbandRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupDisbandRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupDisbandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupDisbandRequest)
    MergeFrom(*source);
  }
}

void ChatGroupDisbandRequest::MergeFrom(const ChatGroupDisbandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupDisbandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_operatorid();
      operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
    }
  }
}

void ChatGroupDisbandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupDisbandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupDisbandRequest::CopyFrom(const ChatGroupDisbandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupDisbandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupDisbandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ChatGroupDisbandRequest::Swap(ChatGroupDisbandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupDisbandRequest::InternalSwap(ChatGroupDisbandRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  operatorid_.Swap(&other->operatorid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupDisbandRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupDisbandResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupDisbandResponse::kSessionIDFieldNumber;
const int ChatGroupDisbandResponse::kOperatorIdFieldNumber;
const int ChatGroupDisbandResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupDisbandResponse::ChatGroupDisbandResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupDisbandResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupDisbandResponse)
}
ChatGroupDisbandResponse::ChatGroupDisbandResponse(const ChatGroupDisbandResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operatorid()) {
    operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupDisbandResponse)
}

void ChatGroupDisbandResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
}

ChatGroupDisbandResponse::~ChatGroupDisbandResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupDisbandResponse)
  SharedDtor();
}

void ChatGroupDisbandResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupDisbandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupDisbandResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupDisbandResponse& ChatGroupDisbandResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupDisbandResponse();
  return *internal_default_instance();
}


void ChatGroupDisbandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupDisbandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!operatorid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operatorid_.UnsafeMutablePointer()->clear();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupDisbandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupDisbandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupDisbandResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string operatorId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operatorid().data(), static_cast<int>(this->operatorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupDisbandResponse.operatorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupDisbandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupDisbandResponse)
  return false;
#undef DO_
}

void ChatGroupDisbandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupDisbandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string operatorId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandResponse.operatorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operatorid(), output);
  }

  // required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupDisbandResponse)
}

::google::protobuf::uint8* ChatGroupDisbandResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupDisbandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string operatorId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupDisbandResponse.operatorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operatorid(), target);
  }

  // required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupDisbandResponse)
  return target;
}

size_t ChatGroupDisbandResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupDisbandResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_operatorid()) {
    // required string operatorId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operatorid());
  }

  if (has_result()) {
    // required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t ChatGroupDisbandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupDisbandResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string operatorId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operatorid());

    // required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupDisbandResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupDisbandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupDisbandResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupDisbandResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupDisbandResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupDisbandResponse)
    MergeFrom(*source);
  }
}

void ChatGroupDisbandResponse::MergeFrom(const ChatGroupDisbandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupDisbandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_operatorid();
      operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatGroupDisbandResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupDisbandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupDisbandResponse::CopyFrom(const ChatGroupDisbandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupDisbandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupDisbandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ChatGroupDisbandResponse::Swap(ChatGroupDisbandResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupDisbandResponse::InternalSwap(ChatGroupDisbandResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  operatorid_.Swap(&other->operatorid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupDisbandResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupJoinRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupJoinRequest::kSessionIDFieldNumber;
const int ChatGroupJoinRequest::kGroupIdFieldNumber;
const int ChatGroupJoinRequest::kUserAccountFieldNumber;
const int ChatGroupJoinRequest::kOperatorIdFieldNumber;
const int ChatGroupJoinRequest::kIntroductionFieldNumber;
const int ChatGroupJoinRequest::kApplicantIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupJoinRequest::ChatGroupJoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupJoinRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupJoinRequest)
}
ChatGroupJoinRequest::ChatGroupJoinRequest(const ChatGroupJoinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operatorid()) {
    operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
  }
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_introduction()) {
    introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
  }
  applicant_id_ = from.applicant_id_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupJoinRequest)
}

void ChatGroupJoinRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = GOOGLE_ULONGLONG(0);
}

ChatGroupJoinRequest::~ChatGroupJoinRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupJoinRequest)
  SharedDtor();
}

void ChatGroupJoinRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupJoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupJoinRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupJoinRequest& ChatGroupJoinRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupJoinRequest();
  return *internal_default_instance();
}


void ChatGroupJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupJoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!operatorid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operatorid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!introduction_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      introduction_.UnsafeMutablePointer()->clear();
    }
  }
  applicant_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupJoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinRequest.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinRequest.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operatorId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operatorid().data(), static_cast<int>(this->operatorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinRequest.operatorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string introduction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->introduction().data(), static_cast<int>(this->introduction().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinRequest.introduction");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 applicant_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_applicant_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applicant_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupJoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupJoinRequest)
  return false;
#undef DO_
}

void ChatGroupJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupJoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required string userAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->useraccount(), output);
  }

  // optional string operatorId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.operatorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->operatorid(), output);
  }

  // optional string introduction = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), static_cast<int>(this->introduction().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.introduction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->introduction(), output);
  }

  // optional uint64 applicant_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->applicant_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupJoinRequest)
}

::google::protobuf::uint8* ChatGroupJoinRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupJoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required string userAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useraccount(), target);
  }

  // optional string operatorId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.operatorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->operatorid(), target);
  }

  // optional string introduction = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), static_cast<int>(this->introduction().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinRequest.introduction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->introduction(), target);
  }

  // optional uint64 applicant_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->applicant_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupJoinRequest)
  return target;
}

size_t ChatGroupJoinRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupJoinRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_useraccount()) {
    // required string userAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  return total_size;
}
size_t ChatGroupJoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupJoinRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string userAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional string operatorId = 4;
    if (has_operatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operatorid());
    }

    // optional string introduction = 5;
    if (has_introduction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->introduction());
    }

    // optional uint64 applicant_id = 6;
    if (has_applicant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applicant_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupJoinRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupJoinRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupJoinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupJoinRequest)
    MergeFrom(*source);
  }
}

void ChatGroupJoinRequest::MergeFrom(const ChatGroupJoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_operatorid();
      operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_introduction();
      introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
    }
    if (cached_has_bits & 0x00000020u) {
      applicant_id_ = from.applicant_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatGroupJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupJoinRequest::CopyFrom(const ChatGroupJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupJoinRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ChatGroupJoinRequest::Swap(ChatGroupJoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupJoinRequest::InternalSwap(ChatGroupJoinRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  useraccount_.Swap(&other->useraccount_);
  operatorid_.Swap(&other->operatorid_);
  introduction_.Swap(&other->introduction_);
  swap(applicant_id_, other->applicant_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupJoinRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupJoinResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupJoinResponse::kSessionIDFieldNumber;
const int ChatGroupJoinResponse::kGroupIdFieldNumber;
const int ChatGroupJoinResponse::kUserAccountFieldNumber;
const int ChatGroupJoinResponse::kResultFieldNumber;
const int ChatGroupJoinResponse::kApplicantIdFieldNumber;
const int ChatGroupJoinResponse::kOperatorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupJoinResponse::ChatGroupJoinResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupJoinResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupJoinResponse)
}
ChatGroupJoinResponse::ChatGroupJoinResponse(const ChatGroupJoinResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operatorid()) {
    operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
  }
  ::memcpy(&applicant_id_, &from.applicant_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&applicant_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupJoinResponse)
}

void ChatGroupJoinResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicant_id_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
}

ChatGroupJoinResponse::~ChatGroupJoinResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupJoinResponse)
  SharedDtor();
}

void ChatGroupJoinResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupJoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupJoinResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupJoinResponse& ChatGroupJoinResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupJoinResponse();
  return *internal_default_instance();
}


void ChatGroupJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!operatorid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operatorid_.UnsafeMutablePointer()->clear();
    }
  }
  if (cached_has_bits & 48u) {
    applicant_id_ = GOOGLE_ULONGLONG(0);
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupJoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinResponse.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinResponse.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 applicant_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_applicant_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applicant_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operatorId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operatorid().data(), static_cast<int>(this->operatorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupJoinResponse.operatorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupJoinResponse)
  return false;
#undef DO_
}

void ChatGroupJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required string userAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->useraccount(), output);
  }

  // required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional uint64 applicant_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->applicant_id(), output);
  }

  // optional string operatorId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.operatorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->operatorid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupJoinResponse)
}

::google::protobuf::uint8* ChatGroupJoinResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required string userAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useraccount(), target);
  }

  // required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional uint64 applicant_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->applicant_id(), target);
  }

  // optional string operatorId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupJoinResponse.operatorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->operatorid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupJoinResponse)
  return target;
}

size_t ChatGroupJoinResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupJoinResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_useraccount()) {
    // required string userAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_result()) {
    // required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t ChatGroupJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupJoinResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string userAccount = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string operatorId = 6;
    if (has_operatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operatorid());
    }

    // optional uint64 applicant_id = 5;
    if (has_applicant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applicant_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupJoinResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupJoinResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupJoinResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupJoinResponse)
    MergeFrom(*source);
  }
}

void ChatGroupJoinResponse::MergeFrom(const ChatGroupJoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_operatorid();
      operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
    }
    if (cached_has_bits & 0x00000010u) {
      applicant_id_ = from.applicant_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatGroupJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupJoinResponse::CopyFrom(const ChatGroupJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupJoinResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  return true;
}

void ChatGroupJoinResponse::Swap(ChatGroupJoinResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupJoinResponse::InternalSwap(ChatGroupJoinResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  useraccount_.Swap(&other->useraccount_);
  operatorid_.Swap(&other->operatorid_);
  swap(applicant_id_, other->applicant_id_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupJoinResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupQuitRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupQuitRequest::kSessionIDFieldNumber;
const int ChatGroupQuitRequest::kUserAccountFieldNumber;
const int ChatGroupQuitRequest::kGroupIdFieldNumber;
const int ChatGroupQuitRequest::kOperatorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupQuitRequest::ChatGroupQuitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupQuitRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupQuitRequest)
}
ChatGroupQuitRequest::ChatGroupQuitRequest(const ChatGroupQuitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operatorid()) {
    operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupQuitRequest)
}

void ChatGroupQuitRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatGroupQuitRequest::~ChatGroupQuitRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupQuitRequest)
  SharedDtor();
}

void ChatGroupQuitRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupQuitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupQuitRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupQuitRequest& ChatGroupQuitRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupQuitRequest();
  return *internal_default_instance();
}


void ChatGroupQuitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupQuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!operatorid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operatorid_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupQuitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupQuitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitRequest.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitRequest.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operatorId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operatorid().data(), static_cast<int>(this->operatorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitRequest.operatorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupQuitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupQuitRequest)
  return false;
#undef DO_
}

void ChatGroupQuitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupQuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->useraccount(), output);
  }

  // required string groupId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupid(), output);
  }

  // optional string operatorId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.operatorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->operatorid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupQuitRequest)
}

::google::protobuf::uint8* ChatGroupQuitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupQuitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->useraccount(), target);
  }

  // required string groupId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupid(), target);
  }

  // optional string operatorId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitRequest.operatorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->operatorid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupQuitRequest)
  return target;
}

size_t ChatGroupQuitRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupQuitRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_useraccount()) {
    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_groupid()) {
    // required string groupId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  return total_size;
}
size_t ChatGroupQuitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupQuitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required string groupId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string operatorId = 4;
  if (has_operatorid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operatorid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupQuitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupQuitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupQuitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupQuitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupQuitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupQuitRequest)
    MergeFrom(*source);
  }
}

void ChatGroupQuitRequest::MergeFrom(const ChatGroupQuitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupQuitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_operatorid();
      operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
    }
  }
}

void ChatGroupQuitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupQuitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupQuitRequest::CopyFrom(const ChatGroupQuitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupQuitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupQuitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ChatGroupQuitRequest::Swap(ChatGroupQuitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupQuitRequest::InternalSwap(ChatGroupQuitRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  useraccount_.Swap(&other->useraccount_);
  groupid_.Swap(&other->groupid_);
  operatorid_.Swap(&other->operatorid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupQuitRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatGroupQuitResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatGroupQuitResponse::kSessionIDFieldNumber;
const int ChatGroupQuitResponse::kUserAccountFieldNumber;
const int ChatGroupQuitResponse::kGroupIdFieldNumber;
const int ChatGroupQuitResponse::kResultFieldNumber;
const int ChatGroupQuitResponse::kOperatorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatGroupQuitResponse::ChatGroupQuitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupQuitResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.ChatGroupQuitResponse)
}
ChatGroupQuitResponse::ChatGroupQuitResponse(const ChatGroupQuitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operatorid()) {
    operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.ChatGroupQuitResponse)
}

void ChatGroupQuitResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
}

ChatGroupQuitResponse::~ChatGroupQuitResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.ChatGroupQuitResponse)
  SharedDtor();
}

void ChatGroupQuitResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatGroupQuitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatGroupQuitResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatGroupQuitResponse& ChatGroupQuitResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupQuitResponse();
  return *internal_default_instance();
}


void ChatGroupQuitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.ChatGroupQuitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!operatorid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operatorid_.UnsafeMutablePointer()->clear();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatGroupQuitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.ChatGroupQuitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitResponse.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitResponse.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operatorId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operatorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operatorid().data(), static_cast<int>(this->operatorid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.ChatGroupQuitResponse.operatorId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.ChatGroupQuitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.ChatGroupQuitResponse)
  return false;
#undef DO_
}

void ChatGroupQuitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.ChatGroupQuitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->useraccount(), output);
  }

  // required string groupId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupid(), output);
  }

  // required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional string operatorId = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.operatorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->operatorid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.ChatGroupQuitResponse)
}

::google::protobuf::uint8* ChatGroupQuitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.ChatGroupQuitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->useraccount(), target);
  }

  // required string groupId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupid(), target);
  }

  // required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional string operatorId = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operatorid().data(), static_cast<int>(this->operatorid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.ChatGroupQuitResponse.operatorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->operatorid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.ChatGroupQuitResponse)
  return target;
}

size_t ChatGroupQuitResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.ChatGroupQuitResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_useraccount()) {
    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_groupid()) {
    // required string groupId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_result()) {
    // required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t ChatGroupQuitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.ChatGroupQuitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required string groupId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string operatorId = 5;
  if (has_operatorid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operatorid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatGroupQuitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.ChatGroupQuitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatGroupQuitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatGroupQuitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.ChatGroupQuitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.ChatGroupQuitResponse)
    MergeFrom(*source);
  }
}

void ChatGroupQuitResponse::MergeFrom(const ChatGroupQuitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.ChatGroupQuitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_operatorid();
      operatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operatorid_);
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatGroupQuitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.ChatGroupQuitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatGroupQuitResponse::CopyFrom(const ChatGroupQuitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.ChatGroupQuitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatGroupQuitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  return true;
}

void ChatGroupQuitResponse::Swap(ChatGroupQuitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatGroupQuitResponse::InternalSwap(ChatGroupQuitResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  useraccount_.Swap(&other->useraccount_);
  groupid_.Swap(&other->groupid_);
  operatorid_.Swap(&other->operatorid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatGroupQuitResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateChatGroupInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateChatGroupInfoRequest::kSessionIDFieldNumber;
const int UpdateChatGroupInfoRequest::kGroupIdFieldNumber;
const int UpdateChatGroupInfoRequest::kGroupNameFieldNumber;
const int UpdateChatGroupInfoRequest::kGroupDescrptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateChatGroupInfoRequest::UpdateChatGroupInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateChatGroupInfoRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.UpdateChatGroupInfoRequest)
}
UpdateChatGroupInfoRequest::UpdateChatGroupInfoRequest(const UpdateChatGroupInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupdescrption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupdescrption()) {
    groupdescrption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupdescrption_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.UpdateChatGroupInfoRequest)
}

void UpdateChatGroupInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupdescrption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateChatGroupInfoRequest::~UpdateChatGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.UpdateChatGroupInfoRequest)
  SharedDtor();
}

void UpdateChatGroupInfoRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupdescrption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateChatGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatGroupInfoRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateChatGroupInfoRequest& UpdateChatGroupInfoRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateChatGroupInfoRequest();
  return *internal_default_instance();
}


void UpdateChatGroupInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!groupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupname_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!groupdescrption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupdescrption_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateChatGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoRequest.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoRequest.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupDescrption = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupdescrption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.UpdateChatGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.UpdateChatGroupInfoRequest)
  return false;
#undef DO_
}

void UpdateChatGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required string groupName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupname(), output);
  }

  // required string groupDescrption = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->groupdescrption(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.UpdateChatGroupInfoRequest)
}

::google::protobuf::uint8* UpdateChatGroupInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required string groupName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  // required string groupDescrption = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupdescrption(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.UpdateChatGroupInfoRequest)
  return target;
}

size_t UpdateChatGroupInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_groupname()) {
    // required string groupName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_groupdescrption()) {
    // required string groupDescrption = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupdescrption());
  }

  return total_size;
}
size_t UpdateChatGroupInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string groupName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required string groupDescrption = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupdescrption());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChatGroupInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateChatGroupInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.UpdateChatGroupInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.UpdateChatGroupInfoRequest)
    MergeFrom(*source);
  }
}

void UpdateChatGroupInfoRequest::MergeFrom(const UpdateChatGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_groupdescrption();
      groupdescrption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupdescrption_);
    }
  }
}

void UpdateChatGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatGroupInfoRequest::CopyFrom(const UpdateChatGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.UpdateChatGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void UpdateChatGroupInfoRequest::Swap(UpdateChatGroupInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateChatGroupInfoRequest::InternalSwap(UpdateChatGroupInfoRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  groupname_.Swap(&other->groupname_);
  groupdescrption_.Swap(&other->groupdescrption_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateChatGroupInfoRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateChatGroupInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateChatGroupInfoResponse::kSessionIDFieldNumber;
const int UpdateChatGroupInfoResponse::kGroupIdFieldNumber;
const int UpdateChatGroupInfoResponse::kResultFieldNumber;
const int UpdateChatGroupInfoResponse::kOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateChatGroupInfoResponse::UpdateChatGroupInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateChatGroupInfoResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.UpdateChatGroupInfoResponse)
}
UpdateChatGroupInfoResponse::UpdateChatGroupInfoResponse(const UpdateChatGroupInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_operator_()) {
    operator__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operator__);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.UpdateChatGroupInfoResponse)
}

void UpdateChatGroupInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
}

UpdateChatGroupInfoResponse::~UpdateChatGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.UpdateChatGroupInfoResponse)
  SharedDtor();
}

void UpdateChatGroupInfoResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateChatGroupInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChatGroupInfoResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateChatGroupInfoResponse& UpdateChatGroupInfoResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateChatGroupInfoResponse();
  return *internal_default_instance();
}


void UpdateChatGroupInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!operator__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      operator__.UnsafeMutablePointer()->clear();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateChatGroupInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoResponse.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string operator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operator_().data(), static_cast<int>(this->operator_().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.UpdateChatGroupInfoResponse.operator");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.UpdateChatGroupInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.UpdateChatGroupInfoResponse)
  return false;
#undef DO_
}

void UpdateChatGroupInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoResponse.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // optional string operator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operator_().data(), static_cast<int>(this->operator_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoResponse.operator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operator_(), output);
  }

  // required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.UpdateChatGroupInfoResponse)
}

::google::protobuf::uint8* UpdateChatGroupInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoResponse.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // optional string operator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operator_().data(), static_cast<int>(this->operator_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.UpdateChatGroupInfoResponse.operator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operator_(), target);
  }

  // required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.UpdateChatGroupInfoResponse)
  return target;
}

size_t UpdateChatGroupInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_result()) {
    // required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t UpdateChatGroupInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string operator = 3;
  if (has_operator_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChatGroupInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChatGroupInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateChatGroupInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.UpdateChatGroupInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.UpdateChatGroupInfoResponse)
    MergeFrom(*source);
  }
}

void UpdateChatGroupInfoResponse::MergeFrom(const UpdateChatGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_operator_();
      operator__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operator__);
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateChatGroupInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChatGroupInfoResponse::CopyFrom(const UpdateChatGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.UpdateChatGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatGroupInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void UpdateChatGroupInfoResponse::Swap(UpdateChatGroupInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateChatGroupInfoResponse::InternalSwap(UpdateChatGroupInfoResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  operator__.Swap(&other->operator__);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateChatGroupInfoResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupInfoRequest::kSessionIDFieldNumber;
const int FetchChatGroupInfoRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupInfoRequest::FetchChatGroupInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupInfoRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupInfoRequest)
}
FetchChatGroupInfoRequest::FetchChatGroupInfoRequest(const FetchChatGroupInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupInfoRequest)
}

void FetchChatGroupInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchChatGroupInfoRequest::~FetchChatGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupInfoRequest)
  SharedDtor();
}

void FetchChatGroupInfoRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupInfoRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupInfoRequest& FetchChatGroupInfoRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupInfoRequest();
  return *internal_default_instance();
}


void FetchChatGroupInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoRequest.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupInfoRequest)
  return false;
#undef DO_
}

void FetchChatGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoRequest.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupInfoRequest)
}

::google::protobuf::uint8* FetchChatGroupInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoRequest.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupInfoRequest)
  return target;
}

size_t FetchChatGroupInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.FetchChatGroupInfoRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  return total_size;
}
size_t FetchChatGroupInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupInfoRequest)
    MergeFrom(*source);
  }
}

void FetchChatGroupInfoRequest::MergeFrom(const FetchChatGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
  }
}

void FetchChatGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupInfoRequest::CopyFrom(const FetchChatGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FetchChatGroupInfoRequest::Swap(FetchChatGroupInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupInfoRequest::InternalSwap(FetchChatGroupInfoRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupInfoRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupInfoResponse::kSessionIDFieldNumber;
const int FetchChatGroupInfoResponse::kGroupIdFieldNumber;
const int FetchChatGroupInfoResponse::kResultFieldNumber;
const int FetchChatGroupInfoResponse::kGroupNameFieldNumber;
const int FetchChatGroupInfoResponse::kGroupDescrptionFieldNumber;
const int FetchChatGroupInfoResponse::kGroupMasterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupInfoResponse::FetchChatGroupInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupInfoResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupInfoResponse)
}
FetchChatGroupInfoResponse::FetchChatGroupInfoResponse(const FetchChatGroupInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupdescrption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupdescrption()) {
    groupdescrption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupdescrption_);
  }
  groupmaster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupmaster()) {
    groupmaster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupmaster_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupInfoResponse)
}

void FetchChatGroupInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupdescrption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupmaster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
}

FetchChatGroupInfoResponse::~FetchChatGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupInfoResponse)
  SharedDtor();
}

void FetchChatGroupInfoResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupdescrption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupmaster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupInfoResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupInfoResponse& FetchChatGroupInfoResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupInfoResponse();
  return *internal_default_instance();
}


void FetchChatGroupInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!groupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupname_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!groupdescrption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupdescrption_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!groupmaster_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupmaster_.UnsafeMutablePointer()->clear();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoResponse.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoResponse.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupDescrption = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupdescrption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupMaster = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupmaster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupmaster().data(), static_cast<int>(this->groupmaster().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupInfoResponse.groupMaster");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupInfoResponse)
  return false;
#undef DO_
}

void FetchChatGroupInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string groupName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->groupname(), output);
  }

  // optional string groupDescrption = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->groupdescrption(), output);
  }

  // optional string groupMaster = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupmaster().data(), static_cast<int>(this->groupmaster().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupMaster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->groupmaster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupInfoResponse)
}

::google::protobuf::uint8* FetchChatGroupInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string groupName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupname(), target);
  }

  // optional string groupDescrption = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupdescrption().data(), static_cast<int>(this->groupdescrption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->groupdescrption(), target);
  }

  // optional string groupMaster = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupmaster().data(), static_cast<int>(this->groupmaster().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupInfoResponse.groupMaster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->groupmaster(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupInfoResponse)
  return target;
}

size_t FetchChatGroupInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.FetchChatGroupInfoResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_result()) {
    // required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t FetchChatGroupInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional string groupName = 4;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional string groupDescrption = 5;
    if (has_groupdescrption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupdescrption());
    }

    // optional string groupMaster = 6;
    if (has_groupmaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupmaster());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupInfoResponse)
    MergeFrom(*source);
  }
}

void FetchChatGroupInfoResponse::MergeFrom(const FetchChatGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_groupdescrption();
      groupdescrption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupdescrption_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_groupmaster();
      groupmaster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupmaster_);
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FetchChatGroupInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupInfoResponse::CopyFrom(const FetchChatGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  return true;
}

void FetchChatGroupInfoResponse::Swap(FetchChatGroupInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupInfoResponse::InternalSwap(FetchChatGroupInfoResponse* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  groupname_.Swap(&other->groupname_);
  groupdescrption_.Swap(&other->groupdescrption_);
  groupmaster_.Swap(&other->groupmaster_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupInfoResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupMemberListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupMemberListRequest::kSessionIDFieldNumber;
const int FetchChatGroupMemberListRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupMemberListRequest::FetchChatGroupMemberListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupMemberListRequest)
}
FetchChatGroupMemberListRequest::FetchChatGroupMemberListRequest(const FetchChatGroupMemberListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupMemberListRequest)
}

void FetchChatGroupMemberListRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchChatGroupMemberListRequest::~FetchChatGroupMemberListRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupMemberListRequest)
  SharedDtor();
}

void FetchChatGroupMemberListRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupMemberListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupMemberListRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupMemberListRequest& FetchChatGroupMemberListRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListRequest();
  return *internal_default_instance();
}


void FetchChatGroupMemberListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupMemberListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupMemberListRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupMemberListRequest.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupMemberListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupMemberListRequest)
  return false;
#undef DO_
}

void FetchChatGroupMemberListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListRequest.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupMemberListRequest)
}

::google::protobuf::uint8* FetchChatGroupMemberListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListRequest.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupMemberListRequest)
  return target;
}

size_t FetchChatGroupMemberListRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  return total_size;
}
size_t FetchChatGroupMemberListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupMemberListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupMemberListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupMemberListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupMemberListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupMemberListRequest)
    MergeFrom(*source);
  }
}

void FetchChatGroupMemberListRequest::MergeFrom(const FetchChatGroupMemberListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
  }
}

void FetchChatGroupMemberListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupMemberListRequest::CopyFrom(const FetchChatGroupMemberListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupMemberListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupMemberListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FetchChatGroupMemberListRequest::Swap(FetchChatGroupMemberListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupMemberListRequest::InternalSwap(FetchChatGroupMemberListRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupMemberListRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupMemberListResponse_ChatGroupMemberInfo::kUserAccountFieldNumber;
const int FetchChatGroupMemberListResponse_ChatGroupMemberInfo::kGroupNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupMemberListResponse_ChatGroupMemberInfo::FetchChatGroupMemberListResponse_ChatGroupMemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
}
FetchChatGroupMemberListResponse_ChatGroupMemberInfo::FetchChatGroupMemberListResponse_ChatGroupMemberInfo(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  groupnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupnickname()) {
    groupnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupnickname_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchChatGroupMemberListResponse_ChatGroupMemberInfo::~FetchChatGroupMemberListResponse_ChatGroupMemberInfo() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  SharedDtor();
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupMemberListResponse_ChatGroupMemberInfo::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& FetchChatGroupMemberListResponse_ChatGroupMemberInfo::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfo();
  return *internal_default_instance();
}


void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      useraccount_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupnickname_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupMemberListResponse_ChatGroupMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupNickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupnickname().data(), static_cast<int>(this->groupnickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  return false;
#undef DO_
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // optional string groupNickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupnickname().data(), static_cast<int>(this->groupnickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupnickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
}

::google::protobuf::uint8* FetchChatGroupMemberListResponse_ChatGroupMemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // optional string groupNickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupnickname().data(), static_cast<int>(this->groupnickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupnickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  return target;
}

size_t FetchChatGroupMemberListResponse_ChatGroupMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userAccount = 1;
  if (has_useraccount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }
  // optional string groupNickName = 2;
  if (has_groupnickname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupnickname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupMemberListResponse_ChatGroupMemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupMemberListResponse_ChatGroupMemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
    MergeFrom(*source);
  }
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::MergeFrom(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupnickname();
      groupnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupnickname_);
    }
  }
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::CopyFrom(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupMemberListResponse_ChatGroupMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::Swap(FetchChatGroupMemberListResponse_ChatGroupMemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::InternalSwap(FetchChatGroupMemberListResponse_ChatGroupMemberInfo* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  groupnickname_.Swap(&other->groupnickname_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupMemberListResponse_ChatGroupMemberInfo::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupMemberListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupMemberListResponse::kSessionIDFieldNumber;
const int FetchChatGroupMemberListResponse::kGroupIdFieldNumber;
const int FetchChatGroupMemberListResponse::kResultFieldNumber;
const int FetchChatGroupMemberListResponse::kGroupMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupMemberListResponse::FetchChatGroupMemberListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupMemberListResponse)
}
FetchChatGroupMemberListResponse::FetchChatGroupMemberListResponse(const FetchChatGroupMemberListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      groupmember_(from.groupmember_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupMemberListResponse)
}

void FetchChatGroupMemberListResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 1;
}

FetchChatGroupMemberListResponse::~FetchChatGroupMemberListResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupMemberListResponse)
  SharedDtor();
}

void FetchChatGroupMemberListResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupMemberListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupMemberListResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupMemberListResponse& FetchChatGroupMemberListResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponse();
  return *internal_default_instance();
}


void FetchChatGroupMemberListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupmember_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupMemberListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupMemberListResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupMemberListResponse.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo groupMember = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groupmember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupMemberListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupMemberListResponse)
  return false;
#undef DO_
}

void FetchChatGroupMemberListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // repeated .kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo groupMember = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groupmember_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->groupmember(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupMemberListResponse)
}

::google::protobuf::uint8* FetchChatGroupMemberListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupMemberListResponse.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // repeated .kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo groupMember = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groupmember_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->groupmember(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupMemberListResponse)
  return target;
}

size_t FetchChatGroupMemberListResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_result()) {
    // required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t FetchChatGroupMemberListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo groupMember = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->groupmember_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groupmember(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupMemberListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupMemberListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupMemberListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupMemberListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupMemberListResponse)
    MergeFrom(*source);
  }
}

void FetchChatGroupMemberListResponse::MergeFrom(const FetchChatGroupMemberListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupmember_.MergeFrom(from.groupmember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FetchChatGroupMemberListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupMemberListResponse::CopyFrom(const FetchChatGroupMemberListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupMemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupMemberListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groupmember())) return false;
  return true;
}

void FetchChatGroupMemberListResponse::Swap(FetchChatGroupMemberListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupMemberListResponse::InternalSwap(FetchChatGroupMemberListResponse* other) {
  using std::swap;
  CastToBase(&groupmember_)->InternalSwap(CastToBase(&other->groupmember_));
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupMemberListResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupListRequest::kSessionIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupListRequest::FetchChatGroupListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupListRequest)
}
FetchChatGroupListRequest::FetchChatGroupListRequest(const FetchChatGroupListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupListRequest)
}

void FetchChatGroupListRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchChatGroupListRequest::~FetchChatGroupListRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupListRequest)
  SharedDtor();
}

void FetchChatGroupListRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupListRequest::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupListRequest& FetchChatGroupListRequest::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListRequest();
  return *internal_default_instance();
}


void FetchChatGroupListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    sessionid_.UnsafeMutablePointer()->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupListRequest.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupListRequest)
  return false;
#undef DO_
}

void FetchChatGroupListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListRequest.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupListRequest)
}

::google::protobuf::uint8* FetchChatGroupListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListRequest.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupListRequest)
  return target;
}

size_t FetchChatGroupListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupListRequest)
    MergeFrom(*source);
  }
}

void FetchChatGroupListRequest::MergeFrom(const FetchChatGroupListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sessionid()) {
    set_has_sessionid();
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
}

void FetchChatGroupListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupListRequest::CopyFrom(const FetchChatGroupListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FetchChatGroupListRequest::Swap(FetchChatGroupListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupListRequest::InternalSwap(FetchChatGroupListRequest* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupListRequest::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupListResponse_GroupInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupListResponse_GroupInfo::kGroupIdFieldNumber;
const int FetchChatGroupListResponse_GroupInfo::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupListResponse_GroupInfo::FetchChatGroupListResponse_GroupInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponse_GroupInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
}
FetchChatGroupListResponse_GroupInfo::FetchChatGroupListResponse_GroupInfo(const FetchChatGroupListResponse_GroupInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
}

void FetchChatGroupListResponse_GroupInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchChatGroupListResponse_GroupInfo::~FetchChatGroupListResponse_GroupInfo() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  SharedDtor();
}

void FetchChatGroupListResponse_GroupInfo::SharedDtor() {
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupListResponse_GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupListResponse_GroupInfo::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupListResponse_GroupInfo& FetchChatGroupListResponse_GroupInfo::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponse_GroupInfo();
  return *internal_default_instance();
}


void FetchChatGroupListResponse_GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupname_.UnsafeMutablePointer()->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupListResponse_GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  return false;
#undef DO_
}

void FetchChatGroupListResponse_GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string groupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
}

::google::protobuf::uint8* FetchChatGroupListResponse_GroupInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string groupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  return target;
}

size_t FetchChatGroupListResponse_GroupInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  size_t total_size = 0;

  if (has_groupid()) {
    // required string groupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_groupname()) {
    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  return total_size;
}
size_t FetchChatGroupListResponse_GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string groupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupListResponse_GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupListResponse_GroupInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupListResponse_GroupInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
    MergeFrom(*source);
  }
}

void FetchChatGroupListResponse_GroupInfo::MergeFrom(const FetchChatGroupListResponse_GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
  }
}

void FetchChatGroupListResponse_GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupListResponse_GroupInfo::CopyFrom(const FetchChatGroupListResponse_GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupListResponse_GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FetchChatGroupListResponse_GroupInfo::Swap(FetchChatGroupListResponse_GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupListResponse_GroupInfo::InternalSwap(FetchChatGroupListResponse_GroupInfo* other) {
  using std::swap;
  groupid_.Swap(&other->groupid_);
  groupname_.Swap(&other->groupname_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupListResponse_GroupInfo::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FetchChatGroupListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchChatGroupListResponse::kSessionIDFieldNumber;
const int FetchChatGroupListResponse::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchChatGroupListResponse::FetchChatGroupListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.FetchChatGroupListResponse)
}
FetchChatGroupListResponse::FetchChatGroupListResponse(const FetchChatGroupListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      group_(from.group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.FetchChatGroupListResponse)
}

void FetchChatGroupListResponse::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FetchChatGroupListResponse::~FetchChatGroupListResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.FetchChatGroupListResponse)
  SharedDtor();
}

void FetchChatGroupListResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FetchChatGroupListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchChatGroupListResponse::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FetchChatGroupListResponse& FetchChatGroupListResponse::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponse();
  return *internal_default_instance();
}


void FetchChatGroupListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.FetchChatGroupListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    sessionid_.UnsafeMutablePointer()->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchChatGroupListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.FetchChatGroupListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.FetchChatGroupListResponse.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kakaIM.Node.FetchChatGroupListResponse.GroupInfo group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.FetchChatGroupListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.FetchChatGroupListResponse)
  return false;
#undef DO_
}

void FetchChatGroupListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.FetchChatGroupListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListResponse.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // repeated .kakaIM.Node.FetchChatGroupListResponse.GroupInfo group = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->group(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.FetchChatGroupListResponse)
}

::google::protobuf::uint8* FetchChatGroupListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.FetchChatGroupListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.FetchChatGroupListResponse.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // repeated .kakaIM.Node.FetchChatGroupListResponse.GroupInfo group = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->group(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.FetchChatGroupListResponse)
  return target;
}

size_t FetchChatGroupListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.FetchChatGroupListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string sessionID = 1;
  if (has_sessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }
  // repeated .kakaIM.Node.FetchChatGroupListResponse.GroupInfo group = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->group_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->group(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchChatGroupListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.FetchChatGroupListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchChatGroupListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchChatGroupListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.FetchChatGroupListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.FetchChatGroupListResponse)
    MergeFrom(*source);
  }
}

void FetchChatGroupListResponse::MergeFrom(const FetchChatGroupListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.FetchChatGroupListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_.MergeFrom(from.group_);
  if (from.has_sessionid()) {
    set_has_sessionid();
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
}

void FetchChatGroupListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.FetchChatGroupListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchChatGroupListResponse::CopyFrom(const FetchChatGroupListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.FetchChatGroupListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchChatGroupListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->group())) return false;
  return true;
}

void FetchChatGroupListResponse::Swap(FetchChatGroupListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchChatGroupListResponse::InternalSwap(FetchChatGroupListResponse* other) {
  using std::swap;
  CastToBase(&group_)->InternalSwap(CastToBase(&other->group_));
  sessionid_.Swap(&other->sessionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchChatGroupListResponse::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupChatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupChatMessage::kSessionIDFieldNumber;
const int GroupChatMessage::kSenderFieldNumber;
const int GroupChatMessage::kGroupIdFieldNumber;
const int GroupChatMessage::kContentFieldNumber;
const int GroupChatMessage::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupChatMessage::GroupChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsGroupChatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.GroupChatMessage)
}
GroupChatMessage::GroupChatMessage(const GroupChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.GroupChatMessage)
}

void GroupChatMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = GOOGLE_ULONGLONG(0);
}

GroupChatMessage::~GroupChatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.GroupChatMessage)
  SharedDtor();
}

void GroupChatMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupChatMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupChatMessage& GroupChatMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsGroupChatMessage();
  return *internal_default_instance();
}


void GroupChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.GroupChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sender_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sender_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      content_.UnsafeMutablePointer()->clear();
    }
  }
  msgid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.GroupChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.GroupChatMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.GroupChatMessage.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.GroupChatMessage.groupId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.GroupChatMessage.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msgId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.GroupChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.GroupChatMessage)
  return false;
#undef DO_
}

void GroupChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.GroupChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string sender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // required string groupId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupid(), output);
  }

  // required string content = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional uint64 msgId = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->msgid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.GroupChatMessage)
}

::google::protobuf::uint8* GroupChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.GroupChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string sender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // required string groupId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupid(), target);
  }

  // required string content = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.GroupChatMessage.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint64 msgId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->msgid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.GroupChatMessage)
  return target;
}

size_t GroupChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.GroupChatMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_sender()) {
    // required string sender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  if (has_groupid()) {
    // required string groupId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_content()) {
    // required string content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  return total_size;
}
size_t GroupChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.GroupChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string sender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());

    // required string groupId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 msgId = 5;
  if (has_msgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.GroupChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.GroupChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.GroupChatMessage)
    MergeFrom(*source);
  }
}

void GroupChatMessage::MergeFrom(const GroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.GroupChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sender();
      sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000010u) {
      msgid_ = from.msgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.GroupChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupChatMessage::CopyFrom(const GroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.GroupChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void GroupChatMessage::Swap(GroupChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupChatMessage::InternalSwap(GroupChatMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  sender_.Swap(&other->sender_);
  groupid_.Swap(&other->groupid_);
  content_.Swap(&other->content_);
  swap(msgid_, other->msgid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupChatMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PullGroupChatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullGroupChatMessage::kSessionIDFieldNumber;
const int PullGroupChatMessage::kGroupIDFieldNumber;
const int PullGroupChatMessage::kMessageIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullGroupChatMessage::PullGroupChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMMessage_2eproto::InitDefaultsPullGroupChatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.Node.PullGroupChatMessage)
}
PullGroupChatMessage::PullGroupChatMessage(const PullGroupChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionid()) {
    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  messageid_ = from.messageid_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.Node.PullGroupChatMessage)
}

void PullGroupChatMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = GOOGLE_ULONGLONG(0);
}

PullGroupChatMessage::~PullGroupChatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.Node.PullGroupChatMessage)
  SharedDtor();
}

void PullGroupChatMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PullGroupChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullGroupChatMessage::descriptor() {
  ::protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PullGroupChatMessage& PullGroupChatMessage::default_instance() {
  ::protobuf_KakaIMMessage_2eproto::InitDefaultsPullGroupChatMessage();
  return *internal_default_instance();
}


void PullGroupChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.Node.PullGroupChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      sessionid_.UnsafeMutablePointer()->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!groupid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      groupid_.UnsafeMutablePointer()->clear();
    }
  }
  messageid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PullGroupChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.Node.PullGroupChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.PullGroupChatMessage.sessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), static_cast<int>(this->groupid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.Node.PullGroupChatMessage.groupID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 messageID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.Node.PullGroupChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.Node.PullGroupChatMessage)
  return false;
#undef DO_
}

void PullGroupChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.Node.PullGroupChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.PullGroupChatMessage.sessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // required string groupID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.PullGroupChatMessage.groupID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // required uint64 messageID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->messageid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.Node.PullGroupChatMessage)
}

::google::protobuf::uint8* PullGroupChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.Node.PullGroupChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string sessionID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.PullGroupChatMessage.sessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // required string groupID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), static_cast<int>(this->groupid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.Node.PullGroupChatMessage.groupID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // required uint64 messageID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->messageid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.Node.PullGroupChatMessage)
  return target;
}

size_t PullGroupChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.Node.PullGroupChatMessage)
  size_t total_size = 0;

  if (has_sessionid()) {
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  if (has_groupid()) {
    // required string groupID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_messageid()) {
    // required uint64 messageID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());
  }

  return total_size;
}
size_t PullGroupChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.Node.PullGroupChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string sessionID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());

    // required string groupID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required uint64 messageID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullGroupChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.Node.PullGroupChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PullGroupChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullGroupChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.Node.PullGroupChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.Node.PullGroupChatMessage)
    MergeFrom(*source);
  }
}

void PullGroupChatMessage::MergeFrom(const PullGroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.Node.PullGroupChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionid();
      sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000004u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PullGroupChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.Node.PullGroupChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullGroupChatMessage::CopyFrom(const PullGroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.Node.PullGroupChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullGroupChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PullGroupChatMessage::Swap(PullGroupChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullGroupChatMessage::InternalSwap(PullGroupChatMessage* other) {
  using std::swap;
  sessionid_.Swap(&other->sessionid_);
  groupid_.Swap(&other->groupid_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullGroupChatMessage::GetMetadata() const {
  protobuf_KakaIMMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Node
}  // namespace kakaIM
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::RequestSessionIDMessage* Arena::Create< ::kakaIM::Node::RequestSessionIDMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::RequestSessionIDMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ResponseSessionIDMessage* Arena::Create< ::kakaIM::Node::ResponseSessionIDMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ResponseSessionIDMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::LoginMessage* Arena::Create< ::kakaIM::Node::LoginMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::LoginMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ResponseLoginMessage* Arena::Create< ::kakaIM::Node::ResponseLoginMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ResponseLoginMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::RegisterMessage* Arena::Create< ::kakaIM::Node::RegisterMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::RegisterMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ResponseRegisterMessage* Arena::Create< ::kakaIM::Node::ResponseRegisterMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ResponseRegisterMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::HeartBeatMessage* Arena::Create< ::kakaIM::Node::HeartBeatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::HeartBeatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ResponseHeartBeatMessage* Arena::Create< ::kakaIM::Node::ResponseHeartBeatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ResponseHeartBeatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::LogoutMessage* Arena::Create< ::kakaIM::Node::LogoutMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::LogoutMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ResponseLogoutMessage* Arena::Create< ::kakaIM::Node::ResponseLogoutMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ResponseLogoutMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::BuildingRelationshipRequestMessage* Arena::Create< ::kakaIM::Node::BuildingRelationshipRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::BuildingRelationshipRequestMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::BuildingRelationshipAnswerMessage* Arena::Create< ::kakaIM::Node::BuildingRelationshipAnswerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::BuildingRelationshipAnswerMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::DestroyingRelationshipRequestMessage* Arena::Create< ::kakaIM::Node::DestroyingRelationshipRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::DestroyingRelationshipRequestMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::DestoryingRelationshipResponseMessage* Arena::Create< ::kakaIM::Node::DestoryingRelationshipResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::DestoryingRelationshipResponseMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FriendListRequestMessage* Arena::Create< ::kakaIM::Node::FriendListRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FriendListRequestMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FriendListItem* Arena::Create< ::kakaIM::Node::FriendListItem >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FriendListItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FriendListResponseMessage* Arena::Create< ::kakaIM::Node::FriendListResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FriendListResponseMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::OnlineStateMessage* Arena::Create< ::kakaIM::Node::OnlineStateMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::OnlineStateMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatMessage* Arena::Create< ::kakaIM::Node::ChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::NotificationMessage* Arena::Create< ::kakaIM::Node::NotificationMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::NotificationMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::PullChatMessage* Arena::Create< ::kakaIM::Node::PullChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::PullChatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchUserVCardMessage* Arena::Create< ::kakaIM::Node::FetchUserVCardMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchUserVCardMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::UserVCardResponseMessage* Arena::Create< ::kakaIM::Node::UserVCardResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::UserVCardResponseMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::UpdateUserVCardMessage* Arena::Create< ::kakaIM::Node::UpdateUserVCardMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::UpdateUserVCardMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::UpdateUserVCardMessageResponse* Arena::Create< ::kakaIM::Node::UpdateUserVCardMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::UpdateUserVCardMessageResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupCreateRequest* Arena::Create< ::kakaIM::Node::ChatGroupCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupCreateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupCreateResponse* Arena::Create< ::kakaIM::Node::ChatGroupCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupCreateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupDisbandRequest* Arena::Create< ::kakaIM::Node::ChatGroupDisbandRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupDisbandRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupDisbandResponse* Arena::Create< ::kakaIM::Node::ChatGroupDisbandResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupDisbandResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupJoinRequest* Arena::Create< ::kakaIM::Node::ChatGroupJoinRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupJoinRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupJoinResponse* Arena::Create< ::kakaIM::Node::ChatGroupJoinResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupJoinResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupQuitRequest* Arena::Create< ::kakaIM::Node::ChatGroupQuitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupQuitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::ChatGroupQuitResponse* Arena::Create< ::kakaIM::Node::ChatGroupQuitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::ChatGroupQuitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::UpdateChatGroupInfoRequest* Arena::Create< ::kakaIM::Node::UpdateChatGroupInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::UpdateChatGroupInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::UpdateChatGroupInfoResponse* Arena::Create< ::kakaIM::Node::UpdateChatGroupInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::UpdateChatGroupInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupInfoRequest* Arena::Create< ::kakaIM::Node::FetchChatGroupInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupInfoResponse* Arena::Create< ::kakaIM::Node::FetchChatGroupInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupMemberListRequest* Arena::Create< ::kakaIM::Node::FetchChatGroupMemberListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupMemberListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo* Arena::Create< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupMemberListResponse* Arena::Create< ::kakaIM::Node::FetchChatGroupMemberListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupMemberListResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupListRequest* Arena::Create< ::kakaIM::Node::FetchChatGroupListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo* Arena::Create< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::FetchChatGroupListResponse* Arena::Create< ::kakaIM::Node::FetchChatGroupListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::FetchChatGroupListResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::GroupChatMessage* Arena::Create< ::kakaIM::Node::GroupChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::GroupChatMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::kakaIM::Node::PullGroupChatMessage* Arena::Create< ::kakaIM::Node::PullGroupChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::kakaIM::Node::PullGroupChatMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
