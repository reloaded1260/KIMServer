// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaIMMessage.proto

#ifndef PROTOBUF_KakaIMMessage_2eproto_INCLUDED
#define PROTOBUF_KakaIMMessage_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_KakaIMMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[45];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestSessionIDMessageImpl();
void InitDefaultsRequestSessionIDMessage();
void InitDefaultsResponseSessionIDMessageImpl();
void InitDefaultsResponseSessionIDMessage();
void InitDefaultsLoginMessageImpl();
void InitDefaultsLoginMessage();
void InitDefaultsResponseLoginMessageImpl();
void InitDefaultsResponseLoginMessage();
void InitDefaultsRegisterMessageImpl();
void InitDefaultsRegisterMessage();
void InitDefaultsResponseRegisterMessageImpl();
void InitDefaultsResponseRegisterMessage();
void InitDefaultsHeartBeatMessageImpl();
void InitDefaultsHeartBeatMessage();
void InitDefaultsResponseHeartBeatMessageImpl();
void InitDefaultsResponseHeartBeatMessage();
void InitDefaultsLogoutMessageImpl();
void InitDefaultsLogoutMessage();
void InitDefaultsResponseLogoutMessageImpl();
void InitDefaultsResponseLogoutMessage();
void InitDefaultsBuildingRelationshipRequestMessageImpl();
void InitDefaultsBuildingRelationshipRequestMessage();
void InitDefaultsBuildingRelationshipAnswerMessageImpl();
void InitDefaultsBuildingRelationshipAnswerMessage();
void InitDefaultsDestroyingRelationshipRequestMessageImpl();
void InitDefaultsDestroyingRelationshipRequestMessage();
void InitDefaultsDestoryingRelationshipResponseMessageImpl();
void InitDefaultsDestoryingRelationshipResponseMessage();
void InitDefaultsFriendListRequestMessageImpl();
void InitDefaultsFriendListRequestMessage();
void InitDefaultsFriendListItemImpl();
void InitDefaultsFriendListItem();
void InitDefaultsFriendListResponseMessageImpl();
void InitDefaultsFriendListResponseMessage();
void InitDefaultsOnlineStateMessageImpl();
void InitDefaultsOnlineStateMessage();
void InitDefaultsChatMessageImpl();
void InitDefaultsChatMessage();
void InitDefaultsNotificationMessageImpl();
void InitDefaultsNotificationMessage();
void InitDefaultsPullChatMessageImpl();
void InitDefaultsPullChatMessage();
void InitDefaultsFetchUserVCardMessageImpl();
void InitDefaultsFetchUserVCardMessage();
void InitDefaultsUserVCardResponseMessageImpl();
void InitDefaultsUserVCardResponseMessage();
void InitDefaultsUpdateUserVCardMessageImpl();
void InitDefaultsUpdateUserVCardMessage();
void InitDefaultsUpdateUserVCardMessageResponseImpl();
void InitDefaultsUpdateUserVCardMessageResponse();
void InitDefaultsChatGroupCreateRequestImpl();
void InitDefaultsChatGroupCreateRequest();
void InitDefaultsChatGroupCreateResponseImpl();
void InitDefaultsChatGroupCreateResponse();
void InitDefaultsChatGroupDisbandRequestImpl();
void InitDefaultsChatGroupDisbandRequest();
void InitDefaultsChatGroupDisbandResponseImpl();
void InitDefaultsChatGroupDisbandResponse();
void InitDefaultsChatGroupJoinRequestImpl();
void InitDefaultsChatGroupJoinRequest();
void InitDefaultsChatGroupJoinResponseImpl();
void InitDefaultsChatGroupJoinResponse();
void InitDefaultsChatGroupQuitRequestImpl();
void InitDefaultsChatGroupQuitRequest();
void InitDefaultsChatGroupQuitResponseImpl();
void InitDefaultsChatGroupQuitResponse();
void InitDefaultsUpdateChatGroupInfoRequestImpl();
void InitDefaultsUpdateChatGroupInfoRequest();
void InitDefaultsUpdateChatGroupInfoResponseImpl();
void InitDefaultsUpdateChatGroupInfoResponse();
void InitDefaultsFetchChatGroupInfoRequestImpl();
void InitDefaultsFetchChatGroupInfoRequest();
void InitDefaultsFetchChatGroupInfoResponseImpl();
void InitDefaultsFetchChatGroupInfoResponse();
void InitDefaultsFetchChatGroupMemberListRequestImpl();
void InitDefaultsFetchChatGroupMemberListRequest();
void InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfoImpl();
void InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfo();
void InitDefaultsFetchChatGroupMemberListResponseImpl();
void InitDefaultsFetchChatGroupMemberListResponse();
void InitDefaultsFetchChatGroupListRequestImpl();
void InitDefaultsFetchChatGroupListRequest();
void InitDefaultsFetchChatGroupListResponse_GroupInfoImpl();
void InitDefaultsFetchChatGroupListResponse_GroupInfo();
void InitDefaultsFetchChatGroupListResponseImpl();
void InitDefaultsFetchChatGroupListResponse();
void InitDefaultsGroupChatMessageImpl();
void InitDefaultsGroupChatMessage();
void InitDefaultsPullGroupChatMessageImpl();
void InitDefaultsPullGroupChatMessage();
inline void InitDefaults() {
  InitDefaultsRequestSessionIDMessage();
  InitDefaultsResponseSessionIDMessage();
  InitDefaultsLoginMessage();
  InitDefaultsResponseLoginMessage();
  InitDefaultsRegisterMessage();
  InitDefaultsResponseRegisterMessage();
  InitDefaultsHeartBeatMessage();
  InitDefaultsResponseHeartBeatMessage();
  InitDefaultsLogoutMessage();
  InitDefaultsResponseLogoutMessage();
  InitDefaultsBuildingRelationshipRequestMessage();
  InitDefaultsBuildingRelationshipAnswerMessage();
  InitDefaultsDestroyingRelationshipRequestMessage();
  InitDefaultsDestoryingRelationshipResponseMessage();
  InitDefaultsFriendListRequestMessage();
  InitDefaultsFriendListItem();
  InitDefaultsFriendListResponseMessage();
  InitDefaultsOnlineStateMessage();
  InitDefaultsChatMessage();
  InitDefaultsNotificationMessage();
  InitDefaultsPullChatMessage();
  InitDefaultsFetchUserVCardMessage();
  InitDefaultsUserVCardResponseMessage();
  InitDefaultsUpdateUserVCardMessage();
  InitDefaultsUpdateUserVCardMessageResponse();
  InitDefaultsChatGroupCreateRequest();
  InitDefaultsChatGroupCreateResponse();
  InitDefaultsChatGroupDisbandRequest();
  InitDefaultsChatGroupDisbandResponse();
  InitDefaultsChatGroupJoinRequest();
  InitDefaultsChatGroupJoinResponse();
  InitDefaultsChatGroupQuitRequest();
  InitDefaultsChatGroupQuitResponse();
  InitDefaultsUpdateChatGroupInfoRequest();
  InitDefaultsUpdateChatGroupInfoResponse();
  InitDefaultsFetchChatGroupInfoRequest();
  InitDefaultsFetchChatGroupInfoResponse();
  InitDefaultsFetchChatGroupMemberListRequest();
  InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfo();
  InitDefaultsFetchChatGroupMemberListResponse();
  InitDefaultsFetchChatGroupListRequest();
  InitDefaultsFetchChatGroupListResponse_GroupInfo();
  InitDefaultsFetchChatGroupListResponse();
  InitDefaultsGroupChatMessage();
  InitDefaultsPullGroupChatMessage();
}
}  // namespace protobuf_KakaIMMessage_2eproto
namespace kakaIM {
namespace Node {
class BuildingRelationshipAnswerMessage;
class BuildingRelationshipAnswerMessageDefaultTypeInternal;
extern BuildingRelationshipAnswerMessageDefaultTypeInternal _BuildingRelationshipAnswerMessage_default_instance_;
class BuildingRelationshipRequestMessage;
class BuildingRelationshipRequestMessageDefaultTypeInternal;
extern BuildingRelationshipRequestMessageDefaultTypeInternal _BuildingRelationshipRequestMessage_default_instance_;
class ChatGroupCreateRequest;
class ChatGroupCreateRequestDefaultTypeInternal;
extern ChatGroupCreateRequestDefaultTypeInternal _ChatGroupCreateRequest_default_instance_;
class ChatGroupCreateResponse;
class ChatGroupCreateResponseDefaultTypeInternal;
extern ChatGroupCreateResponseDefaultTypeInternal _ChatGroupCreateResponse_default_instance_;
class ChatGroupDisbandRequest;
class ChatGroupDisbandRequestDefaultTypeInternal;
extern ChatGroupDisbandRequestDefaultTypeInternal _ChatGroupDisbandRequest_default_instance_;
class ChatGroupDisbandResponse;
class ChatGroupDisbandResponseDefaultTypeInternal;
extern ChatGroupDisbandResponseDefaultTypeInternal _ChatGroupDisbandResponse_default_instance_;
class ChatGroupJoinRequest;
class ChatGroupJoinRequestDefaultTypeInternal;
extern ChatGroupJoinRequestDefaultTypeInternal _ChatGroupJoinRequest_default_instance_;
class ChatGroupJoinResponse;
class ChatGroupJoinResponseDefaultTypeInternal;
extern ChatGroupJoinResponseDefaultTypeInternal _ChatGroupJoinResponse_default_instance_;
class ChatGroupQuitRequest;
class ChatGroupQuitRequestDefaultTypeInternal;
extern ChatGroupQuitRequestDefaultTypeInternal _ChatGroupQuitRequest_default_instance_;
class ChatGroupQuitResponse;
class ChatGroupQuitResponseDefaultTypeInternal;
extern ChatGroupQuitResponseDefaultTypeInternal _ChatGroupQuitResponse_default_instance_;
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class DestoryingRelationshipResponseMessage;
class DestoryingRelationshipResponseMessageDefaultTypeInternal;
extern DestoryingRelationshipResponseMessageDefaultTypeInternal _DestoryingRelationshipResponseMessage_default_instance_;
class DestroyingRelationshipRequestMessage;
class DestroyingRelationshipRequestMessageDefaultTypeInternal;
extern DestroyingRelationshipRequestMessageDefaultTypeInternal _DestroyingRelationshipRequestMessage_default_instance_;
class FetchChatGroupInfoRequest;
class FetchChatGroupInfoRequestDefaultTypeInternal;
extern FetchChatGroupInfoRequestDefaultTypeInternal _FetchChatGroupInfoRequest_default_instance_;
class FetchChatGroupInfoResponse;
class FetchChatGroupInfoResponseDefaultTypeInternal;
extern FetchChatGroupInfoResponseDefaultTypeInternal _FetchChatGroupInfoResponse_default_instance_;
class FetchChatGroupListRequest;
class FetchChatGroupListRequestDefaultTypeInternal;
extern FetchChatGroupListRequestDefaultTypeInternal _FetchChatGroupListRequest_default_instance_;
class FetchChatGroupListResponse;
class FetchChatGroupListResponseDefaultTypeInternal;
extern FetchChatGroupListResponseDefaultTypeInternal _FetchChatGroupListResponse_default_instance_;
class FetchChatGroupListResponse_GroupInfo;
class FetchChatGroupListResponse_GroupInfoDefaultTypeInternal;
extern FetchChatGroupListResponse_GroupInfoDefaultTypeInternal _FetchChatGroupListResponse_GroupInfo_default_instance_;
class FetchChatGroupMemberListRequest;
class FetchChatGroupMemberListRequestDefaultTypeInternal;
extern FetchChatGroupMemberListRequestDefaultTypeInternal _FetchChatGroupMemberListRequest_default_instance_;
class FetchChatGroupMemberListResponse;
class FetchChatGroupMemberListResponseDefaultTypeInternal;
extern FetchChatGroupMemberListResponseDefaultTypeInternal _FetchChatGroupMemberListResponse_default_instance_;
class FetchChatGroupMemberListResponse_ChatGroupMemberInfo;
class FetchChatGroupMemberListResponse_ChatGroupMemberInfoDefaultTypeInternal;
extern FetchChatGroupMemberListResponse_ChatGroupMemberInfoDefaultTypeInternal _FetchChatGroupMemberListResponse_ChatGroupMemberInfo_default_instance_;
class FetchUserVCardMessage;
class FetchUserVCardMessageDefaultTypeInternal;
extern FetchUserVCardMessageDefaultTypeInternal _FetchUserVCardMessage_default_instance_;
class FriendListItem;
class FriendListItemDefaultTypeInternal;
extern FriendListItemDefaultTypeInternal _FriendListItem_default_instance_;
class FriendListRequestMessage;
class FriendListRequestMessageDefaultTypeInternal;
extern FriendListRequestMessageDefaultTypeInternal _FriendListRequestMessage_default_instance_;
class FriendListResponseMessage;
class FriendListResponseMessageDefaultTypeInternal;
extern FriendListResponseMessageDefaultTypeInternal _FriendListResponseMessage_default_instance_;
class GroupChatMessage;
class GroupChatMessageDefaultTypeInternal;
extern GroupChatMessageDefaultTypeInternal _GroupChatMessage_default_instance_;
class HeartBeatMessage;
class HeartBeatMessageDefaultTypeInternal;
extern HeartBeatMessageDefaultTypeInternal _HeartBeatMessage_default_instance_;
class LoginMessage;
class LoginMessageDefaultTypeInternal;
extern LoginMessageDefaultTypeInternal _LoginMessage_default_instance_;
class LogoutMessage;
class LogoutMessageDefaultTypeInternal;
extern LogoutMessageDefaultTypeInternal _LogoutMessage_default_instance_;
class NotificationMessage;
class NotificationMessageDefaultTypeInternal;
extern NotificationMessageDefaultTypeInternal _NotificationMessage_default_instance_;
class OnlineStateMessage;
class OnlineStateMessageDefaultTypeInternal;
extern OnlineStateMessageDefaultTypeInternal _OnlineStateMessage_default_instance_;
class PullChatMessage;
class PullChatMessageDefaultTypeInternal;
extern PullChatMessageDefaultTypeInternal _PullChatMessage_default_instance_;
class PullGroupChatMessage;
class PullGroupChatMessageDefaultTypeInternal;
extern PullGroupChatMessageDefaultTypeInternal _PullGroupChatMessage_default_instance_;
class RegisterMessage;
class RegisterMessageDefaultTypeInternal;
extern RegisterMessageDefaultTypeInternal _RegisterMessage_default_instance_;
class RequestSessionIDMessage;
class RequestSessionIDMessageDefaultTypeInternal;
extern RequestSessionIDMessageDefaultTypeInternal _RequestSessionIDMessage_default_instance_;
class ResponseHeartBeatMessage;
class ResponseHeartBeatMessageDefaultTypeInternal;
extern ResponseHeartBeatMessageDefaultTypeInternal _ResponseHeartBeatMessage_default_instance_;
class ResponseLoginMessage;
class ResponseLoginMessageDefaultTypeInternal;
extern ResponseLoginMessageDefaultTypeInternal _ResponseLoginMessage_default_instance_;
class ResponseLogoutMessage;
class ResponseLogoutMessageDefaultTypeInternal;
extern ResponseLogoutMessageDefaultTypeInternal _ResponseLogoutMessage_default_instance_;
class ResponseRegisterMessage;
class ResponseRegisterMessageDefaultTypeInternal;
extern ResponseRegisterMessageDefaultTypeInternal _ResponseRegisterMessage_default_instance_;
class ResponseSessionIDMessage;
class ResponseSessionIDMessageDefaultTypeInternal;
extern ResponseSessionIDMessageDefaultTypeInternal _ResponseSessionIDMessage_default_instance_;
class UpdateChatGroupInfoRequest;
class UpdateChatGroupInfoRequestDefaultTypeInternal;
extern UpdateChatGroupInfoRequestDefaultTypeInternal _UpdateChatGroupInfoRequest_default_instance_;
class UpdateChatGroupInfoResponse;
class UpdateChatGroupInfoResponseDefaultTypeInternal;
extern UpdateChatGroupInfoResponseDefaultTypeInternal _UpdateChatGroupInfoResponse_default_instance_;
class UpdateUserVCardMessage;
class UpdateUserVCardMessageDefaultTypeInternal;
extern UpdateUserVCardMessageDefaultTypeInternal _UpdateUserVCardMessage_default_instance_;
class UpdateUserVCardMessageResponse;
class UpdateUserVCardMessageResponseDefaultTypeInternal;
extern UpdateUserVCardMessageResponseDefaultTypeInternal _UpdateUserVCardMessageResponse_default_instance_;
class UserVCardResponseMessage;
class UserVCardResponseMessageDefaultTypeInternal;
extern UserVCardResponseMessageDefaultTypeInternal _UserVCardResponseMessage_default_instance_;
}  // namespace Node
}  // namespace kakaIM
namespace google {
namespace protobuf {
template<> ::kakaIM::Node::BuildingRelationshipAnswerMessage* Arena::Create< ::kakaIM::Node::BuildingRelationshipAnswerMessage>(Arena*);
template<> ::kakaIM::Node::BuildingRelationshipRequestMessage* Arena::Create< ::kakaIM::Node::BuildingRelationshipRequestMessage>(Arena*);
template<> ::kakaIM::Node::ChatGroupCreateRequest* Arena::Create< ::kakaIM::Node::ChatGroupCreateRequest>(Arena*);
template<> ::kakaIM::Node::ChatGroupCreateResponse* Arena::Create< ::kakaIM::Node::ChatGroupCreateResponse>(Arena*);
template<> ::kakaIM::Node::ChatGroupDisbandRequest* Arena::Create< ::kakaIM::Node::ChatGroupDisbandRequest>(Arena*);
template<> ::kakaIM::Node::ChatGroupDisbandResponse* Arena::Create< ::kakaIM::Node::ChatGroupDisbandResponse>(Arena*);
template<> ::kakaIM::Node::ChatGroupJoinRequest* Arena::Create< ::kakaIM::Node::ChatGroupJoinRequest>(Arena*);
template<> ::kakaIM::Node::ChatGroupJoinResponse* Arena::Create< ::kakaIM::Node::ChatGroupJoinResponse>(Arena*);
template<> ::kakaIM::Node::ChatGroupQuitRequest* Arena::Create< ::kakaIM::Node::ChatGroupQuitRequest>(Arena*);
template<> ::kakaIM::Node::ChatGroupQuitResponse* Arena::Create< ::kakaIM::Node::ChatGroupQuitResponse>(Arena*);
template<> ::kakaIM::Node::ChatMessage* Arena::Create< ::kakaIM::Node::ChatMessage>(Arena*);
template<> ::kakaIM::Node::DestoryingRelationshipResponseMessage* Arena::Create< ::kakaIM::Node::DestoryingRelationshipResponseMessage>(Arena*);
template<> ::kakaIM::Node::DestroyingRelationshipRequestMessage* Arena::Create< ::kakaIM::Node::DestroyingRelationshipRequestMessage>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupInfoRequest* Arena::Create< ::kakaIM::Node::FetchChatGroupInfoRequest>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupInfoResponse* Arena::Create< ::kakaIM::Node::FetchChatGroupInfoResponse>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupListRequest* Arena::Create< ::kakaIM::Node::FetchChatGroupListRequest>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupListResponse* Arena::Create< ::kakaIM::Node::FetchChatGroupListResponse>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo* Arena::Create< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupMemberListRequest* Arena::Create< ::kakaIM::Node::FetchChatGroupMemberListRequest>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupMemberListResponse* Arena::Create< ::kakaIM::Node::FetchChatGroupMemberListResponse>(Arena*);
template<> ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo* Arena::Create< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo>(Arena*);
template<> ::kakaIM::Node::FetchUserVCardMessage* Arena::Create< ::kakaIM::Node::FetchUserVCardMessage>(Arena*);
template<> ::kakaIM::Node::FriendListItem* Arena::Create< ::kakaIM::Node::FriendListItem>(Arena*);
template<> ::kakaIM::Node::FriendListRequestMessage* Arena::Create< ::kakaIM::Node::FriendListRequestMessage>(Arena*);
template<> ::kakaIM::Node::FriendListResponseMessage* Arena::Create< ::kakaIM::Node::FriendListResponseMessage>(Arena*);
template<> ::kakaIM::Node::GroupChatMessage* Arena::Create< ::kakaIM::Node::GroupChatMessage>(Arena*);
template<> ::kakaIM::Node::HeartBeatMessage* Arena::Create< ::kakaIM::Node::HeartBeatMessage>(Arena*);
template<> ::kakaIM::Node::LoginMessage* Arena::Create< ::kakaIM::Node::LoginMessage>(Arena*);
template<> ::kakaIM::Node::LogoutMessage* Arena::Create< ::kakaIM::Node::LogoutMessage>(Arena*);
template<> ::kakaIM::Node::NotificationMessage* Arena::Create< ::kakaIM::Node::NotificationMessage>(Arena*);
template<> ::kakaIM::Node::OnlineStateMessage* Arena::Create< ::kakaIM::Node::OnlineStateMessage>(Arena*);
template<> ::kakaIM::Node::PullChatMessage* Arena::Create< ::kakaIM::Node::PullChatMessage>(Arena*);
template<> ::kakaIM::Node::PullGroupChatMessage* Arena::Create< ::kakaIM::Node::PullGroupChatMessage>(Arena*);
template<> ::kakaIM::Node::RegisterMessage* Arena::Create< ::kakaIM::Node::RegisterMessage>(Arena*);
template<> ::kakaIM::Node::RequestSessionIDMessage* Arena::Create< ::kakaIM::Node::RequestSessionIDMessage>(Arena*);
template<> ::kakaIM::Node::ResponseHeartBeatMessage* Arena::Create< ::kakaIM::Node::ResponseHeartBeatMessage>(Arena*);
template<> ::kakaIM::Node::ResponseLoginMessage* Arena::Create< ::kakaIM::Node::ResponseLoginMessage>(Arena*);
template<> ::kakaIM::Node::ResponseLogoutMessage* Arena::Create< ::kakaIM::Node::ResponseLogoutMessage>(Arena*);
template<> ::kakaIM::Node::ResponseRegisterMessage* Arena::Create< ::kakaIM::Node::ResponseRegisterMessage>(Arena*);
template<> ::kakaIM::Node::ResponseSessionIDMessage* Arena::Create< ::kakaIM::Node::ResponseSessionIDMessage>(Arena*);
template<> ::kakaIM::Node::UpdateChatGroupInfoRequest* Arena::Create< ::kakaIM::Node::UpdateChatGroupInfoRequest>(Arena*);
template<> ::kakaIM::Node::UpdateChatGroupInfoResponse* Arena::Create< ::kakaIM::Node::UpdateChatGroupInfoResponse>(Arena*);
template<> ::kakaIM::Node::UpdateUserVCardMessage* Arena::Create< ::kakaIM::Node::UpdateUserVCardMessage>(Arena*);
template<> ::kakaIM::Node::UpdateUserVCardMessageResponse* Arena::Create< ::kakaIM::Node::UpdateUserVCardMessageResponse>(Arena*);
template<> ::kakaIM::Node::UserVCardResponseMessage* Arena::Create< ::kakaIM::Node::UserVCardResponseMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace kakaIM {
namespace Node {

enum ResponseSessionIDMessage_Status {
  ResponseSessionIDMessage_Status_Success = 1,
  ResponseSessionIDMessage_Status_ServerInterlnalError = 2
};
bool ResponseSessionIDMessage_Status_IsValid(int value);
const ResponseSessionIDMessage_Status ResponseSessionIDMessage_Status_Status_MIN = ResponseSessionIDMessage_Status_Success;
const ResponseSessionIDMessage_Status ResponseSessionIDMessage_Status_Status_MAX = ResponseSessionIDMessage_Status_ServerInterlnalError;
const int ResponseSessionIDMessage_Status_Status_ARRAYSIZE = ResponseSessionIDMessage_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseSessionIDMessage_Status_descriptor();
inline const ::std::string& ResponseSessionIDMessage_Status_Name(ResponseSessionIDMessage_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseSessionIDMessage_Status_descriptor(), value);
}
inline bool ResponseSessionIDMessage_Status_Parse(
    const ::std::string& name, ResponseSessionIDMessage_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseSessionIDMessage_Status>(
    ResponseSessionIDMessage_Status_descriptor(), name, value);
}
enum ResponseLoginMessage_LoginState {
  ResponseLoginMessage_LoginState_Success = 1,
  ResponseLoginMessage_LoginState_Failed = 2
};
bool ResponseLoginMessage_LoginState_IsValid(int value);
const ResponseLoginMessage_LoginState ResponseLoginMessage_LoginState_LoginState_MIN = ResponseLoginMessage_LoginState_Success;
const ResponseLoginMessage_LoginState ResponseLoginMessage_LoginState_LoginState_MAX = ResponseLoginMessage_LoginState_Failed;
const int ResponseLoginMessage_LoginState_LoginState_ARRAYSIZE = ResponseLoginMessage_LoginState_LoginState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseLoginMessage_LoginState_descriptor();
inline const ::std::string& ResponseLoginMessage_LoginState_Name(ResponseLoginMessage_LoginState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseLoginMessage_LoginState_descriptor(), value);
}
inline bool ResponseLoginMessage_LoginState_Parse(
    const ::std::string& name, ResponseLoginMessage_LoginState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseLoginMessage_LoginState>(
    ResponseLoginMessage_LoginState_descriptor(), name, value);
}
enum ResponseLoginMessage_FailureError {
  ResponseLoginMessage_FailureError_WrongAccountOrPassword = 1,
  ResponseLoginMessage_FailureError_ServerInternalError = 2
};
bool ResponseLoginMessage_FailureError_IsValid(int value);
const ResponseLoginMessage_FailureError ResponseLoginMessage_FailureError_FailureError_MIN = ResponseLoginMessage_FailureError_WrongAccountOrPassword;
const ResponseLoginMessage_FailureError ResponseLoginMessage_FailureError_FailureError_MAX = ResponseLoginMessage_FailureError_ServerInternalError;
const int ResponseLoginMessage_FailureError_FailureError_ARRAYSIZE = ResponseLoginMessage_FailureError_FailureError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseLoginMessage_FailureError_descriptor();
inline const ::std::string& ResponseLoginMessage_FailureError_Name(ResponseLoginMessage_FailureError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseLoginMessage_FailureError_descriptor(), value);
}
inline bool ResponseLoginMessage_FailureError_Parse(
    const ::std::string& name, ResponseLoginMessage_FailureError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseLoginMessage_FailureError>(
    ResponseLoginMessage_FailureError_descriptor(), name, value);
}
enum RegisterMessage_UserSex {
  RegisterMessage_UserSex_male = 1,
  RegisterMessage_UserSex_female = 2,
  RegisterMessage_UserSex_Unkown = 3
};
bool RegisterMessage_UserSex_IsValid(int value);
const RegisterMessage_UserSex RegisterMessage_UserSex_UserSex_MIN = RegisterMessage_UserSex_male;
const RegisterMessage_UserSex RegisterMessage_UserSex_UserSex_MAX = RegisterMessage_UserSex_Unkown;
const int RegisterMessage_UserSex_UserSex_ARRAYSIZE = RegisterMessage_UserSex_UserSex_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegisterMessage_UserSex_descriptor();
inline const ::std::string& RegisterMessage_UserSex_Name(RegisterMessage_UserSex value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegisterMessage_UserSex_descriptor(), value);
}
inline bool RegisterMessage_UserSex_Parse(
    const ::std::string& name, RegisterMessage_UserSex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegisterMessage_UserSex>(
    RegisterMessage_UserSex_descriptor(), name, value);
}
enum ResponseRegisterMessage_RegisterState {
  ResponseRegisterMessage_RegisterState_Success = 1,
  ResponseRegisterMessage_RegisterState_Failed = 2
};
bool ResponseRegisterMessage_RegisterState_IsValid(int value);
const ResponseRegisterMessage_RegisterState ResponseRegisterMessage_RegisterState_RegisterState_MIN = ResponseRegisterMessage_RegisterState_Success;
const ResponseRegisterMessage_RegisterState ResponseRegisterMessage_RegisterState_RegisterState_MAX = ResponseRegisterMessage_RegisterState_Failed;
const int ResponseRegisterMessage_RegisterState_RegisterState_ARRAYSIZE = ResponseRegisterMessage_RegisterState_RegisterState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseRegisterMessage_RegisterState_descriptor();
inline const ::std::string& ResponseRegisterMessage_RegisterState_Name(ResponseRegisterMessage_RegisterState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseRegisterMessage_RegisterState_descriptor(), value);
}
inline bool ResponseRegisterMessage_RegisterState_Parse(
    const ::std::string& name, ResponseRegisterMessage_RegisterState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseRegisterMessage_RegisterState>(
    ResponseRegisterMessage_RegisterState_descriptor(), name, value);
}
enum ResponseRegisterMessage_FailureError {
  ResponseRegisterMessage_FailureError_AccountAlreadyExists = 1,
  ResponseRegisterMessage_FailureError_ServerInternalError = 2
};
bool ResponseRegisterMessage_FailureError_IsValid(int value);
const ResponseRegisterMessage_FailureError ResponseRegisterMessage_FailureError_FailureError_MIN = ResponseRegisterMessage_FailureError_AccountAlreadyExists;
const ResponseRegisterMessage_FailureError ResponseRegisterMessage_FailureError_FailureError_MAX = ResponseRegisterMessage_FailureError_ServerInternalError;
const int ResponseRegisterMessage_FailureError_FailureError_ARRAYSIZE = ResponseRegisterMessage_FailureError_FailureError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseRegisterMessage_FailureError_descriptor();
inline const ::std::string& ResponseRegisterMessage_FailureError_Name(ResponseRegisterMessage_FailureError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseRegisterMessage_FailureError_descriptor(), value);
}
inline bool ResponseRegisterMessage_FailureError_Parse(
    const ::std::string& name, ResponseRegisterMessage_FailureError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseRegisterMessage_FailureError>(
    ResponseRegisterMessage_FailureError_descriptor(), name, value);
}
enum LogoutMessage_OfflineMailState {
  LogoutMessage_OfflineMailState_Open = 1,
  LogoutMessage_OfflineMailState_Close = 2
};
bool LogoutMessage_OfflineMailState_IsValid(int value);
const LogoutMessage_OfflineMailState LogoutMessage_OfflineMailState_OfflineMailState_MIN = LogoutMessage_OfflineMailState_Open;
const LogoutMessage_OfflineMailState LogoutMessage_OfflineMailState_OfflineMailState_MAX = LogoutMessage_OfflineMailState_Close;
const int LogoutMessage_OfflineMailState_OfflineMailState_ARRAYSIZE = LogoutMessage_OfflineMailState_OfflineMailState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogoutMessage_OfflineMailState_descriptor();
inline const ::std::string& LogoutMessage_OfflineMailState_Name(LogoutMessage_OfflineMailState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogoutMessage_OfflineMailState_descriptor(), value);
}
inline bool LogoutMessage_OfflineMailState_Parse(
    const ::std::string& name, LogoutMessage_OfflineMailState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogoutMessage_OfflineMailState>(
    LogoutMessage_OfflineMailState_descriptor(), name, value);
}
enum ResponseLogoutMessage_OfflineMailState {
  ResponseLogoutMessage_OfflineMailState_Open = 1,
  ResponseLogoutMessage_OfflineMailState_Close = 2
};
bool ResponseLogoutMessage_OfflineMailState_IsValid(int value);
const ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage_OfflineMailState_OfflineMailState_MIN = ResponseLogoutMessage_OfflineMailState_Open;
const ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage_OfflineMailState_OfflineMailState_MAX = ResponseLogoutMessage_OfflineMailState_Close;
const int ResponseLogoutMessage_OfflineMailState_OfflineMailState_ARRAYSIZE = ResponseLogoutMessage_OfflineMailState_OfflineMailState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseLogoutMessage_OfflineMailState_descriptor();
inline const ::std::string& ResponseLogoutMessage_OfflineMailState_Name(ResponseLogoutMessage_OfflineMailState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseLogoutMessage_OfflineMailState_descriptor(), value);
}
inline bool ResponseLogoutMessage_OfflineMailState_Parse(
    const ::std::string& name, ResponseLogoutMessage_OfflineMailState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseLogoutMessage_OfflineMailState>(
    ResponseLogoutMessage_OfflineMailState_descriptor(), name, value);
}
enum BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer {
  BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Accept = 1,
  BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Reject = 2
};
bool BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_IsValid(int value);
const BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_MIN = BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Accept;
const BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_MAX = BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Reject;
const int BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_ARRAYSIZE = BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_MAX + 1;

const ::google::protobuf::EnumDescriptor* BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_descriptor();
inline const ::std::string& BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Name(BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_descriptor(), value);
}
inline bool BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Parse(
    const ::std::string& name, BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer>(
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_descriptor(), name, value);
}
enum DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse {
  DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Success = 1,
  DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_ServerInteralError = 2,
  DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IllegalOperation = 3
};
bool DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IsValid(int value);
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_MIN = DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Success;
const DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_MAX = DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IllegalOperation;
const int DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_ARRAYSIZE = DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_MAX + 1;

const ::google::protobuf::EnumDescriptor* DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_descriptor();
inline const ::std::string& DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Name(DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse value) {
  return ::google::protobuf::internal::NameOfEnum(
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_descriptor(), value);
}
inline bool DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Parse(
    const ::std::string& name, DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse>(
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_descriptor(), name, value);
}
enum OnlineStateMessage_OnlineState {
  OnlineStateMessage_OnlineState_Online = 1,
  OnlineStateMessage_OnlineState_Offline = 2,
  OnlineStateMessage_OnlineState_Invisible = 3
};
bool OnlineStateMessage_OnlineState_IsValid(int value);
const OnlineStateMessage_OnlineState OnlineStateMessage_OnlineState_OnlineState_MIN = OnlineStateMessage_OnlineState_Online;
const OnlineStateMessage_OnlineState OnlineStateMessage_OnlineState_OnlineState_MAX = OnlineStateMessage_OnlineState_Invisible;
const int OnlineStateMessage_OnlineState_OnlineState_ARRAYSIZE = OnlineStateMessage_OnlineState_OnlineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* OnlineStateMessage_OnlineState_descriptor();
inline const ::std::string& OnlineStateMessage_OnlineState_Name(OnlineStateMessage_OnlineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    OnlineStateMessage_OnlineState_descriptor(), value);
}
inline bool OnlineStateMessage_OnlineState_Parse(
    const ::std::string& name, OnlineStateMessage_OnlineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OnlineStateMessage_OnlineState>(
    OnlineStateMessage_OnlineState_descriptor(), name, value);
}
enum NotificationMessage_NotificationMessageType {
  NotificationMessage_NotificationMessageType_SystemNotificationMessageType = 1
};
bool NotificationMessage_NotificationMessageType_IsValid(int value);
const NotificationMessage_NotificationMessageType NotificationMessage_NotificationMessageType_NotificationMessageType_MIN = NotificationMessage_NotificationMessageType_SystemNotificationMessageType;
const NotificationMessage_NotificationMessageType NotificationMessage_NotificationMessageType_NotificationMessageType_MAX = NotificationMessage_NotificationMessageType_SystemNotificationMessageType;
const int NotificationMessage_NotificationMessageType_NotificationMessageType_ARRAYSIZE = NotificationMessage_NotificationMessageType_NotificationMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotificationMessage_NotificationMessageType_descriptor();
inline const ::std::string& NotificationMessage_NotificationMessageType_Name(NotificationMessage_NotificationMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotificationMessage_NotificationMessageType_descriptor(), value);
}
inline bool NotificationMessage_NotificationMessageType_Parse(
    const ::std::string& name, NotificationMessage_NotificationMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotificationMessage_NotificationMessageType>(
    NotificationMessage_NotificationMessageType_descriptor(), name, value);
}
enum UpdateUserVCardMessageResponse_UpdateUserVCardStateType {
  UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Success = 1,
  UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Failure = 2
};
bool UpdateUserVCardMessageResponse_UpdateUserVCardStateType_IsValid(int value);
const UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_MIN = UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Success;
const UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_MAX = UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Failure;
const int UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_ARRAYSIZE = UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateUserVCardMessageResponse_UpdateUserVCardStateType_descriptor();
inline const ::std::string& UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Name(UpdateUserVCardMessageResponse_UpdateUserVCardStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_descriptor(), value);
}
inline bool UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Parse(
    const ::std::string& name, UpdateUserVCardMessageResponse_UpdateUserVCardStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateUserVCardMessageResponse_UpdateUserVCardStateType>(
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_descriptor(), name, value);
}
enum ChatGroupCreateResponse_ChatGroupCreateResponseResult {
  ChatGroupCreateResponse_ChatGroupCreateResponseResult_Success = 1,
  ChatGroupCreateResponse_ChatGroupCreateResponseResult_Failed = 2
};
bool ChatGroupCreateResponse_ChatGroupCreateResponseResult_IsValid(int value);
const ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_MIN = ChatGroupCreateResponse_ChatGroupCreateResponseResult_Success;
const ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_MAX = ChatGroupCreateResponse_ChatGroupCreateResponseResult_Failed;
const int ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_ARRAYSIZE = ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatGroupCreateResponse_ChatGroupCreateResponseResult_descriptor();
inline const ::std::string& ChatGroupCreateResponse_ChatGroupCreateResponseResult_Name(ChatGroupCreateResponse_ChatGroupCreateResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_descriptor(), value);
}
inline bool ChatGroupCreateResponse_ChatGroupCreateResponseResult_Parse(
    const ::std::string& name, ChatGroupCreateResponse_ChatGroupCreateResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatGroupCreateResponse_ChatGroupCreateResponseResult>(
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_descriptor(), name, value);
}
enum ChatGroupDisbandResponse_ChatGroupDisbandResponseResult {
  ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Success = 1,
  ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Failed = 2
};
bool ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_IsValid(int value);
const ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_MIN = ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Success;
const ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_MAX = ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Failed;
const int ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_ARRAYSIZE = ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_descriptor();
inline const ::std::string& ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Name(ChatGroupDisbandResponse_ChatGroupDisbandResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_descriptor(), value);
}
inline bool ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Parse(
    const ::std::string& name, ChatGroupDisbandResponse_ChatGroupDisbandResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatGroupDisbandResponse_ChatGroupDisbandResponseResult>(
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_descriptor(), name, value);
}
enum ChatGroupJoinResponse_ChatGroupJoinResponseResult {
  ChatGroupJoinResponse_ChatGroupJoinResponseResult_Allow = 1,
  ChatGroupJoinResponse_ChatGroupJoinResponseResult_Reject = 2,
  ChatGroupJoinResponse_ChatGroupJoinResponseResult_ServerInternalError = 3,
  ChatGroupJoinResponse_ChatGroupJoinResponseResult_InfomationNotMatch = 4,
  ChatGroupJoinResponse_ChatGroupJoinResponseResult_AuthorizationNotMath = 5
};
bool ChatGroupJoinResponse_ChatGroupJoinResponseResult_IsValid(int value);
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_MIN = ChatGroupJoinResponse_ChatGroupJoinResponseResult_Allow;
const ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_MAX = ChatGroupJoinResponse_ChatGroupJoinResponseResult_AuthorizationNotMath;
const int ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_ARRAYSIZE = ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatGroupJoinResponse_ChatGroupJoinResponseResult_descriptor();
inline const ::std::string& ChatGroupJoinResponse_ChatGroupJoinResponseResult_Name(ChatGroupJoinResponse_ChatGroupJoinResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_descriptor(), value);
}
inline bool ChatGroupJoinResponse_ChatGroupJoinResponseResult_Parse(
    const ::std::string& name, ChatGroupJoinResponse_ChatGroupJoinResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatGroupJoinResponse_ChatGroupJoinResponseResult>(
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_descriptor(), name, value);
}
enum ChatGroupQuitResponse_ChatGroupQuitResponseResult {
  ChatGroupQuitResponse_ChatGroupQuitResponseResult_Success = 1,
  ChatGroupQuitResponse_ChatGroupQuitResponseResult_Failed = 2
};
bool ChatGroupQuitResponse_ChatGroupQuitResponseResult_IsValid(int value);
const ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_MIN = ChatGroupQuitResponse_ChatGroupQuitResponseResult_Success;
const ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_MAX = ChatGroupQuitResponse_ChatGroupQuitResponseResult_Failed;
const int ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_ARRAYSIZE = ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatGroupQuitResponse_ChatGroupQuitResponseResult_descriptor();
inline const ::std::string& ChatGroupQuitResponse_ChatGroupQuitResponseResult_Name(ChatGroupQuitResponse_ChatGroupQuitResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_descriptor(), value);
}
inline bool ChatGroupQuitResponse_ChatGroupQuitResponseResult_Parse(
    const ::std::string& name, ChatGroupQuitResponse_ChatGroupQuitResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatGroupQuitResponse_ChatGroupQuitResponseResult>(
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_descriptor(), name, value);
}
enum UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult {
  UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Success = 1,
  UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Failed = 2,
  UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_ServerInternalError = 3,
  UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_InfomationNotMatch = 4,
  UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_AuthorizationNotMath = 5
};
bool UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_IsValid(int value);
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_MIN = UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Success;
const UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_MAX = UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_AuthorizationNotMath;
const int UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_ARRAYSIZE = UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_descriptor();
inline const ::std::string& UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Name(UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_descriptor(), value);
}
inline bool UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Parse(
    const ::std::string& name, UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult>(
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_descriptor(), name, value);
}
enum FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult {
  FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Success = 1,
  FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Failed = 2
};
bool FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_IsValid(int value);
const FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_MIN = FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Success;
const FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_MAX = FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Failed;
const int FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_ARRAYSIZE = FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_descriptor();
inline const ::std::string& FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Name(FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_descriptor(), value);
}
inline bool FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Parse(
    const ::std::string& name, FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult>(
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_descriptor(), name, value);
}
enum FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult {
  FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Success = 1,
  FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Failed = 2
};
bool FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_IsValid(int value);
const FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_MIN = FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Success;
const FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_MAX = FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Failed;
const int FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_ARRAYSIZE = FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_descriptor();
inline const ::std::string& FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Name(FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_descriptor(), value);
}
inline bool FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Parse(
    const ::std::string& name, FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult>(
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_descriptor(), name, value);
}
enum UserGenderType {
  Male = 1,
  Female = 2,
  Unkown = 3
};
bool UserGenderType_IsValid(int value);
const UserGenderType UserGenderType_MIN = Male;
const UserGenderType UserGenderType_MAX = Unkown;
const int UserGenderType_ARRAYSIZE = UserGenderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserGenderType_descriptor();
inline const ::std::string& UserGenderType_Name(UserGenderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserGenderType_descriptor(), value);
}
inline bool UserGenderType_Parse(
    const ::std::string& name, UserGenderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserGenderType>(
    UserGenderType_descriptor(), name, value);
}
// ===================================================================

class RequestSessionIDMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.RequestSessionIDMessage) */ {
 public:
  RequestSessionIDMessage();
  virtual ~RequestSessionIDMessage();

  RequestSessionIDMessage(const RequestSessionIDMessage& from);

  inline RequestSessionIDMessage& operator=(const RequestSessionIDMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestSessionIDMessage(RequestSessionIDMessage&& from) noexcept
    : RequestSessionIDMessage() {
    *this = ::std::move(from);
  }

  inline RequestSessionIDMessage& operator=(RequestSessionIDMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSessionIDMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSessionIDMessage* internal_default_instance() {
    return reinterpret_cast<const RequestSessionIDMessage*>(
               &_RequestSessionIDMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RequestSessionIDMessage* other);
  friend void swap(RequestSessionIDMessage& a, RequestSessionIDMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestSessionIDMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RequestSessionIDMessage>(NULL);
  }

  RequestSessionIDMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RequestSessionIDMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestSessionIDMessage& from);
  void MergeFrom(const RequestSessionIDMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestSessionIDMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kakaIM.Node.RequestSessionIDMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsRequestSessionIDMessageImpl();
};
// -------------------------------------------------------------------

class ResponseSessionIDMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ResponseSessionIDMessage) */ {
 public:
  ResponseSessionIDMessage();
  virtual ~ResponseSessionIDMessage();

  ResponseSessionIDMessage(const ResponseSessionIDMessage& from);

  inline ResponseSessionIDMessage& operator=(const ResponseSessionIDMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseSessionIDMessage(ResponseSessionIDMessage&& from) noexcept
    : ResponseSessionIDMessage() {
    *this = ::std::move(from);
  }

  inline ResponseSessionIDMessage& operator=(ResponseSessionIDMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSessionIDMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseSessionIDMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseSessionIDMessage*>(
               &_ResponseSessionIDMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ResponseSessionIDMessage* other);
  friend void swap(ResponseSessionIDMessage& a, ResponseSessionIDMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseSessionIDMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseSessionIDMessage>(NULL);
  }

  ResponseSessionIDMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseSessionIDMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseSessionIDMessage& from);
  void MergeFrom(const ResponseSessionIDMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseSessionIDMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseSessionIDMessage_Status Status;
  static const Status Success =
    ResponseSessionIDMessage_Status_Success;
  static const Status ServerInterlnalError =
    ResponseSessionIDMessage_Status_ServerInterlnalError;
  static inline bool Status_IsValid(int value) {
    return ResponseSessionIDMessage_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ResponseSessionIDMessage_Status_Status_MIN;
  static const Status Status_MAX =
    ResponseSessionIDMessage_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ResponseSessionIDMessage_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ResponseSessionIDMessage_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ResponseSessionIDMessage_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ResponseSessionIDMessage_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::kakaIM::Node::ResponseSessionIDMessage_Status status() const;
  void set_status(::kakaIM::Node::ResponseSessionIDMessage_Status value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ResponseSessionIDMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int status_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseSessionIDMessageImpl();
};
// -------------------------------------------------------------------

class LoginMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.LoginMessage) */ {
 public:
  LoginMessage();
  virtual ~LoginMessage();

  LoginMessage(const LoginMessage& from);

  inline LoginMessage& operator=(const LoginMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginMessage(LoginMessage&& from) noexcept
    : LoginMessage() {
    *this = ::std::move(from);
  }

  inline LoginMessage& operator=(LoginMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginMessage* internal_default_instance() {
    return reinterpret_cast<const LoginMessage*>(
               &_LoginMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LoginMessage* other);
  friend void swap(LoginMessage& a, LoginMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoginMessage>(NULL);
  }

  LoginMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LoginMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginMessage& from);
  void MergeFrom(const LoginMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userAccount = 2;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 2;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // required string userPassword = 3;
  bool has_userpassword() const;
  void clear_userpassword();
  static const int kUserPasswordFieldNumber = 3;
  const ::std::string& userpassword() const;
  void set_userpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_userpassword(::std::string&& value);
  #endif
  void set_userpassword(const char* value);
  void set_userpassword(const char* value, size_t size);
  ::std::string* mutable_userpassword();
  ::std::string* release_userpassword();
  void set_allocated_userpassword(::std::string* userpassword);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.LoginMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_userpassword();
  void clear_has_userpassword();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr userpassword_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsLoginMessageImpl();
};
// -------------------------------------------------------------------

class ResponseLoginMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ResponseLoginMessage) */ {
 public:
  ResponseLoginMessage();
  virtual ~ResponseLoginMessage();

  ResponseLoginMessage(const ResponseLoginMessage& from);

  inline ResponseLoginMessage& operator=(const ResponseLoginMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseLoginMessage(ResponseLoginMessage&& from) noexcept
    : ResponseLoginMessage() {
    *this = ::std::move(from);
  }

  inline ResponseLoginMessage& operator=(ResponseLoginMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseLoginMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseLoginMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseLoginMessage*>(
               &_ResponseLoginMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ResponseLoginMessage* other);
  friend void swap(ResponseLoginMessage& a, ResponseLoginMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseLoginMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseLoginMessage>(NULL);
  }

  ResponseLoginMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseLoginMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseLoginMessage& from);
  void MergeFrom(const ResponseLoginMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseLoginMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseLoginMessage_LoginState LoginState;
  static const LoginState Success =
    ResponseLoginMessage_LoginState_Success;
  static const LoginState Failed =
    ResponseLoginMessage_LoginState_Failed;
  static inline bool LoginState_IsValid(int value) {
    return ResponseLoginMessage_LoginState_IsValid(value);
  }
  static const LoginState LoginState_MIN =
    ResponseLoginMessage_LoginState_LoginState_MIN;
  static const LoginState LoginState_MAX =
    ResponseLoginMessage_LoginState_LoginState_MAX;
  static const int LoginState_ARRAYSIZE =
    ResponseLoginMessage_LoginState_LoginState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoginState_descriptor() {
    return ResponseLoginMessage_LoginState_descriptor();
  }
  static inline const ::std::string& LoginState_Name(LoginState value) {
    return ResponseLoginMessage_LoginState_Name(value);
  }
  static inline bool LoginState_Parse(const ::std::string& name,
      LoginState* value) {
    return ResponseLoginMessage_LoginState_Parse(name, value);
  }

  typedef ResponseLoginMessage_FailureError FailureError;
  static const FailureError WrongAccountOrPassword =
    ResponseLoginMessage_FailureError_WrongAccountOrPassword;
  static const FailureError ServerInternalError =
    ResponseLoginMessage_FailureError_ServerInternalError;
  static inline bool FailureError_IsValid(int value) {
    return ResponseLoginMessage_FailureError_IsValid(value);
  }
  static const FailureError FailureError_MIN =
    ResponseLoginMessage_FailureError_FailureError_MIN;
  static const FailureError FailureError_MAX =
    ResponseLoginMessage_FailureError_FailureError_MAX;
  static const int FailureError_ARRAYSIZE =
    ResponseLoginMessage_FailureError_FailureError_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailureError_descriptor() {
    return ResponseLoginMessage_FailureError_descriptor();
  }
  static inline const ::std::string& FailureError_Name(FailureError value) {
    return ResponseLoginMessage_FailureError_Name(value);
  }
  static inline bool FailureError_Parse(const ::std::string& name,
      FailureError* value) {
    return ResponseLoginMessage_FailureError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
  bool has_loginstate() const;
  void clear_loginstate();
  static const int kLoginStateFieldNumber = 2;
  ::kakaIM::Node::ResponseLoginMessage_LoginState loginstate() const;
  void set_loginstate(::kakaIM::Node::ResponseLoginMessage_LoginState value);

  // optional .kakaIM.Node.ResponseLoginMessage.FailureError failureError = 3;
  bool has_failureerror() const;
  void clear_failureerror();
  static const int kFailureErrorFieldNumber = 3;
  ::kakaIM::Node::ResponseLoginMessage_FailureError failureerror() const;
  void set_failureerror(::kakaIM::Node::ResponseLoginMessage_FailureError value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ResponseLoginMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_loginstate();
  void clear_has_loginstate();
  void set_has_failureerror();
  void clear_has_failureerror();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int loginstate_;
  int failureerror_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseLoginMessageImpl();
};
// -------------------------------------------------------------------

class RegisterMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.RegisterMessage) */ {
 public:
  RegisterMessage();
  virtual ~RegisterMessage();

  RegisterMessage(const RegisterMessage& from);

  inline RegisterMessage& operator=(const RegisterMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterMessage(RegisterMessage&& from) noexcept
    : RegisterMessage() {
    *this = ::std::move(from);
  }

  inline RegisterMessage& operator=(RegisterMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterMessage* internal_default_instance() {
    return reinterpret_cast<const RegisterMessage*>(
               &_RegisterMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RegisterMessage* other);
  friend void swap(RegisterMessage& a, RegisterMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RegisterMessage>(NULL);
  }

  RegisterMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RegisterMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterMessage& from);
  void MergeFrom(const RegisterMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RegisterMessage_UserSex UserSex;
  static const UserSex male =
    RegisterMessage_UserSex_male;
  static const UserSex female =
    RegisterMessage_UserSex_female;
  static const UserSex Unkown =
    RegisterMessage_UserSex_Unkown;
  static inline bool UserSex_IsValid(int value) {
    return RegisterMessage_UserSex_IsValid(value);
  }
  static const UserSex UserSex_MIN =
    RegisterMessage_UserSex_UserSex_MIN;
  static const UserSex UserSex_MAX =
    RegisterMessage_UserSex_UserSex_MAX;
  static const int UserSex_ARRAYSIZE =
    RegisterMessage_UserSex_UserSex_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UserSex_descriptor() {
    return RegisterMessage_UserSex_descriptor();
  }
  static inline const ::std::string& UserSex_Name(UserSex value) {
    return RegisterMessage_UserSex_Name(value);
  }
  static inline bool UserSex_Parse(const ::std::string& name,
      UserSex* value) {
    return RegisterMessage_UserSex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userAccount = 2;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 2;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // required string userPassword = 3;
  bool has_userpassword() const;
  void clear_userpassword();
  static const int kUserPasswordFieldNumber = 3;
  const ::std::string& userpassword() const;
  void set_userpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_userpassword(::std::string&& value);
  #endif
  void set_userpassword(const char* value);
  void set_userpassword(const char* value, size_t size);
  ::std::string* mutable_userpassword();
  ::std::string* release_userpassword();
  void set_allocated_userpassword(::std::string* userpassword);

  // optional string userNickName = 4;
  bool has_usernickname() const;
  void clear_usernickname();
  static const int kUserNickNameFieldNumber = 4;
  const ::std::string& usernickname() const;
  void set_usernickname(const ::std::string& value);
  #if LANG_CXX11
  void set_usernickname(::std::string&& value);
  #endif
  void set_usernickname(const char* value);
  void set_usernickname(const char* value, size_t size);
  ::std::string* mutable_usernickname();
  ::std::string* release_usernickname();
  void set_allocated_usernickname(::std::string* usernickname);

  // optional .kakaIM.Node.RegisterMessage.UserSex sex = 5 [default = Unkown];
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::kakaIM::Node::RegisterMessage_UserSex sex() const;
  void set_sex(::kakaIM::Node::RegisterMessage_UserSex value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.RegisterMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_userpassword();
  void clear_has_userpassword();
  void set_has_usernickname();
  void clear_has_usernickname();
  void set_has_sex();
  void clear_has_sex();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr userpassword_;
  ::google::protobuf::internal::ArenaStringPtr usernickname_;
  int sex_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsRegisterMessageImpl();
};
// -------------------------------------------------------------------

class ResponseRegisterMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ResponseRegisterMessage) */ {
 public:
  ResponseRegisterMessage();
  virtual ~ResponseRegisterMessage();

  ResponseRegisterMessage(const ResponseRegisterMessage& from);

  inline ResponseRegisterMessage& operator=(const ResponseRegisterMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseRegisterMessage(ResponseRegisterMessage&& from) noexcept
    : ResponseRegisterMessage() {
    *this = ::std::move(from);
  }

  inline ResponseRegisterMessage& operator=(ResponseRegisterMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseRegisterMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseRegisterMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseRegisterMessage*>(
               &_ResponseRegisterMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ResponseRegisterMessage* other);
  friend void swap(ResponseRegisterMessage& a, ResponseRegisterMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseRegisterMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseRegisterMessage>(NULL);
  }

  ResponseRegisterMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseRegisterMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseRegisterMessage& from);
  void MergeFrom(const ResponseRegisterMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseRegisterMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseRegisterMessage_RegisterState RegisterState;
  static const RegisterState Success =
    ResponseRegisterMessage_RegisterState_Success;
  static const RegisterState Failed =
    ResponseRegisterMessage_RegisterState_Failed;
  static inline bool RegisterState_IsValid(int value) {
    return ResponseRegisterMessage_RegisterState_IsValid(value);
  }
  static const RegisterState RegisterState_MIN =
    ResponseRegisterMessage_RegisterState_RegisterState_MIN;
  static const RegisterState RegisterState_MAX =
    ResponseRegisterMessage_RegisterState_RegisterState_MAX;
  static const int RegisterState_ARRAYSIZE =
    ResponseRegisterMessage_RegisterState_RegisterState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RegisterState_descriptor() {
    return ResponseRegisterMessage_RegisterState_descriptor();
  }
  static inline const ::std::string& RegisterState_Name(RegisterState value) {
    return ResponseRegisterMessage_RegisterState_Name(value);
  }
  static inline bool RegisterState_Parse(const ::std::string& name,
      RegisterState* value) {
    return ResponseRegisterMessage_RegisterState_Parse(name, value);
  }

  typedef ResponseRegisterMessage_FailureError FailureError;
  static const FailureError AccountAlreadyExists =
    ResponseRegisterMessage_FailureError_AccountAlreadyExists;
  static const FailureError ServerInternalError =
    ResponseRegisterMessage_FailureError_ServerInternalError;
  static inline bool FailureError_IsValid(int value) {
    return ResponseRegisterMessage_FailureError_IsValid(value);
  }
  static const FailureError FailureError_MIN =
    ResponseRegisterMessage_FailureError_FailureError_MIN;
  static const FailureError FailureError_MAX =
    ResponseRegisterMessage_FailureError_FailureError_MAX;
  static const int FailureError_ARRAYSIZE =
    ResponseRegisterMessage_FailureError_FailureError_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailureError_descriptor() {
    return ResponseRegisterMessage_FailureError_descriptor();
  }
  static inline const ::std::string& FailureError_Name(FailureError value) {
    return ResponseRegisterMessage_FailureError_Name(value);
  }
  static inline bool FailureError_Parse(const ::std::string& name,
      FailureError* value) {
    return ResponseRegisterMessage_FailureError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
  bool has_registerstate() const;
  void clear_registerstate();
  static const int kRegisterStateFieldNumber = 2;
  ::kakaIM::Node::ResponseRegisterMessage_RegisterState registerstate() const;
  void set_registerstate(::kakaIM::Node::ResponseRegisterMessage_RegisterState value);

  // optional .kakaIM.Node.ResponseRegisterMessage.FailureError failureError = 3;
  bool has_failureerror() const;
  void clear_failureerror();
  static const int kFailureErrorFieldNumber = 3;
  ::kakaIM::Node::ResponseRegisterMessage_FailureError failureerror() const;
  void set_failureerror(::kakaIM::Node::ResponseRegisterMessage_FailureError value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ResponseRegisterMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_registerstate();
  void clear_has_registerstate();
  void set_has_failureerror();
  void clear_has_failureerror();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int registerstate_;
  int failureerror_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseRegisterMessageImpl();
};
// -------------------------------------------------------------------

class HeartBeatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.HeartBeatMessage) */ {
 public:
  HeartBeatMessage();
  virtual ~HeartBeatMessage();

  HeartBeatMessage(const HeartBeatMessage& from);

  inline HeartBeatMessage& operator=(const HeartBeatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatMessage(HeartBeatMessage&& from) noexcept
    : HeartBeatMessage() {
    *this = ::std::move(from);
  }

  inline HeartBeatMessage& operator=(HeartBeatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatMessage* internal_default_instance() {
    return reinterpret_cast<const HeartBeatMessage*>(
               &_HeartBeatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(HeartBeatMessage* other);
  friend void swap(HeartBeatMessage& a, HeartBeatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<HeartBeatMessage>(NULL);
  }

  HeartBeatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<HeartBeatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartBeatMessage& from);
  void MergeFrom(const HeartBeatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartBeatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.HeartBeatMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsHeartBeatMessageImpl();
};
// -------------------------------------------------------------------

class ResponseHeartBeatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ResponseHeartBeatMessage) */ {
 public:
  ResponseHeartBeatMessage();
  virtual ~ResponseHeartBeatMessage();

  ResponseHeartBeatMessage(const ResponseHeartBeatMessage& from);

  inline ResponseHeartBeatMessage& operator=(const ResponseHeartBeatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseHeartBeatMessage(ResponseHeartBeatMessage&& from) noexcept
    : ResponseHeartBeatMessage() {
    *this = ::std::move(from);
  }

  inline ResponseHeartBeatMessage& operator=(ResponseHeartBeatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeartBeatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeartBeatMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseHeartBeatMessage*>(
               &_ResponseHeartBeatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ResponseHeartBeatMessage* other);
  friend void swap(ResponseHeartBeatMessage& a, ResponseHeartBeatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeartBeatMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseHeartBeatMessage>(NULL);
  }

  ResponseHeartBeatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseHeartBeatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseHeartBeatMessage& from);
  void MergeFrom(const ResponseHeartBeatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseHeartBeatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ResponseHeartBeatMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseHeartBeatMessageImpl();
};
// -------------------------------------------------------------------

class LogoutMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.LogoutMessage) */ {
 public:
  LogoutMessage();
  virtual ~LogoutMessage();

  LogoutMessage(const LogoutMessage& from);

  inline LogoutMessage& operator=(const LogoutMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutMessage(LogoutMessage&& from) noexcept
    : LogoutMessage() {
    *this = ::std::move(from);
  }

  inline LogoutMessage& operator=(LogoutMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutMessage* internal_default_instance() {
    return reinterpret_cast<const LogoutMessage*>(
               &_LogoutMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(LogoutMessage* other);
  friend void swap(LogoutMessage& a, LogoutMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LogoutMessage>(NULL);
  }

  LogoutMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<LogoutMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutMessage& from);
  void MergeFrom(const LogoutMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LogoutMessage_OfflineMailState OfflineMailState;
  static const OfflineMailState Open =
    LogoutMessage_OfflineMailState_Open;
  static const OfflineMailState Close =
    LogoutMessage_OfflineMailState_Close;
  static inline bool OfflineMailState_IsValid(int value) {
    return LogoutMessage_OfflineMailState_IsValid(value);
  }
  static const OfflineMailState OfflineMailState_MIN =
    LogoutMessage_OfflineMailState_OfflineMailState_MIN;
  static const OfflineMailState OfflineMailState_MAX =
    LogoutMessage_OfflineMailState_OfflineMailState_MAX;
  static const int OfflineMailState_ARRAYSIZE =
    LogoutMessage_OfflineMailState_OfflineMailState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OfflineMailState_descriptor() {
    return LogoutMessage_OfflineMailState_descriptor();
  }
  static inline const ::std::string& OfflineMailState_Name(OfflineMailState value) {
    return LogoutMessage_OfflineMailState_Name(value);
  }
  static inline bool OfflineMailState_Parse(const ::std::string& name,
      OfflineMailState* value) {
    return LogoutMessage_OfflineMailState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional .kakaIM.Node.LogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  bool has_offlinemailestate() const;
  void clear_offlinemailestate();
  static const int kOfflineMaileStateFieldNumber = 2;
  ::kakaIM::Node::LogoutMessage_OfflineMailState offlinemailestate() const;
  void set_offlinemailestate(::kakaIM::Node::LogoutMessage_OfflineMailState value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.LogoutMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_offlinemailestate();
  void clear_has_offlinemailestate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int offlinemailestate_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsLogoutMessageImpl();
};
// -------------------------------------------------------------------

class ResponseLogoutMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ResponseLogoutMessage) */ {
 public:
  ResponseLogoutMessage();
  virtual ~ResponseLogoutMessage();

  ResponseLogoutMessage(const ResponseLogoutMessage& from);

  inline ResponseLogoutMessage& operator=(const ResponseLogoutMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseLogoutMessage(ResponseLogoutMessage&& from) noexcept
    : ResponseLogoutMessage() {
    *this = ::std::move(from);
  }

  inline ResponseLogoutMessage& operator=(ResponseLogoutMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseLogoutMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseLogoutMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseLogoutMessage*>(
               &_ResponseLogoutMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ResponseLogoutMessage* other);
  friend void swap(ResponseLogoutMessage& a, ResponseLogoutMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseLogoutMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseLogoutMessage>(NULL);
  }

  ResponseLogoutMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ResponseLogoutMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseLogoutMessage& from);
  void MergeFrom(const ResponseLogoutMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseLogoutMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResponseLogoutMessage_OfflineMailState OfflineMailState;
  static const OfflineMailState Open =
    ResponseLogoutMessage_OfflineMailState_Open;
  static const OfflineMailState Close =
    ResponseLogoutMessage_OfflineMailState_Close;
  static inline bool OfflineMailState_IsValid(int value) {
    return ResponseLogoutMessage_OfflineMailState_IsValid(value);
  }
  static const OfflineMailState OfflineMailState_MIN =
    ResponseLogoutMessage_OfflineMailState_OfflineMailState_MIN;
  static const OfflineMailState OfflineMailState_MAX =
    ResponseLogoutMessage_OfflineMailState_OfflineMailState_MAX;
  static const int OfflineMailState_ARRAYSIZE =
    ResponseLogoutMessage_OfflineMailState_OfflineMailState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OfflineMailState_descriptor() {
    return ResponseLogoutMessage_OfflineMailState_descriptor();
  }
  static inline const ::std::string& OfflineMailState_Name(OfflineMailState value) {
    return ResponseLogoutMessage_OfflineMailState_Name(value);
  }
  static inline bool OfflineMailState_Parse(const ::std::string& name,
      OfflineMailState* value) {
    return ResponseLogoutMessage_OfflineMailState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional .kakaIM.Node.ResponseLogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
  bool has_offlinemailestate() const;
  void clear_offlinemailestate();
  static const int kOfflineMaileStateFieldNumber = 2;
  ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState offlinemailestate() const;
  void set_offlinemailestate(::kakaIM::Node::ResponseLogoutMessage_OfflineMailState value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ResponseLogoutMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_offlinemailestate();
  void clear_has_offlinemailestate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int offlinemailestate_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsResponseLogoutMessageImpl();
};
// -------------------------------------------------------------------

class BuildingRelationshipRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.BuildingRelationshipRequestMessage) */ {
 public:
  BuildingRelationshipRequestMessage();
  virtual ~BuildingRelationshipRequestMessage();

  BuildingRelationshipRequestMessage(const BuildingRelationshipRequestMessage& from);

  inline BuildingRelationshipRequestMessage& operator=(const BuildingRelationshipRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildingRelationshipRequestMessage(BuildingRelationshipRequestMessage&& from) noexcept
    : BuildingRelationshipRequestMessage() {
    *this = ::std::move(from);
  }

  inline BuildingRelationshipRequestMessage& operator=(BuildingRelationshipRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildingRelationshipRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildingRelationshipRequestMessage* internal_default_instance() {
    return reinterpret_cast<const BuildingRelationshipRequestMessage*>(
               &_BuildingRelationshipRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(BuildingRelationshipRequestMessage* other);
  friend void swap(BuildingRelationshipRequestMessage& a, BuildingRelationshipRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildingRelationshipRequestMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BuildingRelationshipRequestMessage>(NULL);
  }

  BuildingRelationshipRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BuildingRelationshipRequestMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BuildingRelationshipRequestMessage& from);
  void MergeFrom(const BuildingRelationshipRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BuildingRelationshipRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string sponsorAccount = 3;
  bool has_sponsoraccount() const;
  void clear_sponsoraccount();
  static const int kSponsorAccountFieldNumber = 3;
  const ::std::string& sponsoraccount() const;
  void set_sponsoraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_sponsoraccount(::std::string&& value);
  #endif
  void set_sponsoraccount(const char* value);
  void set_sponsoraccount(const char* value, size_t size);
  ::std::string* mutable_sponsoraccount();
  ::std::string* release_sponsoraccount();
  void set_allocated_sponsoraccount(::std::string* sponsoraccount);

  // required string targetAccount = 4;
  bool has_targetaccount() const;
  void clear_targetaccount();
  static const int kTargetAccountFieldNumber = 4;
  const ::std::string& targetaccount() const;
  void set_targetaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_targetaccount(::std::string&& value);
  #endif
  void set_targetaccount(const char* value);
  void set_targetaccount(const char* value, size_t size);
  ::std::string* mutable_targetaccount();
  ::std::string* release_targetaccount();
  void set_allocated_targetaccount(::std::string* targetaccount);

  // required string introduction = 5;
  bool has_introduction() const;
  void clear_introduction();
  static const int kIntroductionFieldNumber = 5;
  const ::std::string& introduction() const;
  void set_introduction(const ::std::string& value);
  #if LANG_CXX11
  void set_introduction(::std::string&& value);
  #endif
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  ::std::string* mutable_introduction();
  ::std::string* release_introduction();
  void set_allocated_introduction(::std::string* introduction);

  // optional uint64 applicant_id = 2;
  bool has_applicant_id() const;
  void clear_applicant_id();
  static const int kApplicantIdFieldNumber = 2;
  ::google::protobuf::uint64 applicant_id() const;
  void set_applicant_id(::google::protobuf::uint64 value);

  // optional uint64 messageID = 6;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 6;
  ::google::protobuf::uint64 messageid() const;
  void set_messageid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.BuildingRelationshipRequestMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_applicant_id();
  void clear_has_applicant_id();
  void set_has_sponsoraccount();
  void clear_has_sponsoraccount();
  void set_has_targetaccount();
  void clear_has_targetaccount();
  void set_has_introduction();
  void clear_has_introduction();
  void set_has_messageid();
  void clear_has_messageid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr sponsoraccount_;
  ::google::protobuf::internal::ArenaStringPtr targetaccount_;
  ::google::protobuf::internal::ArenaStringPtr introduction_;
  ::google::protobuf::uint64 applicant_id_;
  ::google::protobuf::uint64 messageid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsBuildingRelationshipRequestMessageImpl();
};
// -------------------------------------------------------------------

class BuildingRelationshipAnswerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.BuildingRelationshipAnswerMessage) */ {
 public:
  BuildingRelationshipAnswerMessage();
  virtual ~BuildingRelationshipAnswerMessage();

  BuildingRelationshipAnswerMessage(const BuildingRelationshipAnswerMessage& from);

  inline BuildingRelationshipAnswerMessage& operator=(const BuildingRelationshipAnswerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildingRelationshipAnswerMessage(BuildingRelationshipAnswerMessage&& from) noexcept
    : BuildingRelationshipAnswerMessage() {
    *this = ::std::move(from);
  }

  inline BuildingRelationshipAnswerMessage& operator=(BuildingRelationshipAnswerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildingRelationshipAnswerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildingRelationshipAnswerMessage* internal_default_instance() {
    return reinterpret_cast<const BuildingRelationshipAnswerMessage*>(
               &_BuildingRelationshipAnswerMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(BuildingRelationshipAnswerMessage* other);
  friend void swap(BuildingRelationshipAnswerMessage& a, BuildingRelationshipAnswerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildingRelationshipAnswerMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BuildingRelationshipAnswerMessage>(NULL);
  }

  BuildingRelationshipAnswerMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BuildingRelationshipAnswerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BuildingRelationshipAnswerMessage& from);
  void MergeFrom(const BuildingRelationshipAnswerMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BuildingRelationshipAnswerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswer;
  static const BuildingRelationshipAnswer Accept =
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Accept;
  static const BuildingRelationshipAnswer Reject =
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Reject;
  static inline bool BuildingRelationshipAnswer_IsValid(int value) {
    return BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_IsValid(value);
  }
  static const BuildingRelationshipAnswer BuildingRelationshipAnswer_MIN =
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_MIN;
  static const BuildingRelationshipAnswer BuildingRelationshipAnswer_MAX =
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_MAX;
  static const int BuildingRelationshipAnswer_ARRAYSIZE =
    BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_BuildingRelationshipAnswer_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BuildingRelationshipAnswer_descriptor() {
    return BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_descriptor();
  }
  static inline const ::std::string& BuildingRelationshipAnswer_Name(BuildingRelationshipAnswer value) {
    return BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Name(value);
  }
  static inline bool BuildingRelationshipAnswer_Parse(const ::std::string& name,
      BuildingRelationshipAnswer* value) {
    return BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string targetAccount = 3;
  bool has_targetaccount() const;
  void clear_targetaccount();
  static const int kTargetAccountFieldNumber = 3;
  const ::std::string& targetaccount() const;
  void set_targetaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_targetaccount(::std::string&& value);
  #endif
  void set_targetaccount(const char* value);
  void set_targetaccount(const char* value, size_t size);
  ::std::string* mutable_targetaccount();
  ::std::string* release_targetaccount();
  void set_allocated_targetaccount(::std::string* targetaccount);

  // required string sponsorAccount = 4;
  bool has_sponsoraccount() const;
  void clear_sponsoraccount();
  static const int kSponsorAccountFieldNumber = 4;
  const ::std::string& sponsoraccount() const;
  void set_sponsoraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_sponsoraccount(::std::string&& value);
  #endif
  void set_sponsoraccount(const char* value);
  void set_sponsoraccount(const char* value, size_t size);
  ::std::string* mutable_sponsoraccount();
  ::std::string* release_sponsoraccount();
  void set_allocated_sponsoraccount(::std::string* sponsoraccount);

  // required uint64 applicant_id = 2;
  bool has_applicant_id() const;
  void clear_applicant_id();
  static const int kApplicantIdFieldNumber = 2;
  ::google::protobuf::uint64 applicant_id() const;
  void set_applicant_id(::google::protobuf::uint64 value);

  // optional uint64 messageID = 6;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 6;
  ::google::protobuf::uint64 messageid() const;
  void set_messageid(::google::protobuf::uint64 value);

  // required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
  bool has_answer() const;
  void clear_answer();
  static const int kAnswerFieldNumber = 5;
  ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer answer() const;
  void set_answer(::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.BuildingRelationshipAnswerMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_applicant_id();
  void clear_has_applicant_id();
  void set_has_targetaccount();
  void clear_has_targetaccount();
  void set_has_sponsoraccount();
  void clear_has_sponsoraccount();
  void set_has_answer();
  void clear_has_answer();
  void set_has_messageid();
  void clear_has_messageid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr targetaccount_;
  ::google::protobuf::internal::ArenaStringPtr sponsoraccount_;
  ::google::protobuf::uint64 applicant_id_;
  ::google::protobuf::uint64 messageid_;
  int answer_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsBuildingRelationshipAnswerMessageImpl();
};
// -------------------------------------------------------------------

class DestroyingRelationshipRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.DestroyingRelationshipRequestMessage) */ {
 public:
  DestroyingRelationshipRequestMessage();
  virtual ~DestroyingRelationshipRequestMessage();

  DestroyingRelationshipRequestMessage(const DestroyingRelationshipRequestMessage& from);

  inline DestroyingRelationshipRequestMessage& operator=(const DestroyingRelationshipRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DestroyingRelationshipRequestMessage(DestroyingRelationshipRequestMessage&& from) noexcept
    : DestroyingRelationshipRequestMessage() {
    *this = ::std::move(from);
  }

  inline DestroyingRelationshipRequestMessage& operator=(DestroyingRelationshipRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyingRelationshipRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyingRelationshipRequestMessage* internal_default_instance() {
    return reinterpret_cast<const DestroyingRelationshipRequestMessage*>(
               &_DestroyingRelationshipRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DestroyingRelationshipRequestMessage* other);
  friend void swap(DestroyingRelationshipRequestMessage& a, DestroyingRelationshipRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DestroyingRelationshipRequestMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<DestroyingRelationshipRequestMessage>(NULL);
  }

  DestroyingRelationshipRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<DestroyingRelationshipRequestMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyingRelationshipRequestMessage& from);
  void MergeFrom(const DestroyingRelationshipRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyingRelationshipRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string sponsorAccount = 2;
  bool has_sponsoraccount() const;
  void clear_sponsoraccount();
  static const int kSponsorAccountFieldNumber = 2;
  const ::std::string& sponsoraccount() const;
  void set_sponsoraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_sponsoraccount(::std::string&& value);
  #endif
  void set_sponsoraccount(const char* value);
  void set_sponsoraccount(const char* value, size_t size);
  ::std::string* mutable_sponsoraccount();
  ::std::string* release_sponsoraccount();
  void set_allocated_sponsoraccount(::std::string* sponsoraccount);

  // required string targetAccount = 3;
  bool has_targetaccount() const;
  void clear_targetaccount();
  static const int kTargetAccountFieldNumber = 3;
  const ::std::string& targetaccount() const;
  void set_targetaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_targetaccount(::std::string&& value);
  #endif
  void set_targetaccount(const char* value);
  void set_targetaccount(const char* value, size_t size);
  ::std::string* mutable_targetaccount();
  ::std::string* release_targetaccount();
  void set_allocated_targetaccount(::std::string* targetaccount);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.DestroyingRelationshipRequestMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_sponsoraccount();
  void clear_has_sponsoraccount();
  void set_has_targetaccount();
  void clear_has_targetaccount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr sponsoraccount_;
  ::google::protobuf::internal::ArenaStringPtr targetaccount_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsDestroyingRelationshipRequestMessageImpl();
};
// -------------------------------------------------------------------

class DestoryingRelationshipResponseMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.DestoryingRelationshipResponseMessage) */ {
 public:
  DestoryingRelationshipResponseMessage();
  virtual ~DestoryingRelationshipResponseMessage();

  DestoryingRelationshipResponseMessage(const DestoryingRelationshipResponseMessage& from);

  inline DestoryingRelationshipResponseMessage& operator=(const DestoryingRelationshipResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DestoryingRelationshipResponseMessage(DestoryingRelationshipResponseMessage&& from) noexcept
    : DestoryingRelationshipResponseMessage() {
    *this = ::std::move(from);
  }

  inline DestoryingRelationshipResponseMessage& operator=(DestoryingRelationshipResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestoryingRelationshipResponseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestoryingRelationshipResponseMessage* internal_default_instance() {
    return reinterpret_cast<const DestoryingRelationshipResponseMessage*>(
               &_DestoryingRelationshipResponseMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DestoryingRelationshipResponseMessage* other);
  friend void swap(DestoryingRelationshipResponseMessage& a, DestoryingRelationshipResponseMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DestoryingRelationshipResponseMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<DestoryingRelationshipResponseMessage>(NULL);
  }

  DestoryingRelationshipResponseMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<DestoryingRelationshipResponseMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestoryingRelationshipResponseMessage& from);
  void MergeFrom(const DestoryingRelationshipResponseMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestoryingRelationshipResponseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponse;
  static const DestoryingRelationshipResponse Success =
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Success;
  static const DestoryingRelationshipResponse ServerInteralError =
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_ServerInteralError;
  static const DestoryingRelationshipResponse IllegalOperation =
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IllegalOperation;
  static inline bool DestoryingRelationshipResponse_IsValid(int value) {
    return DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IsValid(value);
  }
  static const DestoryingRelationshipResponse DestoryingRelationshipResponse_MIN =
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_MIN;
  static const DestoryingRelationshipResponse DestoryingRelationshipResponse_MAX =
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_MAX;
  static const int DestoryingRelationshipResponse_ARRAYSIZE =
    DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_DestoryingRelationshipResponse_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DestoryingRelationshipResponse_descriptor() {
    return DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_descriptor();
  }
  static inline const ::std::string& DestoryingRelationshipResponse_Name(DestoryingRelationshipResponse value) {
    return DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Name(value);
  }
  static inline bool DestoryingRelationshipResponse_Parse(const ::std::string& name,
      DestoryingRelationshipResponse* value) {
    return DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string sponsorAccount = 2;
  bool has_sponsoraccount() const;
  void clear_sponsoraccount();
  static const int kSponsorAccountFieldNumber = 2;
  const ::std::string& sponsoraccount() const;
  void set_sponsoraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_sponsoraccount(::std::string&& value);
  #endif
  void set_sponsoraccount(const char* value);
  void set_sponsoraccount(const char* value, size_t size);
  ::std::string* mutable_sponsoraccount();
  ::std::string* release_sponsoraccount();
  void set_allocated_sponsoraccount(::std::string* sponsoraccount);

  // required string targetAccount = 3;
  bool has_targetaccount() const;
  void clear_targetaccount();
  static const int kTargetAccountFieldNumber = 3;
  const ::std::string& targetaccount() const;
  void set_targetaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_targetaccount(::std::string&& value);
  #endif
  void set_targetaccount(const char* value);
  void set_targetaccount(const char* value, size_t size);
  ::std::string* mutable_targetaccount();
  ::std::string* release_targetaccount();
  void set_allocated_targetaccount(::std::string* targetaccount);

  // required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 4;
  ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse response() const;
  void set_response(::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.DestoryingRelationshipResponseMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_sponsoraccount();
  void clear_has_sponsoraccount();
  void set_has_targetaccount();
  void clear_has_targetaccount();
  void set_has_response();
  void clear_has_response();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr sponsoraccount_;
  ::google::protobuf::internal::ArenaStringPtr targetaccount_;
  int response_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsDestoryingRelationshipResponseMessageImpl();
};
// -------------------------------------------------------------------

class FriendListRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FriendListRequestMessage) */ {
 public:
  FriendListRequestMessage();
  virtual ~FriendListRequestMessage();

  FriendListRequestMessage(const FriendListRequestMessage& from);

  inline FriendListRequestMessage& operator=(const FriendListRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendListRequestMessage(FriendListRequestMessage&& from) noexcept
    : FriendListRequestMessage() {
    *this = ::std::move(from);
  }

  inline FriendListRequestMessage& operator=(FriendListRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListRequestMessage* internal_default_instance() {
    return reinterpret_cast<const FriendListRequestMessage*>(
               &_FriendListRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(FriendListRequestMessage* other);
  friend void swap(FriendListRequestMessage& a, FriendListRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendListRequestMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FriendListRequestMessage>(NULL);
  }

  FriendListRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FriendListRequestMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendListRequestMessage& from);
  void MergeFrom(const FriendListRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendListRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FriendListRequestMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListRequestMessageImpl();
};
// -------------------------------------------------------------------

class FriendListItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FriendListItem) */ {
 public:
  FriendListItem();
  virtual ~FriendListItem();

  FriendListItem(const FriendListItem& from);

  inline FriendListItem& operator=(const FriendListItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendListItem(FriendListItem&& from) noexcept
    : FriendListItem() {
    *this = ::std::move(from);
  }

  inline FriendListItem& operator=(FriendListItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListItem* internal_default_instance() {
    return reinterpret_cast<const FriendListItem*>(
               &_FriendListItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(FriendListItem* other);
  friend void swap(FriendListItem& a, FriendListItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendListItem* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FriendListItem>(NULL);
  }

  FriendListItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FriendListItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendListItem& from);
  void MergeFrom(const FriendListItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendListItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string friendAccount = 1;
  bool has_friendaccount() const;
  void clear_friendaccount();
  static const int kFriendAccountFieldNumber = 1;
  const ::std::string& friendaccount() const;
  void set_friendaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_friendaccount(::std::string&& value);
  #endif
  void set_friendaccount(const char* value);
  void set_friendaccount(const char* value, size_t size);
  ::std::string* mutable_friendaccount();
  ::std::string* release_friendaccount();
  void set_allocated_friendaccount(::std::string* friendaccount);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FriendListItem)
 private:
  void set_has_friendaccount();
  void clear_has_friendaccount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr friendaccount_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListItemImpl();
};
// -------------------------------------------------------------------

class FriendListResponseMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FriendListResponseMessage) */ {
 public:
  FriendListResponseMessage();
  virtual ~FriendListResponseMessage();

  FriendListResponseMessage(const FriendListResponseMessage& from);

  inline FriendListResponseMessage& operator=(const FriendListResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendListResponseMessage(FriendListResponseMessage&& from) noexcept
    : FriendListResponseMessage() {
    *this = ::std::move(from);
  }

  inline FriendListResponseMessage& operator=(FriendListResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListResponseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListResponseMessage* internal_default_instance() {
    return reinterpret_cast<const FriendListResponseMessage*>(
               &_FriendListResponseMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(FriendListResponseMessage* other);
  friend void swap(FriendListResponseMessage& a, FriendListResponseMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendListResponseMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FriendListResponseMessage>(NULL);
  }

  FriendListResponseMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FriendListResponseMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendListResponseMessage& from);
  void MergeFrom(const FriendListResponseMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendListResponseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kakaIM.Node.FriendListItem friend = 2;
  int friend__size() const;
  void clear_friend_();
  static const int kFriendFieldNumber = 2;
  ::kakaIM::Node::FriendListItem* mutable_friend_(int index);
  ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FriendListItem >*
      mutable_friend_();
  const ::kakaIM::Node::FriendListItem& friend_(int index) const;
  ::kakaIM::Node::FriendListItem* add_friend_();
  const ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FriendListItem >&
      friend_() const;

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FriendListResponseMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FriendListItem > friend__;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFriendListResponseMessageImpl();
};
// -------------------------------------------------------------------

class OnlineStateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.OnlineStateMessage) */ {
 public:
  OnlineStateMessage();
  virtual ~OnlineStateMessage();

  OnlineStateMessage(const OnlineStateMessage& from);

  inline OnlineStateMessage& operator=(const OnlineStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlineStateMessage(OnlineStateMessage&& from) noexcept
    : OnlineStateMessage() {
    *this = ::std::move(from);
  }

  inline OnlineStateMessage& operator=(OnlineStateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineStateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineStateMessage* internal_default_instance() {
    return reinterpret_cast<const OnlineStateMessage*>(
               &_OnlineStateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(OnlineStateMessage* other);
  friend void swap(OnlineStateMessage& a, OnlineStateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlineStateMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<OnlineStateMessage>(NULL);
  }

  OnlineStateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<OnlineStateMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnlineStateMessage& from);
  void MergeFrom(const OnlineStateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnlineStateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef OnlineStateMessage_OnlineState OnlineState;
  static const OnlineState Online =
    OnlineStateMessage_OnlineState_Online;
  static const OnlineState Offline =
    OnlineStateMessage_OnlineState_Offline;
  static const OnlineState Invisible =
    OnlineStateMessage_OnlineState_Invisible;
  static inline bool OnlineState_IsValid(int value) {
    return OnlineStateMessage_OnlineState_IsValid(value);
  }
  static const OnlineState OnlineState_MIN =
    OnlineStateMessage_OnlineState_OnlineState_MIN;
  static const OnlineState OnlineState_MAX =
    OnlineStateMessage_OnlineState_OnlineState_MAX;
  static const int OnlineState_ARRAYSIZE =
    OnlineStateMessage_OnlineState_OnlineState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OnlineState_descriptor() {
    return OnlineStateMessage_OnlineState_descriptor();
  }
  static inline const ::std::string& OnlineState_Name(OnlineState value) {
    return OnlineStateMessage_OnlineState_Name(value);
  }
  static inline bool OnlineState_Parse(const ::std::string& name,
      OnlineState* value) {
    return OnlineStateMessage_OnlineState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userAccount = 2;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 2;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
  bool has_userstate() const;
  void clear_userstate();
  static const int kUserStateFieldNumber = 3;
  ::kakaIM::Node::OnlineStateMessage_OnlineState userstate() const;
  void set_userstate(::kakaIM::Node::OnlineStateMessage_OnlineState value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.OnlineStateMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_userstate();
  void clear_has_userstate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  int userstate_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsOnlineStateMessageImpl();
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatMessage>(NULL);
  }

  ChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string senderAccount = 2;
  bool has_senderaccount() const;
  void clear_senderaccount();
  static const int kSenderAccountFieldNumber = 2;
  const ::std::string& senderaccount() const;
  void set_senderaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_senderaccount(::std::string&& value);
  #endif
  void set_senderaccount(const char* value);
  void set_senderaccount(const char* value, size_t size);
  ::std::string* mutable_senderaccount();
  ::std::string* release_senderaccount();
  void set_allocated_senderaccount(::std::string* senderaccount);

  // required string receiverAccount = 3;
  bool has_receiveraccount() const;
  void clear_receiveraccount();
  static const int kReceiverAccountFieldNumber = 3;
  const ::std::string& receiveraccount() const;
  void set_receiveraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_receiveraccount(::std::string&& value);
  #endif
  void set_receiveraccount(const char* value);
  void set_receiveraccount(const char* value, size_t size);
  ::std::string* mutable_receiveraccount();
  ::std::string* release_receiveraccount();
  void set_allocated_receiveraccount(::std::string* receiveraccount);

  // required string content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required string timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // optional uint64 messageID = 6;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 6;
  ::google::protobuf::uint64 messageid() const;
  void set_messageid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_senderaccount();
  void clear_has_senderaccount();
  void set_has_receiveraccount();
  void clear_has_receiveraccount();
  void set_has_content();
  void clear_has_content();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_messageid();
  void clear_has_messageid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr senderaccount_;
  ::google::protobuf::internal::ArenaStringPtr receiveraccount_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::uint64 messageid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatMessageImpl();
};
// -------------------------------------------------------------------

class NotificationMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.NotificationMessage) */ {
 public:
  NotificationMessage();
  virtual ~NotificationMessage();

  NotificationMessage(const NotificationMessage& from);

  inline NotificationMessage& operator=(const NotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationMessage(NotificationMessage&& from) noexcept
    : NotificationMessage() {
    *this = ::std::move(from);
  }

  inline NotificationMessage& operator=(NotificationMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationMessage* internal_default_instance() {
    return reinterpret_cast<const NotificationMessage*>(
               &_NotificationMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(NotificationMessage* other);
  friend void swap(NotificationMessage& a, NotificationMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<NotificationMessage>(NULL);
  }

  NotificationMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<NotificationMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotificationMessage& from);
  void MergeFrom(const NotificationMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotificationMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NotificationMessage_NotificationMessageType NotificationMessageType;
  static const NotificationMessageType SystemNotificationMessageType =
    NotificationMessage_NotificationMessageType_SystemNotificationMessageType;
  static inline bool NotificationMessageType_IsValid(int value) {
    return NotificationMessage_NotificationMessageType_IsValid(value);
  }
  static const NotificationMessageType NotificationMessageType_MIN =
    NotificationMessage_NotificationMessageType_NotificationMessageType_MIN;
  static const NotificationMessageType NotificationMessageType_MAX =
    NotificationMessage_NotificationMessageType_NotificationMessageType_MAX;
  static const int NotificationMessageType_ARRAYSIZE =
    NotificationMessage_NotificationMessageType_NotificationMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NotificationMessageType_descriptor() {
    return NotificationMessage_NotificationMessageType_descriptor();
  }
  static inline const ::std::string& NotificationMessageType_Name(NotificationMessageType value) {
    return NotificationMessage_NotificationMessageType_Name(value);
  }
  static inline bool NotificationMessageType_Parse(const ::std::string& name,
      NotificationMessageType* value) {
    return NotificationMessage_NotificationMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 messageID = 2;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  ::google::protobuf::uint64 messageid() const;
  void set_messageid(::google::protobuf::uint64 value);

  // required .kakaIM.Node.NotificationMessage.NotificationMessageType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::kakaIM::Node::NotificationMessage_NotificationMessageType type() const;
  void set_type(::kakaIM::Node::NotificationMessage_NotificationMessageType value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.NotificationMessage)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_messageid();
  void clear_has_messageid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 messageid_;
  int type_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsNotificationMessageImpl();
};
// -------------------------------------------------------------------

class PullChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.PullChatMessage) */ {
 public:
  PullChatMessage();
  virtual ~PullChatMessage();

  PullChatMessage(const PullChatMessage& from);

  inline PullChatMessage& operator=(const PullChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullChatMessage(PullChatMessage&& from) noexcept
    : PullChatMessage() {
    *this = ::std::move(from);
  }

  inline PullChatMessage& operator=(PullChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PullChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullChatMessage* internal_default_instance() {
    return reinterpret_cast<const PullChatMessage*>(
               &_PullChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(PullChatMessage* other);
  friend void swap(PullChatMessage& a, PullChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullChatMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PullChatMessage>(NULL);
  }

  PullChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PullChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullChatMessage& from);
  void MergeFrom(const PullChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required uint64 messageID = 2;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  ::google::protobuf::uint64 messageid() const;
  void set_messageid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.PullChatMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_messageid();
  void clear_has_messageid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::uint64 messageid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsPullChatMessageImpl();
};
// -------------------------------------------------------------------

class FetchUserVCardMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchUserVCardMessage) */ {
 public:
  FetchUserVCardMessage();
  virtual ~FetchUserVCardMessage();

  FetchUserVCardMessage(const FetchUserVCardMessage& from);

  inline FetchUserVCardMessage& operator=(const FetchUserVCardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchUserVCardMessage(FetchUserVCardMessage&& from) noexcept
    : FetchUserVCardMessage() {
    *this = ::std::move(from);
  }

  inline FetchUserVCardMessage& operator=(FetchUserVCardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchUserVCardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchUserVCardMessage* internal_default_instance() {
    return reinterpret_cast<const FetchUserVCardMessage*>(
               &_FetchUserVCardMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(FetchUserVCardMessage* other);
  friend void swap(FetchUserVCardMessage& a, FetchUserVCardMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchUserVCardMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchUserVCardMessage>(NULL);
  }

  FetchUserVCardMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchUserVCardMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchUserVCardMessage& from);
  void MergeFrom(const FetchUserVCardMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchUserVCardMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userID = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchUserVCardMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_userid();
  void clear_has_userid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchUserVCardMessageImpl();
};
// -------------------------------------------------------------------

class UserVCardResponseMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.UserVCardResponseMessage) */ {
 public:
  UserVCardResponseMessage();
  virtual ~UserVCardResponseMessage();

  UserVCardResponseMessage(const UserVCardResponseMessage& from);

  inline UserVCardResponseMessage& operator=(const UserVCardResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserVCardResponseMessage(UserVCardResponseMessage&& from) noexcept
    : UserVCardResponseMessage() {
    *this = ::std::move(from);
  }

  inline UserVCardResponseMessage& operator=(UserVCardResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserVCardResponseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserVCardResponseMessage* internal_default_instance() {
    return reinterpret_cast<const UserVCardResponseMessage*>(
               &_UserVCardResponseMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(UserVCardResponseMessage* other);
  friend void swap(UserVCardResponseMessage& a, UserVCardResponseMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserVCardResponseMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserVCardResponseMessage>(NULL);
  }

  UserVCardResponseMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserVCardResponseMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserVCardResponseMessage& from);
  void MergeFrom(const UserVCardResponseMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserVCardResponseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userID = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string nickname = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string mood = 5;
  bool has_mood() const;
  void clear_mood();
  static const int kMoodFieldNumber = 5;
  const ::std::string& mood() const;
  void set_mood(const ::std::string& value);
  #if LANG_CXX11
  void set_mood(::std::string&& value);
  #endif
  void set_mood(const char* value);
  void set_mood(const char* value, size_t size);
  ::std::string* mutable_mood();
  ::std::string* release_mood();
  void set_allocated_mood(::std::string* mood);

  // optional bytes avator = 6;
  bool has_avator() const;
  void clear_avator();
  static const int kAvatorFieldNumber = 6;
  const ::std::string& avator() const;
  void set_avator(const ::std::string& value);
  #if LANG_CXX11
  void set_avator(::std::string&& value);
  #endif
  void set_avator(const char* value);
  void set_avator(const void* value, size_t size);
  ::std::string* mutable_avator();
  ::std::string* release_avator();
  void set_allocated_avator(::std::string* avator);

  // required .kakaIM.Node.UserGenderType gender = 4;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 4;
  ::kakaIM::Node::UserGenderType gender() const;
  void set_gender(::kakaIM::Node::UserGenderType value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.UserVCardResponseMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_gender();
  void clear_has_gender();
  void set_has_mood();
  void clear_has_mood();
  void set_has_avator();
  void clear_has_avator();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr mood_;
  ::google::protobuf::internal::ArenaStringPtr avator_;
  int gender_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsUserVCardResponseMessageImpl();
};
// -------------------------------------------------------------------

class UpdateUserVCardMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.UpdateUserVCardMessage) */ {
 public:
  UpdateUserVCardMessage();
  virtual ~UpdateUserVCardMessage();

  UpdateUserVCardMessage(const UpdateUserVCardMessage& from);

  inline UpdateUserVCardMessage& operator=(const UpdateUserVCardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateUserVCardMessage(UpdateUserVCardMessage&& from) noexcept
    : UpdateUserVCardMessage() {
    *this = ::std::move(from);
  }

  inline UpdateUserVCardMessage& operator=(UpdateUserVCardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUserVCardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUserVCardMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateUserVCardMessage*>(
               &_UpdateUserVCardMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(UpdateUserVCardMessage* other);
  friend void swap(UpdateUserVCardMessage& a, UpdateUserVCardMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserVCardMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateUserVCardMessage>(NULL);
  }

  UpdateUserVCardMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateUserVCardMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateUserVCardMessage& from);
  void MergeFrom(const UpdateUserVCardMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateUserVCardMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string mood = 4;
  bool has_mood() const;
  void clear_mood();
  static const int kMoodFieldNumber = 4;
  const ::std::string& mood() const;
  void set_mood(const ::std::string& value);
  #if LANG_CXX11
  void set_mood(::std::string&& value);
  #endif
  void set_mood(const char* value);
  void set_mood(const char* value, size_t size);
  ::std::string* mutable_mood();
  ::std::string* release_mood();
  void set_allocated_mood(::std::string* mood);

  // optional bytes avator = 5;
  bool has_avator() const;
  void clear_avator();
  static const int kAvatorFieldNumber = 5;
  const ::std::string& avator() const;
  void set_avator(const ::std::string& value);
  #if LANG_CXX11
  void set_avator(::std::string&& value);
  #endif
  void set_avator(const char* value);
  void set_avator(const void* value, size_t size);
  ::std::string* mutable_avator();
  ::std::string* release_avator();
  void set_allocated_avator(::std::string* avator);

  // optional .kakaIM.Node.UserGenderType gender = 3;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 3;
  ::kakaIM::Node::UserGenderType gender() const;
  void set_gender(::kakaIM::Node::UserGenderType value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.UpdateUserVCardMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_gender();
  void clear_has_gender();
  void set_has_mood();
  void clear_has_mood();
  void set_has_avator();
  void clear_has_avator();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr mood_;
  ::google::protobuf::internal::ArenaStringPtr avator_;
  int gender_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateUserVCardMessageImpl();
};
// -------------------------------------------------------------------

class UpdateUserVCardMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.UpdateUserVCardMessageResponse) */ {
 public:
  UpdateUserVCardMessageResponse();
  virtual ~UpdateUserVCardMessageResponse();

  UpdateUserVCardMessageResponse(const UpdateUserVCardMessageResponse& from);

  inline UpdateUserVCardMessageResponse& operator=(const UpdateUserVCardMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateUserVCardMessageResponse(UpdateUserVCardMessageResponse&& from) noexcept
    : UpdateUserVCardMessageResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserVCardMessageResponse& operator=(UpdateUserVCardMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateUserVCardMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateUserVCardMessageResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserVCardMessageResponse*>(
               &_UpdateUserVCardMessageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(UpdateUserVCardMessageResponse* other);
  friend void swap(UpdateUserVCardMessageResponse& a, UpdateUserVCardMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserVCardMessageResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateUserVCardMessageResponse>(NULL);
  }

  UpdateUserVCardMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateUserVCardMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateUserVCardMessageResponse& from);
  void MergeFrom(const UpdateUserVCardMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateUserVCardMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardStateType;
  static const UpdateUserVCardStateType Success =
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Success;
  static const UpdateUserVCardStateType Failure =
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Failure;
  static inline bool UpdateUserVCardStateType_IsValid(int value) {
    return UpdateUserVCardMessageResponse_UpdateUserVCardStateType_IsValid(value);
  }
  static const UpdateUserVCardStateType UpdateUserVCardStateType_MIN =
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_MIN;
  static const UpdateUserVCardStateType UpdateUserVCardStateType_MAX =
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_MAX;
  static const int UpdateUserVCardStateType_ARRAYSIZE =
    UpdateUserVCardMessageResponse_UpdateUserVCardStateType_UpdateUserVCardStateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateUserVCardStateType_descriptor() {
    return UpdateUserVCardMessageResponse_UpdateUserVCardStateType_descriptor();
  }
  static inline const ::std::string& UpdateUserVCardStateType_Name(UpdateUserVCardStateType value) {
    return UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Name(value);
  }
  static inline bool UpdateUserVCardStateType_Parse(const ::std::string& name,
      UpdateUserVCardStateType* value) {
    return UpdateUserVCardMessageResponse_UpdateUserVCardStateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType state() const;
  void set_state(::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.UpdateUserVCardMessageResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  int state_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateUserVCardMessageResponseImpl();
};
// -------------------------------------------------------------------

class ChatGroupCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupCreateRequest) */ {
 public:
  ChatGroupCreateRequest();
  virtual ~ChatGroupCreateRequest();

  ChatGroupCreateRequest(const ChatGroupCreateRequest& from);

  inline ChatGroupCreateRequest& operator=(const ChatGroupCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupCreateRequest(ChatGroupCreateRequest&& from) noexcept
    : ChatGroupCreateRequest() {
    *this = ::std::move(from);
  }

  inline ChatGroupCreateRequest& operator=(ChatGroupCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ChatGroupCreateRequest*>(
               &_ChatGroupCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(ChatGroupCreateRequest* other);
  friend void swap(ChatGroupCreateRequest& a, ChatGroupCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupCreateRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupCreateRequest>(NULL);
  }

  ChatGroupCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupCreateRequest& from);
  void MergeFrom(const ChatGroupCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupName = 2;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // required string groupDescrption = 3;
  bool has_groupdescrption() const;
  void clear_groupdescrption();
  static const int kGroupDescrptionFieldNumber = 3;
  const ::std::string& groupdescrption() const;
  void set_groupdescrption(const ::std::string& value);
  #if LANG_CXX11
  void set_groupdescrption(::std::string&& value);
  #endif
  void set_groupdescrption(const char* value);
  void set_groupdescrption(const char* value, size_t size);
  ::std::string* mutable_groupdescrption();
  ::std::string* release_groupdescrption();
  void set_allocated_groupdescrption(::std::string* groupdescrption);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupCreateRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_groupdescrption();
  void clear_has_groupdescrption();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr groupdescrption_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupCreateRequestImpl();
};
// -------------------------------------------------------------------

class ChatGroupCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupCreateResponse) */ {
 public:
  ChatGroupCreateResponse();
  virtual ~ChatGroupCreateResponse();

  ChatGroupCreateResponse(const ChatGroupCreateResponse& from);

  inline ChatGroupCreateResponse& operator=(const ChatGroupCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupCreateResponse(ChatGroupCreateResponse&& from) noexcept
    : ChatGroupCreateResponse() {
    *this = ::std::move(from);
  }

  inline ChatGroupCreateResponse& operator=(ChatGroupCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupCreateResponse* internal_default_instance() {
    return reinterpret_cast<const ChatGroupCreateResponse*>(
               &_ChatGroupCreateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ChatGroupCreateResponse* other);
  friend void swap(ChatGroupCreateResponse& a, ChatGroupCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupCreateResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupCreateResponse>(NULL);
  }

  ChatGroupCreateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupCreateResponse& from);
  void MergeFrom(const ChatGroupCreateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponseResult;
  static const ChatGroupCreateResponseResult Success =
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_Success;
  static const ChatGroupCreateResponseResult Failed =
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_Failed;
  static inline bool ChatGroupCreateResponseResult_IsValid(int value) {
    return ChatGroupCreateResponse_ChatGroupCreateResponseResult_IsValid(value);
  }
  static const ChatGroupCreateResponseResult ChatGroupCreateResponseResult_MIN =
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_MIN;
  static const ChatGroupCreateResponseResult ChatGroupCreateResponseResult_MAX =
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_MAX;
  static const int ChatGroupCreateResponseResult_ARRAYSIZE =
    ChatGroupCreateResponse_ChatGroupCreateResponseResult_ChatGroupCreateResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatGroupCreateResponseResult_descriptor() {
    return ChatGroupCreateResponse_ChatGroupCreateResponseResult_descriptor();
  }
  static inline const ::std::string& ChatGroupCreateResponseResult_Name(ChatGroupCreateResponseResult value) {
    return ChatGroupCreateResponse_ChatGroupCreateResponseResult_Name(value);
  }
  static inline bool ChatGroupCreateResponseResult_Parse(const ::std::string& name,
      ChatGroupCreateResponseResult* value) {
    return ChatGroupCreateResponse_ChatGroupCreateResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // optional string groupId = 3;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult result() const;
  void set_result(::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupCreateResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_result();
  void clear_has_result();
  void set_has_groupid();
  void clear_has_groupid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupCreateResponseImpl();
};
// -------------------------------------------------------------------

class ChatGroupDisbandRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupDisbandRequest) */ {
 public:
  ChatGroupDisbandRequest();
  virtual ~ChatGroupDisbandRequest();

  ChatGroupDisbandRequest(const ChatGroupDisbandRequest& from);

  inline ChatGroupDisbandRequest& operator=(const ChatGroupDisbandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupDisbandRequest(ChatGroupDisbandRequest&& from) noexcept
    : ChatGroupDisbandRequest() {
    *this = ::std::move(from);
  }

  inline ChatGroupDisbandRequest& operator=(ChatGroupDisbandRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupDisbandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupDisbandRequest* internal_default_instance() {
    return reinterpret_cast<const ChatGroupDisbandRequest*>(
               &_ChatGroupDisbandRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ChatGroupDisbandRequest* other);
  friend void swap(ChatGroupDisbandRequest& a, ChatGroupDisbandRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupDisbandRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupDisbandRequest>(NULL);
  }

  ChatGroupDisbandRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupDisbandRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupDisbandRequest& from);
  void MergeFrom(const ChatGroupDisbandRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupDisbandRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required string operatorId = 3;
  bool has_operatorid() const;
  void clear_operatorid();
  static const int kOperatorIdFieldNumber = 3;
  const ::std::string& operatorid() const;
  void set_operatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_operatorid(::std::string&& value);
  #endif
  void set_operatorid(const char* value);
  void set_operatorid(const char* value, size_t size);
  ::std::string* mutable_operatorid();
  ::std::string* release_operatorid();
  void set_allocated_operatorid(::std::string* operatorid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupDisbandRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_operatorid();
  void clear_has_operatorid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr operatorid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupDisbandRequestImpl();
};
// -------------------------------------------------------------------

class ChatGroupDisbandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupDisbandResponse) */ {
 public:
  ChatGroupDisbandResponse();
  virtual ~ChatGroupDisbandResponse();

  ChatGroupDisbandResponse(const ChatGroupDisbandResponse& from);

  inline ChatGroupDisbandResponse& operator=(const ChatGroupDisbandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupDisbandResponse(ChatGroupDisbandResponse&& from) noexcept
    : ChatGroupDisbandResponse() {
    *this = ::std::move(from);
  }

  inline ChatGroupDisbandResponse& operator=(ChatGroupDisbandResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupDisbandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupDisbandResponse* internal_default_instance() {
    return reinterpret_cast<const ChatGroupDisbandResponse*>(
               &_ChatGroupDisbandResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ChatGroupDisbandResponse* other);
  friend void swap(ChatGroupDisbandResponse& a, ChatGroupDisbandResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupDisbandResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupDisbandResponse>(NULL);
  }

  ChatGroupDisbandResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupDisbandResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupDisbandResponse& from);
  void MergeFrom(const ChatGroupDisbandResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupDisbandResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponseResult;
  static const ChatGroupDisbandResponseResult Success =
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Success;
  static const ChatGroupDisbandResponseResult Failed =
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Failed;
  static inline bool ChatGroupDisbandResponseResult_IsValid(int value) {
    return ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_IsValid(value);
  }
  static const ChatGroupDisbandResponseResult ChatGroupDisbandResponseResult_MIN =
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_MIN;
  static const ChatGroupDisbandResponseResult ChatGroupDisbandResponseResult_MAX =
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_MAX;
  static const int ChatGroupDisbandResponseResult_ARRAYSIZE =
    ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_ChatGroupDisbandResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatGroupDisbandResponseResult_descriptor() {
    return ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_descriptor();
  }
  static inline const ::std::string& ChatGroupDisbandResponseResult_Name(ChatGroupDisbandResponseResult value) {
    return ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Name(value);
  }
  static inline bool ChatGroupDisbandResponseResult_Parse(const ::std::string& name,
      ChatGroupDisbandResponseResult* value) {
    return ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string operatorId = 2;
  bool has_operatorid() const;
  void clear_operatorid();
  static const int kOperatorIdFieldNumber = 2;
  const ::std::string& operatorid() const;
  void set_operatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_operatorid(::std::string&& value);
  #endif
  void set_operatorid(const char* value);
  void set_operatorid(const char* value, size_t size);
  ::std::string* mutable_operatorid();
  ::std::string* release_operatorid();
  void set_allocated_operatorid(::std::string* operatorid);

  // required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult result() const;
  void set_result(::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupDisbandResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_operatorid();
  void clear_has_operatorid();
  void set_has_result();
  void clear_has_result();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr operatorid_;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupDisbandResponseImpl();
};
// -------------------------------------------------------------------

class ChatGroupJoinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupJoinRequest) */ {
 public:
  ChatGroupJoinRequest();
  virtual ~ChatGroupJoinRequest();

  ChatGroupJoinRequest(const ChatGroupJoinRequest& from);

  inline ChatGroupJoinRequest& operator=(const ChatGroupJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupJoinRequest(ChatGroupJoinRequest&& from) noexcept
    : ChatGroupJoinRequest() {
    *this = ::std::move(from);
  }

  inline ChatGroupJoinRequest& operator=(ChatGroupJoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupJoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupJoinRequest* internal_default_instance() {
    return reinterpret_cast<const ChatGroupJoinRequest*>(
               &_ChatGroupJoinRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(ChatGroupJoinRequest* other);
  friend void swap(ChatGroupJoinRequest& a, ChatGroupJoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupJoinRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupJoinRequest>(NULL);
  }

  ChatGroupJoinRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupJoinRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupJoinRequest& from);
  void MergeFrom(const ChatGroupJoinRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupJoinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required string userAccount = 3;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 3;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // optional string operatorId = 4;
  bool has_operatorid() const;
  void clear_operatorid();
  static const int kOperatorIdFieldNumber = 4;
  const ::std::string& operatorid() const;
  void set_operatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_operatorid(::std::string&& value);
  #endif
  void set_operatorid(const char* value);
  void set_operatorid(const char* value, size_t size);
  ::std::string* mutable_operatorid();
  ::std::string* release_operatorid();
  void set_allocated_operatorid(::std::string* operatorid);

  // optional string introduction = 5;
  bool has_introduction() const;
  void clear_introduction();
  static const int kIntroductionFieldNumber = 5;
  const ::std::string& introduction() const;
  void set_introduction(const ::std::string& value);
  #if LANG_CXX11
  void set_introduction(::std::string&& value);
  #endif
  void set_introduction(const char* value);
  void set_introduction(const char* value, size_t size);
  ::std::string* mutable_introduction();
  ::std::string* release_introduction();
  void set_allocated_introduction(::std::string* introduction);

  // optional uint64 applicant_id = 6;
  bool has_applicant_id() const;
  void clear_applicant_id();
  static const int kApplicantIdFieldNumber = 6;
  ::google::protobuf::uint64 applicant_id() const;
  void set_applicant_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupJoinRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_operatorid();
  void clear_has_operatorid();
  void set_has_introduction();
  void clear_has_introduction();
  void set_has_applicant_id();
  void clear_has_applicant_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr operatorid_;
  ::google::protobuf::internal::ArenaStringPtr introduction_;
  ::google::protobuf::uint64 applicant_id_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupJoinRequestImpl();
};
// -------------------------------------------------------------------

class ChatGroupJoinResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupJoinResponse) */ {
 public:
  ChatGroupJoinResponse();
  virtual ~ChatGroupJoinResponse();

  ChatGroupJoinResponse(const ChatGroupJoinResponse& from);

  inline ChatGroupJoinResponse& operator=(const ChatGroupJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupJoinResponse(ChatGroupJoinResponse&& from) noexcept
    : ChatGroupJoinResponse() {
    *this = ::std::move(from);
  }

  inline ChatGroupJoinResponse& operator=(ChatGroupJoinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupJoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupJoinResponse* internal_default_instance() {
    return reinterpret_cast<const ChatGroupJoinResponse*>(
               &_ChatGroupJoinResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(ChatGroupJoinResponse* other);
  friend void swap(ChatGroupJoinResponse& a, ChatGroupJoinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupJoinResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupJoinResponse>(NULL);
  }

  ChatGroupJoinResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupJoinResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupJoinResponse& from);
  void MergeFrom(const ChatGroupJoinResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupJoinResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponseResult;
  static const ChatGroupJoinResponseResult Allow =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_Allow;
  static const ChatGroupJoinResponseResult Reject =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_Reject;
  static const ChatGroupJoinResponseResult ServerInternalError =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_ServerInternalError;
  static const ChatGroupJoinResponseResult InfomationNotMatch =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_InfomationNotMatch;
  static const ChatGroupJoinResponseResult AuthorizationNotMath =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_AuthorizationNotMath;
  static inline bool ChatGroupJoinResponseResult_IsValid(int value) {
    return ChatGroupJoinResponse_ChatGroupJoinResponseResult_IsValid(value);
  }
  static const ChatGroupJoinResponseResult ChatGroupJoinResponseResult_MIN =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_MIN;
  static const ChatGroupJoinResponseResult ChatGroupJoinResponseResult_MAX =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_MAX;
  static const int ChatGroupJoinResponseResult_ARRAYSIZE =
    ChatGroupJoinResponse_ChatGroupJoinResponseResult_ChatGroupJoinResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatGroupJoinResponseResult_descriptor() {
    return ChatGroupJoinResponse_ChatGroupJoinResponseResult_descriptor();
  }
  static inline const ::std::string& ChatGroupJoinResponseResult_Name(ChatGroupJoinResponseResult value) {
    return ChatGroupJoinResponse_ChatGroupJoinResponseResult_Name(value);
  }
  static inline bool ChatGroupJoinResponseResult_Parse(const ::std::string& name,
      ChatGroupJoinResponseResult* value) {
    return ChatGroupJoinResponse_ChatGroupJoinResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required string userAccount = 3;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 3;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // optional string operatorId = 6;
  bool has_operatorid() const;
  void clear_operatorid();
  static const int kOperatorIdFieldNumber = 6;
  const ::std::string& operatorid() const;
  void set_operatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_operatorid(::std::string&& value);
  #endif
  void set_operatorid(const char* value);
  void set_operatorid(const char* value, size_t size);
  ::std::string* mutable_operatorid();
  ::std::string* release_operatorid();
  void set_allocated_operatorid(::std::string* operatorid);

  // optional uint64 applicant_id = 5;
  bool has_applicant_id() const;
  void clear_applicant_id();
  static const int kApplicantIdFieldNumber = 5;
  ::google::protobuf::uint64 applicant_id() const;
  void set_applicant_id(::google::protobuf::uint64 value);

  // required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult result() const;
  void set_result(::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupJoinResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_result();
  void clear_has_result();
  void set_has_applicant_id();
  void clear_has_applicant_id();
  void set_has_operatorid();
  void clear_has_operatorid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr operatorid_;
  ::google::protobuf::uint64 applicant_id_;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupJoinResponseImpl();
};
// -------------------------------------------------------------------

class ChatGroupQuitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupQuitRequest) */ {
 public:
  ChatGroupQuitRequest();
  virtual ~ChatGroupQuitRequest();

  ChatGroupQuitRequest(const ChatGroupQuitRequest& from);

  inline ChatGroupQuitRequest& operator=(const ChatGroupQuitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupQuitRequest(ChatGroupQuitRequest&& from) noexcept
    : ChatGroupQuitRequest() {
    *this = ::std::move(from);
  }

  inline ChatGroupQuitRequest& operator=(ChatGroupQuitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupQuitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupQuitRequest* internal_default_instance() {
    return reinterpret_cast<const ChatGroupQuitRequest*>(
               &_ChatGroupQuitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(ChatGroupQuitRequest* other);
  friend void swap(ChatGroupQuitRequest& a, ChatGroupQuitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupQuitRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupQuitRequest>(NULL);
  }

  ChatGroupQuitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupQuitRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupQuitRequest& from);
  void MergeFrom(const ChatGroupQuitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupQuitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userAccount = 2;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 2;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // required string groupId = 3;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // optional string operatorId = 4;
  bool has_operatorid() const;
  void clear_operatorid();
  static const int kOperatorIdFieldNumber = 4;
  const ::std::string& operatorid() const;
  void set_operatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_operatorid(::std::string&& value);
  #endif
  void set_operatorid(const char* value);
  void set_operatorid(const char* value, size_t size);
  ::std::string* mutable_operatorid();
  ::std::string* release_operatorid();
  void set_allocated_operatorid(::std::string* operatorid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupQuitRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_operatorid();
  void clear_has_operatorid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr operatorid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupQuitRequestImpl();
};
// -------------------------------------------------------------------

class ChatGroupQuitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.ChatGroupQuitResponse) */ {
 public:
  ChatGroupQuitResponse();
  virtual ~ChatGroupQuitResponse();

  ChatGroupQuitResponse(const ChatGroupQuitResponse& from);

  inline ChatGroupQuitResponse& operator=(const ChatGroupQuitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatGroupQuitResponse(ChatGroupQuitResponse&& from) noexcept
    : ChatGroupQuitResponse() {
    *this = ::std::move(from);
  }

  inline ChatGroupQuitResponse& operator=(ChatGroupQuitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatGroupQuitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatGroupQuitResponse* internal_default_instance() {
    return reinterpret_cast<const ChatGroupQuitResponse*>(
               &_ChatGroupQuitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ChatGroupQuitResponse* other);
  friend void swap(ChatGroupQuitResponse& a, ChatGroupQuitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatGroupQuitResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupQuitResponse>(NULL);
  }

  ChatGroupQuitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ChatGroupQuitResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatGroupQuitResponse& from);
  void MergeFrom(const ChatGroupQuitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatGroupQuitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponseResult;
  static const ChatGroupQuitResponseResult Success =
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_Success;
  static const ChatGroupQuitResponseResult Failed =
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_Failed;
  static inline bool ChatGroupQuitResponseResult_IsValid(int value) {
    return ChatGroupQuitResponse_ChatGroupQuitResponseResult_IsValid(value);
  }
  static const ChatGroupQuitResponseResult ChatGroupQuitResponseResult_MIN =
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_MIN;
  static const ChatGroupQuitResponseResult ChatGroupQuitResponseResult_MAX =
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_MAX;
  static const int ChatGroupQuitResponseResult_ARRAYSIZE =
    ChatGroupQuitResponse_ChatGroupQuitResponseResult_ChatGroupQuitResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatGroupQuitResponseResult_descriptor() {
    return ChatGroupQuitResponse_ChatGroupQuitResponseResult_descriptor();
  }
  static inline const ::std::string& ChatGroupQuitResponseResult_Name(ChatGroupQuitResponseResult value) {
    return ChatGroupQuitResponse_ChatGroupQuitResponseResult_Name(value);
  }
  static inline bool ChatGroupQuitResponseResult_Parse(const ::std::string& name,
      ChatGroupQuitResponseResult* value) {
    return ChatGroupQuitResponse_ChatGroupQuitResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string userAccount = 2;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 2;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // required string groupId = 3;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // optional string operatorId = 5;
  bool has_operatorid() const;
  void clear_operatorid();
  static const int kOperatorIdFieldNumber = 5;
  const ::std::string& operatorid() const;
  void set_operatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_operatorid(::std::string&& value);
  #endif
  void set_operatorid(const char* value);
  void set_operatorid(const char* value, size_t size);
  ::std::string* mutable_operatorid();
  ::std::string* release_operatorid();
  void set_allocated_operatorid(::std::string* operatorid);

  // required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult result() const;
  void set_result(::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.ChatGroupQuitResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_result();
  void clear_has_result();
  void set_has_operatorid();
  void clear_has_operatorid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr operatorid_;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsChatGroupQuitResponseImpl();
};
// -------------------------------------------------------------------

class UpdateChatGroupInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.UpdateChatGroupInfoRequest) */ {
 public:
  UpdateChatGroupInfoRequest();
  virtual ~UpdateChatGroupInfoRequest();

  UpdateChatGroupInfoRequest(const UpdateChatGroupInfoRequest& from);

  inline UpdateChatGroupInfoRequest& operator=(const UpdateChatGroupInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateChatGroupInfoRequest(UpdateChatGroupInfoRequest&& from) noexcept
    : UpdateChatGroupInfoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChatGroupInfoRequest& operator=(UpdateChatGroupInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChatGroupInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateChatGroupInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChatGroupInfoRequest*>(
               &_UpdateChatGroupInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(UpdateChatGroupInfoRequest* other);
  friend void swap(UpdateChatGroupInfoRequest& a, UpdateChatGroupInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateChatGroupInfoRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateChatGroupInfoRequest>(NULL);
  }

  UpdateChatGroupInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateChatGroupInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateChatGroupInfoRequest& from);
  void MergeFrom(const UpdateChatGroupInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateChatGroupInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required string groupName = 3;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 3;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // required string groupDescrption = 4;
  bool has_groupdescrption() const;
  void clear_groupdescrption();
  static const int kGroupDescrptionFieldNumber = 4;
  const ::std::string& groupdescrption() const;
  void set_groupdescrption(const ::std::string& value);
  #if LANG_CXX11
  void set_groupdescrption(::std::string&& value);
  #endif
  void set_groupdescrption(const char* value);
  void set_groupdescrption(const char* value, size_t size);
  ::std::string* mutable_groupdescrption();
  ::std::string* release_groupdescrption();
  void set_allocated_groupdescrption(::std::string* groupdescrption);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.UpdateChatGroupInfoRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_groupdescrption();
  void clear_has_groupdescrption();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr groupdescrption_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateChatGroupInfoRequestImpl();
};
// -------------------------------------------------------------------

class UpdateChatGroupInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.UpdateChatGroupInfoResponse) */ {
 public:
  UpdateChatGroupInfoResponse();
  virtual ~UpdateChatGroupInfoResponse();

  UpdateChatGroupInfoResponse(const UpdateChatGroupInfoResponse& from);

  inline UpdateChatGroupInfoResponse& operator=(const UpdateChatGroupInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateChatGroupInfoResponse(UpdateChatGroupInfoResponse&& from) noexcept
    : UpdateChatGroupInfoResponse() {
    *this = ::std::move(from);
  }

  inline UpdateChatGroupInfoResponse& operator=(UpdateChatGroupInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChatGroupInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateChatGroupInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateChatGroupInfoResponse*>(
               &_UpdateChatGroupInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(UpdateChatGroupInfoResponse* other);
  friend void swap(UpdateChatGroupInfoResponse& a, UpdateChatGroupInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateChatGroupInfoResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateChatGroupInfoResponse>(NULL);
  }

  UpdateChatGroupInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UpdateChatGroupInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateChatGroupInfoResponse& from);
  void MergeFrom(const UpdateChatGroupInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateChatGroupInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponseResult;
  static const UpdateChatGroupInfoResponseResult Success =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Success;
  static const UpdateChatGroupInfoResponseResult Failed =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Failed;
  static const UpdateChatGroupInfoResponseResult ServerInternalError =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_ServerInternalError;
  static const UpdateChatGroupInfoResponseResult InfomationNotMatch =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_InfomationNotMatch;
  static const UpdateChatGroupInfoResponseResult AuthorizationNotMath =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_AuthorizationNotMath;
  static inline bool UpdateChatGroupInfoResponseResult_IsValid(int value) {
    return UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_IsValid(value);
  }
  static const UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponseResult_MIN =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_MIN;
  static const UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponseResult_MAX =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_MAX;
  static const int UpdateChatGroupInfoResponseResult_ARRAYSIZE =
    UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_UpdateChatGroupInfoResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UpdateChatGroupInfoResponseResult_descriptor() {
    return UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_descriptor();
  }
  static inline const ::std::string& UpdateChatGroupInfoResponseResult_Name(UpdateChatGroupInfoResponseResult value) {
    return UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Name(value);
  }
  static inline bool UpdateChatGroupInfoResponseResult_Parse(const ::std::string& name,
      UpdateChatGroupInfoResponseResult* value) {
    return UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // optional string operator = 3;
  bool has_operator_() const;
  void clear_operator_();
  static const int kOperatorFieldNumber = 3;
  const ::std::string& operator_() const;
  void set_operator_(const ::std::string& value);
  #if LANG_CXX11
  void set_operator_(::std::string&& value);
  #endif
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  ::std::string* mutable_operator_();
  ::std::string* release_operator_();
  void set_allocated_operator_(::std::string* operator_);

  // required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult result() const;
  void set_result(::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.UpdateChatGroupInfoResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_result();
  void clear_has_result();
  void set_has_operator_();
  void clear_has_operator_();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr operator__;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsUpdateChatGroupInfoResponseImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupInfoRequest) */ {
 public:
  FetchChatGroupInfoRequest();
  virtual ~FetchChatGroupInfoRequest();

  FetchChatGroupInfoRequest(const FetchChatGroupInfoRequest& from);

  inline FetchChatGroupInfoRequest& operator=(const FetchChatGroupInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupInfoRequest(FetchChatGroupInfoRequest&& from) noexcept
    : FetchChatGroupInfoRequest() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupInfoRequest& operator=(FetchChatGroupInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupInfoRequest* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupInfoRequest*>(
               &_FetchChatGroupInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(FetchChatGroupInfoRequest* other);
  friend void swap(FetchChatGroupInfoRequest& a, FetchChatGroupInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupInfoRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupInfoRequest>(NULL);
  }

  FetchChatGroupInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupInfoRequest& from);
  void MergeFrom(const FetchChatGroupInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupInfoRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupInfoRequestImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupInfoResponse) */ {
 public:
  FetchChatGroupInfoResponse();
  virtual ~FetchChatGroupInfoResponse();

  FetchChatGroupInfoResponse(const FetchChatGroupInfoResponse& from);

  inline FetchChatGroupInfoResponse& operator=(const FetchChatGroupInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupInfoResponse(FetchChatGroupInfoResponse&& from) noexcept
    : FetchChatGroupInfoResponse() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupInfoResponse& operator=(FetchChatGroupInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupInfoResponse* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupInfoResponse*>(
               &_FetchChatGroupInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(FetchChatGroupInfoResponse* other);
  friend void swap(FetchChatGroupInfoResponse& a, FetchChatGroupInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupInfoResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupInfoResponse>(NULL);
  }

  FetchChatGroupInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupInfoResponse& from);
  void MergeFrom(const FetchChatGroupInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponseResult;
  static const FetchChatGroupInfoResponseResult Success =
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Success;
  static const FetchChatGroupInfoResponseResult Failed =
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Failed;
  static inline bool FetchChatGroupInfoResponseResult_IsValid(int value) {
    return FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_IsValid(value);
  }
  static const FetchChatGroupInfoResponseResult FetchChatGroupInfoResponseResult_MIN =
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_MIN;
  static const FetchChatGroupInfoResponseResult FetchChatGroupInfoResponseResult_MAX =
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_MAX;
  static const int FetchChatGroupInfoResponseResult_ARRAYSIZE =
    FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_FetchChatGroupInfoResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FetchChatGroupInfoResponseResult_descriptor() {
    return FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_descriptor();
  }
  static inline const ::std::string& FetchChatGroupInfoResponseResult_Name(FetchChatGroupInfoResponseResult value) {
    return FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Name(value);
  }
  static inline bool FetchChatGroupInfoResponseResult_Parse(const ::std::string& name,
      FetchChatGroupInfoResponseResult* value) {
    return FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // optional string groupName = 4;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 4;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // optional string groupDescrption = 5;
  bool has_groupdescrption() const;
  void clear_groupdescrption();
  static const int kGroupDescrptionFieldNumber = 5;
  const ::std::string& groupdescrption() const;
  void set_groupdescrption(const ::std::string& value);
  #if LANG_CXX11
  void set_groupdescrption(::std::string&& value);
  #endif
  void set_groupdescrption(const char* value);
  void set_groupdescrption(const char* value, size_t size);
  ::std::string* mutable_groupdescrption();
  ::std::string* release_groupdescrption();
  void set_allocated_groupdescrption(::std::string* groupdescrption);

  // optional string groupMaster = 6;
  bool has_groupmaster() const;
  void clear_groupmaster();
  static const int kGroupMasterFieldNumber = 6;
  const ::std::string& groupmaster() const;
  void set_groupmaster(const ::std::string& value);
  #if LANG_CXX11
  void set_groupmaster(::std::string&& value);
  #endif
  void set_groupmaster(const char* value);
  void set_groupmaster(const char* value, size_t size);
  ::std::string* mutable_groupmaster();
  ::std::string* release_groupmaster();
  void set_allocated_groupmaster(::std::string* groupmaster);

  // required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult result() const;
  void set_result(::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupInfoResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_result();
  void clear_has_result();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_groupdescrption();
  void clear_has_groupdescrption();
  void set_has_groupmaster();
  void clear_has_groupmaster();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr groupdescrption_;
  ::google::protobuf::internal::ArenaStringPtr groupmaster_;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupInfoResponseImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupMemberListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupMemberListRequest) */ {
 public:
  FetchChatGroupMemberListRequest();
  virtual ~FetchChatGroupMemberListRequest();

  FetchChatGroupMemberListRequest(const FetchChatGroupMemberListRequest& from);

  inline FetchChatGroupMemberListRequest& operator=(const FetchChatGroupMemberListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupMemberListRequest(FetchChatGroupMemberListRequest&& from) noexcept
    : FetchChatGroupMemberListRequest() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupMemberListRequest& operator=(FetchChatGroupMemberListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupMemberListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupMemberListRequest* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupMemberListRequest*>(
               &_FetchChatGroupMemberListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(FetchChatGroupMemberListRequest* other);
  friend void swap(FetchChatGroupMemberListRequest& a, FetchChatGroupMemberListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupMemberListRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupMemberListRequest>(NULL);
  }

  FetchChatGroupMemberListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupMemberListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupMemberListRequest& from);
  void MergeFrom(const FetchChatGroupMemberListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupMemberListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupMemberListRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListRequestImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupMemberListResponse_ChatGroupMemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo) */ {
 public:
  FetchChatGroupMemberListResponse_ChatGroupMemberInfo();
  virtual ~FetchChatGroupMemberListResponse_ChatGroupMemberInfo();

  FetchChatGroupMemberListResponse_ChatGroupMemberInfo(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from);

  inline FetchChatGroupMemberListResponse_ChatGroupMemberInfo& operator=(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupMemberListResponse_ChatGroupMemberInfo(FetchChatGroupMemberListResponse_ChatGroupMemberInfo&& from) noexcept
    : FetchChatGroupMemberListResponse_ChatGroupMemberInfo() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupMemberListResponse_ChatGroupMemberInfo& operator=(FetchChatGroupMemberListResponse_ChatGroupMemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupMemberListResponse_ChatGroupMemberInfo* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupMemberListResponse_ChatGroupMemberInfo*>(
               &_FetchChatGroupMemberListResponse_ChatGroupMemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(FetchChatGroupMemberListResponse_ChatGroupMemberInfo* other);
  friend void swap(FetchChatGroupMemberListResponse_ChatGroupMemberInfo& a, FetchChatGroupMemberListResponse_ChatGroupMemberInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupMemberListResponse_ChatGroupMemberInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupMemberListResponse_ChatGroupMemberInfo>(NULL);
  }

  FetchChatGroupMemberListResponse_ChatGroupMemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupMemberListResponse_ChatGroupMemberInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from);
  void MergeFrom(const FetchChatGroupMemberListResponse_ChatGroupMemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupMemberListResponse_ChatGroupMemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userAccount = 1;
  bool has_useraccount() const;
  void clear_useraccount();
  static const int kUserAccountFieldNumber = 1;
  const ::std::string& useraccount() const;
  void set_useraccount(const ::std::string& value);
  #if LANG_CXX11
  void set_useraccount(::std::string&& value);
  #endif
  void set_useraccount(const char* value);
  void set_useraccount(const char* value, size_t size);
  ::std::string* mutable_useraccount();
  ::std::string* release_useraccount();
  void set_allocated_useraccount(::std::string* useraccount);

  // optional string groupNickName = 2;
  bool has_groupnickname() const;
  void clear_groupnickname();
  static const int kGroupNickNameFieldNumber = 2;
  const ::std::string& groupnickname() const;
  void set_groupnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupnickname(::std::string&& value);
  #endif
  void set_groupnickname(const char* value);
  void set_groupnickname(const char* value, size_t size);
  ::std::string* mutable_groupnickname();
  ::std::string* release_groupnickname();
  void set_allocated_groupnickname(::std::string* groupnickname);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo)
 private:
  void set_has_useraccount();
  void clear_has_useraccount();
  void set_has_groupnickname();
  void clear_has_groupnickname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr useraccount_;
  ::google::protobuf::internal::ArenaStringPtr groupnickname_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponse_ChatGroupMemberInfoImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupMemberListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupMemberListResponse) */ {
 public:
  FetchChatGroupMemberListResponse();
  virtual ~FetchChatGroupMemberListResponse();

  FetchChatGroupMemberListResponse(const FetchChatGroupMemberListResponse& from);

  inline FetchChatGroupMemberListResponse& operator=(const FetchChatGroupMemberListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupMemberListResponse(FetchChatGroupMemberListResponse&& from) noexcept
    : FetchChatGroupMemberListResponse() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupMemberListResponse& operator=(FetchChatGroupMemberListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupMemberListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupMemberListResponse* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupMemberListResponse*>(
               &_FetchChatGroupMemberListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(FetchChatGroupMemberListResponse* other);
  friend void swap(FetchChatGroupMemberListResponse& a, FetchChatGroupMemberListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupMemberListResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupMemberListResponse>(NULL);
  }

  FetchChatGroupMemberListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupMemberListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupMemberListResponse& from);
  void MergeFrom(const FetchChatGroupMemberListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupMemberListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FetchChatGroupMemberListResponse_ChatGroupMemberInfo ChatGroupMemberInfo;

  typedef FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponseResult;
  static const FetchChatGroupMemberListResponseResult Success =
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Success;
  static const FetchChatGroupMemberListResponseResult Failed =
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Failed;
  static inline bool FetchChatGroupMemberListResponseResult_IsValid(int value) {
    return FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_IsValid(value);
  }
  static const FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponseResult_MIN =
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_MIN;
  static const FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponseResult_MAX =
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_MAX;
  static const int FetchChatGroupMemberListResponseResult_ARRAYSIZE =
    FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_FetchChatGroupMemberListResponseResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FetchChatGroupMemberListResponseResult_descriptor() {
    return FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_descriptor();
  }
  static inline const ::std::string& FetchChatGroupMemberListResponseResult_Name(FetchChatGroupMemberListResponseResult value) {
    return FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Name(value);
  }
  static inline bool FetchChatGroupMemberListResponseResult_Parse(const ::std::string& name,
      FetchChatGroupMemberListResponseResult* value) {
    return FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo groupMember = 4;
  int groupmember_size() const;
  void clear_groupmember();
  static const int kGroupMemberFieldNumber = 4;
  ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo* mutable_groupmember(int index);
  ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo >*
      mutable_groupmember();
  const ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo& groupmember(int index) const;
  ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo* add_groupmember();
  const ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo >&
      groupmember() const;

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupId = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult result() const;
  void set_result(::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupMemberListResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_result();
  void clear_has_result();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo > groupmember_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  int result_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupMemberListResponseImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupListRequest) */ {
 public:
  FetchChatGroupListRequest();
  virtual ~FetchChatGroupListRequest();

  FetchChatGroupListRequest(const FetchChatGroupListRequest& from);

  inline FetchChatGroupListRequest& operator=(const FetchChatGroupListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupListRequest(FetchChatGroupListRequest&& from) noexcept
    : FetchChatGroupListRequest() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupListRequest& operator=(FetchChatGroupListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupListRequest* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupListRequest*>(
               &_FetchChatGroupListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(FetchChatGroupListRequest* other);
  friend void swap(FetchChatGroupListRequest& a, FetchChatGroupListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupListRequest* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupListRequest>(NULL);
  }

  FetchChatGroupListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupListRequest& from);
  void MergeFrom(const FetchChatGroupListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupListRequest)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListRequestImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupListResponse_GroupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupListResponse.GroupInfo) */ {
 public:
  FetchChatGroupListResponse_GroupInfo();
  virtual ~FetchChatGroupListResponse_GroupInfo();

  FetchChatGroupListResponse_GroupInfo(const FetchChatGroupListResponse_GroupInfo& from);

  inline FetchChatGroupListResponse_GroupInfo& operator=(const FetchChatGroupListResponse_GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupListResponse_GroupInfo(FetchChatGroupListResponse_GroupInfo&& from) noexcept
    : FetchChatGroupListResponse_GroupInfo() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupListResponse_GroupInfo& operator=(FetchChatGroupListResponse_GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupListResponse_GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupListResponse_GroupInfo* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupListResponse_GroupInfo*>(
               &_FetchChatGroupListResponse_GroupInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(FetchChatGroupListResponse_GroupInfo* other);
  friend void swap(FetchChatGroupListResponse_GroupInfo& a, FetchChatGroupListResponse_GroupInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupListResponse_GroupInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupListResponse_GroupInfo>(NULL);
  }

  FetchChatGroupListResponse_GroupInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupListResponse_GroupInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupListResponse_GroupInfo& from);
  void MergeFrom(const FetchChatGroupListResponse_GroupInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupListResponse_GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required string groupName = 2;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupListResponse.GroupInfo)
 private:
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_groupname();
  void clear_has_groupname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponse_GroupInfoImpl();
};
// -------------------------------------------------------------------

class FetchChatGroupListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.FetchChatGroupListResponse) */ {
 public:
  FetchChatGroupListResponse();
  virtual ~FetchChatGroupListResponse();

  FetchChatGroupListResponse(const FetchChatGroupListResponse& from);

  inline FetchChatGroupListResponse& operator=(const FetchChatGroupListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetchChatGroupListResponse(FetchChatGroupListResponse&& from) noexcept
    : FetchChatGroupListResponse() {
    *this = ::std::move(from);
  }

  inline FetchChatGroupListResponse& operator=(FetchChatGroupListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchChatGroupListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchChatGroupListResponse* internal_default_instance() {
    return reinterpret_cast<const FetchChatGroupListResponse*>(
               &_FetchChatGroupListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(FetchChatGroupListResponse* other);
  friend void swap(FetchChatGroupListResponse& a, FetchChatGroupListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetchChatGroupListResponse* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupListResponse>(NULL);
  }

  FetchChatGroupListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FetchChatGroupListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetchChatGroupListResponse& from);
  void MergeFrom(const FetchChatGroupListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetchChatGroupListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FetchChatGroupListResponse_GroupInfo GroupInfo;

  // accessors -------------------------------------------------------

  // repeated .kakaIM.Node.FetchChatGroupListResponse.GroupInfo group = 2;
  int group_size() const;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo* mutable_group(int index);
  ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo >*
      mutable_group();
  const ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo& group(int index) const;
  ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo* add_group();
  const ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo >&
      group() const;

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.FetchChatGroupListResponse)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo > group_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsFetchChatGroupListResponseImpl();
};
// -------------------------------------------------------------------

class GroupChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.GroupChatMessage) */ {
 public:
  GroupChatMessage();
  virtual ~GroupChatMessage();

  GroupChatMessage(const GroupChatMessage& from);

  inline GroupChatMessage& operator=(const GroupChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupChatMessage(GroupChatMessage&& from) noexcept
    : GroupChatMessage() {
    *this = ::std::move(from);
  }

  inline GroupChatMessage& operator=(GroupChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatMessage* internal_default_instance() {
    return reinterpret_cast<const GroupChatMessage*>(
               &_GroupChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(GroupChatMessage* other);
  friend void swap(GroupChatMessage& a, GroupChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChatMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GroupChatMessage>(NULL);
  }

  GroupChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GroupChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupChatMessage& from);
  void MergeFrom(const GroupChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // required string groupId = 3;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required string content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint64 msgId = 5;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 5;
  ::google::protobuf::uint64 msgid() const;
  void set_msgid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.GroupChatMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_sender();
  void clear_has_sender();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_content();
  void clear_has_content();
  void set_has_msgid();
  void clear_has_msgid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 msgid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsGroupChatMessageImpl();
};
// -------------------------------------------------------------------

class PullGroupChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kakaIM.Node.PullGroupChatMessage) */ {
 public:
  PullGroupChatMessage();
  virtual ~PullGroupChatMessage();

  PullGroupChatMessage(const PullGroupChatMessage& from);

  inline PullGroupChatMessage& operator=(const PullGroupChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullGroupChatMessage(PullGroupChatMessage&& from) noexcept
    : PullGroupChatMessage() {
    *this = ::std::move(from);
  }

  inline PullGroupChatMessage& operator=(PullGroupChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PullGroupChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullGroupChatMessage* internal_default_instance() {
    return reinterpret_cast<const PullGroupChatMessage*>(
               &_PullGroupChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(PullGroupChatMessage* other);
  friend void swap(PullGroupChatMessage& a, PullGroupChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullGroupChatMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PullGroupChatMessage>(NULL);
  }

  PullGroupChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<PullGroupChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullGroupChatMessage& from);
  void MergeFrom(const PullGroupChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullGroupChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sessionID = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // required string groupID = 2;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // required uint64 messageID = 3;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIDFieldNumber = 3;
  ::google::protobuf::uint64 messageid() const;
  void set_messageid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kakaIM.Node.PullGroupChatMessage)
 private:
  void set_has_sessionid();
  void clear_has_sessionid();
  void set_has_groupid();
  void clear_has_groupid();
  void set_has_messageid();
  void clear_has_messageid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::uint64 messageid_;
  friend struct ::protobuf_KakaIMMessage_2eproto::TableStruct;
  friend void ::protobuf_KakaIMMessage_2eproto::InitDefaultsPullGroupChatMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestSessionIDMessage

// -------------------------------------------------------------------

// ResponseSessionIDMessage

// required string sessionID = 1;
inline bool ResponseSessionIDMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseSessionIDMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseSessionIDMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseSessionIDMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ResponseSessionIDMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseSessionIDMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void ResponseSessionIDMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseSessionIDMessage.sessionID)
}
#if LANG_CXX11
inline void ResponseSessionIDMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ResponseSessionIDMessage.sessionID)
}
#endif
inline void ResponseSessionIDMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ResponseSessionIDMessage.sessionID)
}
inline void ResponseSessionIDMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ResponseSessionIDMessage.sessionID)
}
inline ::std::string* ResponseSessionIDMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ResponseSessionIDMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseSessionIDMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ResponseSessionIDMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSessionIDMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ResponseSessionIDMessage.sessionID)
}

// required .kakaIM.Node.ResponseSessionIDMessage.Status status = 2;
inline bool ResponseSessionIDMessage::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseSessionIDMessage::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseSessionIDMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseSessionIDMessage::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::kakaIM::Node::ResponseSessionIDMessage_Status ResponseSessionIDMessage::status() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseSessionIDMessage.status)
  return static_cast< ::kakaIM::Node::ResponseSessionIDMessage_Status >(status_);
}
inline void ResponseSessionIDMessage::set_status(::kakaIM::Node::ResponseSessionIDMessage_Status value) {
  assert(::kakaIM::Node::ResponseSessionIDMessage_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseSessionIDMessage.status)
}

// -------------------------------------------------------------------

// LoginMessage

// required string sessionID = 1;
inline bool LoginMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& LoginMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.LoginMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void LoginMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.LoginMessage.sessionID)
}
#if LANG_CXX11
inline void LoginMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.LoginMessage.sessionID)
}
#endif
inline void LoginMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.LoginMessage.sessionID)
}
inline void LoginMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.LoginMessage.sessionID)
}
inline ::std::string* LoginMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.LoginMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.LoginMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.LoginMessage.sessionID)
}

// required string userAccount = 2;
inline bool LoginMessage::has_useraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginMessage::set_has_useraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginMessage::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginMessage::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& LoginMessage::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.LoginMessage.userAccount)
  return useraccount_.GetNoArena();
}
inline void LoginMessage::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.LoginMessage.userAccount)
}
#if LANG_CXX11
inline void LoginMessage::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.LoginMessage.userAccount)
}
#endif
inline void LoginMessage::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.LoginMessage.userAccount)
}
inline void LoginMessage::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.LoginMessage.userAccount)
}
inline ::std::string* LoginMessage::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.LoginMessage.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginMessage::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.LoginMessage.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginMessage::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.LoginMessage.userAccount)
}

// required string userPassword = 3;
inline bool LoginMessage::has_userpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginMessage::set_has_userpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginMessage::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginMessage::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpassword();
}
inline const ::std::string& LoginMessage::userpassword() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.LoginMessage.userPassword)
  return userpassword_.GetNoArena();
}
inline void LoginMessage::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.LoginMessage.userPassword)
}
#if LANG_CXX11
inline void LoginMessage::set_userpassword(::std::string&& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.LoginMessage.userPassword)
}
#endif
inline void LoginMessage::set_userpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.LoginMessage.userPassword)
}
inline void LoginMessage::set_userpassword(const char* value, size_t size) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.LoginMessage.userPassword)
}
inline ::std::string* LoginMessage::mutable_userpassword() {
  set_has_userpassword();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.LoginMessage.userPassword)
  return userpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginMessage::release_userpassword() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.LoginMessage.userPassword)
  clear_has_userpassword();
  return userpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginMessage::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword != NULL) {
    set_has_userpassword();
  } else {
    clear_has_userpassword();
  }
  userpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.LoginMessage.userPassword)
}

// -------------------------------------------------------------------

// ResponseLoginMessage

// required string sessionID = 1;
inline bool ResponseLoginMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseLoginMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseLoginMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseLoginMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ResponseLoginMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseLoginMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void ResponseLoginMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseLoginMessage.sessionID)
}
#if LANG_CXX11
inline void ResponseLoginMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ResponseLoginMessage.sessionID)
}
#endif
inline void ResponseLoginMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ResponseLoginMessage.sessionID)
}
inline void ResponseLoginMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ResponseLoginMessage.sessionID)
}
inline ::std::string* ResponseLoginMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ResponseLoginMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseLoginMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ResponseLoginMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseLoginMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ResponseLoginMessage.sessionID)
}

// required .kakaIM.Node.ResponseLoginMessage.LoginState loginState = 2;
inline bool ResponseLoginMessage::has_loginstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseLoginMessage::set_has_loginstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseLoginMessage::clear_has_loginstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseLoginMessage::clear_loginstate() {
  loginstate_ = 1;
  clear_has_loginstate();
}
inline ::kakaIM::Node::ResponseLoginMessage_LoginState ResponseLoginMessage::loginstate() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseLoginMessage.loginState)
  return static_cast< ::kakaIM::Node::ResponseLoginMessage_LoginState >(loginstate_);
}
inline void ResponseLoginMessage::set_loginstate(::kakaIM::Node::ResponseLoginMessage_LoginState value) {
  assert(::kakaIM::Node::ResponseLoginMessage_LoginState_IsValid(value));
  set_has_loginstate();
  loginstate_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseLoginMessage.loginState)
}

// optional .kakaIM.Node.ResponseLoginMessage.FailureError failureError = 3;
inline bool ResponseLoginMessage::has_failureerror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseLoginMessage::set_has_failureerror() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseLoginMessage::clear_has_failureerror() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseLoginMessage::clear_failureerror() {
  failureerror_ = 1;
  clear_has_failureerror();
}
inline ::kakaIM::Node::ResponseLoginMessage_FailureError ResponseLoginMessage::failureerror() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseLoginMessage.failureError)
  return static_cast< ::kakaIM::Node::ResponseLoginMessage_FailureError >(failureerror_);
}
inline void ResponseLoginMessage::set_failureerror(::kakaIM::Node::ResponseLoginMessage_FailureError value) {
  assert(::kakaIM::Node::ResponseLoginMessage_FailureError_IsValid(value));
  set_has_failureerror();
  failureerror_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseLoginMessage.failureError)
}

// -------------------------------------------------------------------

// RegisterMessage

// required string sessionID = 1;
inline bool RegisterMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& RegisterMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.RegisterMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void RegisterMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.RegisterMessage.sessionID)
}
#if LANG_CXX11
inline void RegisterMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.RegisterMessage.sessionID)
}
#endif
inline void RegisterMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.RegisterMessage.sessionID)
}
inline void RegisterMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.RegisterMessage.sessionID)
}
inline ::std::string* RegisterMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.RegisterMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.RegisterMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.RegisterMessage.sessionID)
}

// required string userAccount = 2;
inline bool RegisterMessage::has_useraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterMessage::set_has_useraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterMessage::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterMessage::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& RegisterMessage::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.RegisterMessage.userAccount)
  return useraccount_.GetNoArena();
}
inline void RegisterMessage::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.RegisterMessage.userAccount)
}
#if LANG_CXX11
inline void RegisterMessage::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.RegisterMessage.userAccount)
}
#endif
inline void RegisterMessage::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.RegisterMessage.userAccount)
}
inline void RegisterMessage::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.RegisterMessage.userAccount)
}
inline ::std::string* RegisterMessage::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.RegisterMessage.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterMessage::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.RegisterMessage.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterMessage::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.RegisterMessage.userAccount)
}

// required string userPassword = 3;
inline bool RegisterMessage::has_userpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterMessage::set_has_userpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterMessage::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterMessage::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpassword();
}
inline const ::std::string& RegisterMessage::userpassword() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.RegisterMessage.userPassword)
  return userpassword_.GetNoArena();
}
inline void RegisterMessage::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.RegisterMessage.userPassword)
}
#if LANG_CXX11
inline void RegisterMessage::set_userpassword(::std::string&& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.RegisterMessage.userPassword)
}
#endif
inline void RegisterMessage::set_userpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.RegisterMessage.userPassword)
}
inline void RegisterMessage::set_userpassword(const char* value, size_t size) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.RegisterMessage.userPassword)
}
inline ::std::string* RegisterMessage::mutable_userpassword() {
  set_has_userpassword();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.RegisterMessage.userPassword)
  return userpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterMessage::release_userpassword() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.RegisterMessage.userPassword)
  clear_has_userpassword();
  return userpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterMessage::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword != NULL) {
    set_has_userpassword();
  } else {
    clear_has_userpassword();
  }
  userpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.RegisterMessage.userPassword)
}

// optional string userNickName = 4;
inline bool RegisterMessage::has_usernickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterMessage::set_has_usernickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterMessage::clear_has_usernickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterMessage::clear_usernickname() {
  usernickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usernickname();
}
inline const ::std::string& RegisterMessage::usernickname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.RegisterMessage.userNickName)
  return usernickname_.GetNoArena();
}
inline void RegisterMessage::set_usernickname(const ::std::string& value) {
  set_has_usernickname();
  usernickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.RegisterMessage.userNickName)
}
#if LANG_CXX11
inline void RegisterMessage::set_usernickname(::std::string&& value) {
  set_has_usernickname();
  usernickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.RegisterMessage.userNickName)
}
#endif
inline void RegisterMessage::set_usernickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usernickname();
  usernickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.RegisterMessage.userNickName)
}
inline void RegisterMessage::set_usernickname(const char* value, size_t size) {
  set_has_usernickname();
  usernickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.RegisterMessage.userNickName)
}
inline ::std::string* RegisterMessage::mutable_usernickname() {
  set_has_usernickname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.RegisterMessage.userNickName)
  return usernickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterMessage::release_usernickname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.RegisterMessage.userNickName)
  clear_has_usernickname();
  return usernickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterMessage::set_allocated_usernickname(::std::string* usernickname) {
  if (usernickname != NULL) {
    set_has_usernickname();
  } else {
    clear_has_usernickname();
  }
  usernickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernickname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.RegisterMessage.userNickName)
}

// optional .kakaIM.Node.RegisterMessage.UserSex sex = 5 [default = Unkown];
inline bool RegisterMessage::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterMessage::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterMessage::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterMessage::clear_sex() {
  sex_ = 3;
  clear_has_sex();
}
inline ::kakaIM::Node::RegisterMessage_UserSex RegisterMessage::sex() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.RegisterMessage.sex)
  return static_cast< ::kakaIM::Node::RegisterMessage_UserSex >(sex_);
}
inline void RegisterMessage::set_sex(::kakaIM::Node::RegisterMessage_UserSex value) {
  assert(::kakaIM::Node::RegisterMessage_UserSex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.RegisterMessage.sex)
}

// -------------------------------------------------------------------

// ResponseRegisterMessage

// required string sessionID = 1;
inline bool ResponseRegisterMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseRegisterMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseRegisterMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseRegisterMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ResponseRegisterMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseRegisterMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void ResponseRegisterMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseRegisterMessage.sessionID)
}
#if LANG_CXX11
inline void ResponseRegisterMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ResponseRegisterMessage.sessionID)
}
#endif
inline void ResponseRegisterMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ResponseRegisterMessage.sessionID)
}
inline void ResponseRegisterMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ResponseRegisterMessage.sessionID)
}
inline ::std::string* ResponseRegisterMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ResponseRegisterMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseRegisterMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ResponseRegisterMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseRegisterMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ResponseRegisterMessage.sessionID)
}

// required .kakaIM.Node.ResponseRegisterMessage.RegisterState registerState = 2;
inline bool ResponseRegisterMessage::has_registerstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseRegisterMessage::set_has_registerstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseRegisterMessage::clear_has_registerstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseRegisterMessage::clear_registerstate() {
  registerstate_ = 1;
  clear_has_registerstate();
}
inline ::kakaIM::Node::ResponseRegisterMessage_RegisterState ResponseRegisterMessage::registerstate() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseRegisterMessage.registerState)
  return static_cast< ::kakaIM::Node::ResponseRegisterMessage_RegisterState >(registerstate_);
}
inline void ResponseRegisterMessage::set_registerstate(::kakaIM::Node::ResponseRegisterMessage_RegisterState value) {
  assert(::kakaIM::Node::ResponseRegisterMessage_RegisterState_IsValid(value));
  set_has_registerstate();
  registerstate_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseRegisterMessage.registerState)
}

// optional .kakaIM.Node.ResponseRegisterMessage.FailureError failureError = 3;
inline bool ResponseRegisterMessage::has_failureerror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseRegisterMessage::set_has_failureerror() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseRegisterMessage::clear_has_failureerror() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseRegisterMessage::clear_failureerror() {
  failureerror_ = 1;
  clear_has_failureerror();
}
inline ::kakaIM::Node::ResponseRegisterMessage_FailureError ResponseRegisterMessage::failureerror() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseRegisterMessage.failureError)
  return static_cast< ::kakaIM::Node::ResponseRegisterMessage_FailureError >(failureerror_);
}
inline void ResponseRegisterMessage::set_failureerror(::kakaIM::Node::ResponseRegisterMessage_FailureError value) {
  assert(::kakaIM::Node::ResponseRegisterMessage_FailureError_IsValid(value));
  set_has_failureerror();
  failureerror_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseRegisterMessage.failureError)
}

// -------------------------------------------------------------------

// HeartBeatMessage

// required string sessionID = 1;
inline bool HeartBeatMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& HeartBeatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.HeartBeatMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void HeartBeatMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.HeartBeatMessage.sessionID)
}
#if LANG_CXX11
inline void HeartBeatMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.HeartBeatMessage.sessionID)
}
#endif
inline void HeartBeatMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.HeartBeatMessage.sessionID)
}
inline void HeartBeatMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.HeartBeatMessage.sessionID)
}
inline ::std::string* HeartBeatMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.HeartBeatMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.HeartBeatMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.HeartBeatMessage.sessionID)
}

// required string timestamp = 2;
inline bool HeartBeatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& HeartBeatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.HeartBeatMessage.timestamp)
  return timestamp_.GetNoArena();
}
inline void HeartBeatMessage::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.HeartBeatMessage.timestamp)
}
#if LANG_CXX11
inline void HeartBeatMessage::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.HeartBeatMessage.timestamp)
}
#endif
inline void HeartBeatMessage::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.HeartBeatMessage.timestamp)
}
inline void HeartBeatMessage::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.HeartBeatMessage.timestamp)
}
inline ::std::string* HeartBeatMessage::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.HeartBeatMessage.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.HeartBeatMessage.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.HeartBeatMessage.timestamp)
}

// -------------------------------------------------------------------

// ResponseHeartBeatMessage

// required string sessionID = 1;
inline bool ResponseHeartBeatMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeartBeatMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHeartBeatMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHeartBeatMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ResponseHeartBeatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void ResponseHeartBeatMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
}
#if LANG_CXX11
inline void ResponseHeartBeatMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
}
#endif
inline void ResponseHeartBeatMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
}
inline void ResponseHeartBeatMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
}
inline ::std::string* ResponseHeartBeatMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseHeartBeatMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseHeartBeatMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ResponseHeartBeatMessage.sessionID)
}

// required string timestamp = 2;
inline bool ResponseHeartBeatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeartBeatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHeartBeatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHeartBeatMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& ResponseHeartBeatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
  return timestamp_.GetNoArena();
}
inline void ResponseHeartBeatMessage::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
}
#if LANG_CXX11
inline void ResponseHeartBeatMessage::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
}
#endif
inline void ResponseHeartBeatMessage::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
}
inline void ResponseHeartBeatMessage::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
}
inline ::std::string* ResponseHeartBeatMessage::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseHeartBeatMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseHeartBeatMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ResponseHeartBeatMessage.timestamp)
}

// -------------------------------------------------------------------

// LogoutMessage

// required string sessionID = 1;
inline bool LogoutMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& LogoutMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.LogoutMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void LogoutMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.LogoutMessage.sessionID)
}
#if LANG_CXX11
inline void LogoutMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.LogoutMessage.sessionID)
}
#endif
inline void LogoutMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.LogoutMessage.sessionID)
}
inline void LogoutMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.LogoutMessage.sessionID)
}
inline ::std::string* LogoutMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.LogoutMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.LogoutMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.LogoutMessage.sessionID)
}

// optional .kakaIM.Node.LogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
inline bool LogoutMessage::has_offlinemailestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutMessage::set_has_offlinemailestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutMessage::clear_has_offlinemailestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutMessage::clear_offlinemailestate() {
  offlinemailestate_ = 1;
  clear_has_offlinemailestate();
}
inline ::kakaIM::Node::LogoutMessage_OfflineMailState LogoutMessage::offlinemailestate() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.LogoutMessage.offlineMaileState)
  return static_cast< ::kakaIM::Node::LogoutMessage_OfflineMailState >(offlinemailestate_);
}
inline void LogoutMessage::set_offlinemailestate(::kakaIM::Node::LogoutMessage_OfflineMailState value) {
  assert(::kakaIM::Node::LogoutMessage_OfflineMailState_IsValid(value));
  set_has_offlinemailestate();
  offlinemailestate_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.LogoutMessage.offlineMaileState)
}

// -------------------------------------------------------------------

// ResponseLogoutMessage

// required string sessionID = 1;
inline bool ResponseLogoutMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseLogoutMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseLogoutMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseLogoutMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ResponseLogoutMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseLogoutMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void ResponseLogoutMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseLogoutMessage.sessionID)
}
#if LANG_CXX11
inline void ResponseLogoutMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ResponseLogoutMessage.sessionID)
}
#endif
inline void ResponseLogoutMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ResponseLogoutMessage.sessionID)
}
inline void ResponseLogoutMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ResponseLogoutMessage.sessionID)
}
inline ::std::string* ResponseLogoutMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ResponseLogoutMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseLogoutMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ResponseLogoutMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseLogoutMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ResponseLogoutMessage.sessionID)
}

// optional .kakaIM.Node.ResponseLogoutMessage.OfflineMailState offlineMaileState = 2 [default = Open];
inline bool ResponseLogoutMessage::has_offlinemailestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseLogoutMessage::set_has_offlinemailestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseLogoutMessage::clear_has_offlinemailestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseLogoutMessage::clear_offlinemailestate() {
  offlinemailestate_ = 1;
  clear_has_offlinemailestate();
}
inline ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState ResponseLogoutMessage::offlinemailestate() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ResponseLogoutMessage.offlineMaileState)
  return static_cast< ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState >(offlinemailestate_);
}
inline void ResponseLogoutMessage::set_offlinemailestate(::kakaIM::Node::ResponseLogoutMessage_OfflineMailState value) {
  assert(::kakaIM::Node::ResponseLogoutMessage_OfflineMailState_IsValid(value));
  set_has_offlinemailestate();
  offlinemailestate_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ResponseLogoutMessage.offlineMaileState)
}

// -------------------------------------------------------------------

// BuildingRelationshipRequestMessage

// required string sessionID = 1;
inline bool BuildingRelationshipRequestMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildingRelationshipRequestMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildingRelationshipRequestMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildingRelationshipRequestMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& BuildingRelationshipRequestMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void BuildingRelationshipRequestMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
}
#if LANG_CXX11
inline void BuildingRelationshipRequestMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
}
#endif
inline void BuildingRelationshipRequestMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
}
inline void BuildingRelationshipRequestMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
}
inline ::std::string* BuildingRelationshipRequestMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipRequestMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipRequestMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipRequestMessage.sessionID)
}

// optional uint64 applicant_id = 2;
inline bool BuildingRelationshipRequestMessage::has_applicant_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuildingRelationshipRequestMessage::set_has_applicant_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuildingRelationshipRequestMessage::clear_has_applicant_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuildingRelationshipRequestMessage::clear_applicant_id() {
  applicant_id_ = GOOGLE_ULONGLONG(0);
  clear_has_applicant_id();
}
inline ::google::protobuf::uint64 BuildingRelationshipRequestMessage::applicant_id() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipRequestMessage.applicant_id)
  return applicant_id_;
}
inline void BuildingRelationshipRequestMessage::set_applicant_id(::google::protobuf::uint64 value) {
  set_has_applicant_id();
  applicant_id_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipRequestMessage.applicant_id)
}

// required string sponsorAccount = 3;
inline bool BuildingRelationshipRequestMessage::has_sponsoraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildingRelationshipRequestMessage::set_has_sponsoraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildingRelationshipRequestMessage::clear_has_sponsoraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildingRelationshipRequestMessage::clear_sponsoraccount() {
  sponsoraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sponsoraccount();
}
inline const ::std::string& BuildingRelationshipRequestMessage::sponsoraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
  return sponsoraccount_.GetNoArena();
}
inline void BuildingRelationshipRequestMessage::set_sponsoraccount(const ::std::string& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
}
#if LANG_CXX11
inline void BuildingRelationshipRequestMessage::set_sponsoraccount(::std::string&& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
}
#endif
inline void BuildingRelationshipRequestMessage::set_sponsoraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
}
inline void BuildingRelationshipRequestMessage::set_sponsoraccount(const char* value, size_t size) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
}
inline ::std::string* BuildingRelationshipRequestMessage::mutable_sponsoraccount() {
  set_has_sponsoraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
  return sponsoraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipRequestMessage::release_sponsoraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
  clear_has_sponsoraccount();
  return sponsoraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipRequestMessage::set_allocated_sponsoraccount(::std::string* sponsoraccount) {
  if (sponsoraccount != NULL) {
    set_has_sponsoraccount();
  } else {
    clear_has_sponsoraccount();
  }
  sponsoraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sponsoraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipRequestMessage.sponsorAccount)
}

// required string targetAccount = 4;
inline bool BuildingRelationshipRequestMessage::has_targetaccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildingRelationshipRequestMessage::set_has_targetaccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildingRelationshipRequestMessage::clear_has_targetaccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildingRelationshipRequestMessage::clear_targetaccount() {
  targetaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetaccount();
}
inline const ::std::string& BuildingRelationshipRequestMessage::targetaccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
  return targetaccount_.GetNoArena();
}
inline void BuildingRelationshipRequestMessage::set_targetaccount(const ::std::string& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
}
#if LANG_CXX11
inline void BuildingRelationshipRequestMessage::set_targetaccount(::std::string&& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
}
#endif
inline void BuildingRelationshipRequestMessage::set_targetaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
}
inline void BuildingRelationshipRequestMessage::set_targetaccount(const char* value, size_t size) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
}
inline ::std::string* BuildingRelationshipRequestMessage::mutable_targetaccount() {
  set_has_targetaccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
  return targetaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipRequestMessage::release_targetaccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
  clear_has_targetaccount();
  return targetaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipRequestMessage::set_allocated_targetaccount(::std::string* targetaccount) {
  if (targetaccount != NULL) {
    set_has_targetaccount();
  } else {
    clear_has_targetaccount();
  }
  targetaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetaccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipRequestMessage.targetAccount)
}

// required string introduction = 5;
inline bool BuildingRelationshipRequestMessage::has_introduction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuildingRelationshipRequestMessage::set_has_introduction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuildingRelationshipRequestMessage::clear_has_introduction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuildingRelationshipRequestMessage::clear_introduction() {
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_introduction();
}
inline const ::std::string& BuildingRelationshipRequestMessage::introduction() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
  return introduction_.GetNoArena();
}
inline void BuildingRelationshipRequestMessage::set_introduction(const ::std::string& value) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
}
#if LANG_CXX11
inline void BuildingRelationshipRequestMessage::set_introduction(::std::string&& value) {
  set_has_introduction();
  introduction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
}
#endif
inline void BuildingRelationshipRequestMessage::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
}
inline void BuildingRelationshipRequestMessage::set_introduction(const char* value, size_t size) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
}
inline ::std::string* BuildingRelationshipRequestMessage::mutable_introduction() {
  set_has_introduction();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
  return introduction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipRequestMessage::release_introduction() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
  clear_has_introduction();
  return introduction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipRequestMessage::set_allocated_introduction(::std::string* introduction) {
  if (introduction != NULL) {
    set_has_introduction();
  } else {
    clear_has_introduction();
  }
  introduction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduction);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipRequestMessage.introduction)
}

// optional uint64 messageID = 6;
inline bool BuildingRelationshipRequestMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuildingRelationshipRequestMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuildingRelationshipRequestMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuildingRelationshipRequestMessage::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 BuildingRelationshipRequestMessage::messageid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipRequestMessage.messageID)
  return messageid_;
}
inline void BuildingRelationshipRequestMessage::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipRequestMessage.messageID)
}

// -------------------------------------------------------------------

// BuildingRelationshipAnswerMessage

// required string sessionID = 1;
inline bool BuildingRelationshipAnswerMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildingRelationshipAnswerMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildingRelationshipAnswerMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildingRelationshipAnswerMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& BuildingRelationshipAnswerMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void BuildingRelationshipAnswerMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
}
#if LANG_CXX11
inline void BuildingRelationshipAnswerMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
}
#endif
inline void BuildingRelationshipAnswerMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
}
inline void BuildingRelationshipAnswerMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
}
inline ::std::string* BuildingRelationshipAnswerMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipAnswerMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipAnswerMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipAnswerMessage.sessionID)
}

// required uint64 applicant_id = 2;
inline bool BuildingRelationshipAnswerMessage::has_applicant_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuildingRelationshipAnswerMessage::set_has_applicant_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuildingRelationshipAnswerMessage::clear_has_applicant_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuildingRelationshipAnswerMessage::clear_applicant_id() {
  applicant_id_ = GOOGLE_ULONGLONG(0);
  clear_has_applicant_id();
}
inline ::google::protobuf::uint64 BuildingRelationshipAnswerMessage::applicant_id() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipAnswerMessage.applicant_id)
  return applicant_id_;
}
inline void BuildingRelationshipAnswerMessage::set_applicant_id(::google::protobuf::uint64 value) {
  set_has_applicant_id();
  applicant_id_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipAnswerMessage.applicant_id)
}

// required string targetAccount = 3;
inline bool BuildingRelationshipAnswerMessage::has_targetaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildingRelationshipAnswerMessage::set_has_targetaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildingRelationshipAnswerMessage::clear_has_targetaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildingRelationshipAnswerMessage::clear_targetaccount() {
  targetaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetaccount();
}
inline const ::std::string& BuildingRelationshipAnswerMessage::targetaccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
  return targetaccount_.GetNoArena();
}
inline void BuildingRelationshipAnswerMessage::set_targetaccount(const ::std::string& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
}
#if LANG_CXX11
inline void BuildingRelationshipAnswerMessage::set_targetaccount(::std::string&& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
}
#endif
inline void BuildingRelationshipAnswerMessage::set_targetaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
}
inline void BuildingRelationshipAnswerMessage::set_targetaccount(const char* value, size_t size) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
}
inline ::std::string* BuildingRelationshipAnswerMessage::mutable_targetaccount() {
  set_has_targetaccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
  return targetaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipAnswerMessage::release_targetaccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
  clear_has_targetaccount();
  return targetaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipAnswerMessage::set_allocated_targetaccount(::std::string* targetaccount) {
  if (targetaccount != NULL) {
    set_has_targetaccount();
  } else {
    clear_has_targetaccount();
  }
  targetaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetaccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipAnswerMessage.targetAccount)
}

// required string sponsorAccount = 4;
inline bool BuildingRelationshipAnswerMessage::has_sponsoraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildingRelationshipAnswerMessage::set_has_sponsoraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildingRelationshipAnswerMessage::clear_has_sponsoraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildingRelationshipAnswerMessage::clear_sponsoraccount() {
  sponsoraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sponsoraccount();
}
inline const ::std::string& BuildingRelationshipAnswerMessage::sponsoraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
  return sponsoraccount_.GetNoArena();
}
inline void BuildingRelationshipAnswerMessage::set_sponsoraccount(const ::std::string& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
}
#if LANG_CXX11
inline void BuildingRelationshipAnswerMessage::set_sponsoraccount(::std::string&& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
}
#endif
inline void BuildingRelationshipAnswerMessage::set_sponsoraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
}
inline void BuildingRelationshipAnswerMessage::set_sponsoraccount(const char* value, size_t size) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
}
inline ::std::string* BuildingRelationshipAnswerMessage::mutable_sponsoraccount() {
  set_has_sponsoraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
  return sponsoraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildingRelationshipAnswerMessage::release_sponsoraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
  clear_has_sponsoraccount();
  return sponsoraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildingRelationshipAnswerMessage::set_allocated_sponsoraccount(::std::string* sponsoraccount) {
  if (sponsoraccount != NULL) {
    set_has_sponsoraccount();
  } else {
    clear_has_sponsoraccount();
  }
  sponsoraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sponsoraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.BuildingRelationshipAnswerMessage.sponsorAccount)
}

// required .kakaIM.Node.BuildingRelationshipAnswerMessage.BuildingRelationshipAnswer answer = 5;
inline bool BuildingRelationshipAnswerMessage::has_answer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuildingRelationshipAnswerMessage::set_has_answer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuildingRelationshipAnswerMessage::clear_has_answer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuildingRelationshipAnswerMessage::clear_answer() {
  answer_ = 1;
  clear_has_answer();
}
inline ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer BuildingRelationshipAnswerMessage::answer() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipAnswerMessage.answer)
  return static_cast< ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer >(answer_);
}
inline void BuildingRelationshipAnswerMessage::set_answer(::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer value) {
  assert(::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_IsValid(value));
  set_has_answer();
  answer_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipAnswerMessage.answer)
}

// optional uint64 messageID = 6;
inline bool BuildingRelationshipAnswerMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuildingRelationshipAnswerMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuildingRelationshipAnswerMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuildingRelationshipAnswerMessage::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 BuildingRelationshipAnswerMessage::messageid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.BuildingRelationshipAnswerMessage.messageID)
  return messageid_;
}
inline void BuildingRelationshipAnswerMessage::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.BuildingRelationshipAnswerMessage.messageID)
}

// -------------------------------------------------------------------

// DestroyingRelationshipRequestMessage

// required string sessionID = 1;
inline bool DestroyingRelationshipRequestMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DestroyingRelationshipRequestMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DestroyingRelationshipRequestMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DestroyingRelationshipRequestMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& DestroyingRelationshipRequestMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void DestroyingRelationshipRequestMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
}
#if LANG_CXX11
inline void DestroyingRelationshipRequestMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
}
#endif
inline void DestroyingRelationshipRequestMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
}
inline void DestroyingRelationshipRequestMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
}
inline ::std::string* DestroyingRelationshipRequestMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyingRelationshipRequestMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyingRelationshipRequestMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.DestroyingRelationshipRequestMessage.sessionID)
}

// required string sponsorAccount = 2;
inline bool DestroyingRelationshipRequestMessage::has_sponsoraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DestroyingRelationshipRequestMessage::set_has_sponsoraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DestroyingRelationshipRequestMessage::clear_has_sponsoraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DestroyingRelationshipRequestMessage::clear_sponsoraccount() {
  sponsoraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sponsoraccount();
}
inline const ::std::string& DestroyingRelationshipRequestMessage::sponsoraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
  return sponsoraccount_.GetNoArena();
}
inline void DestroyingRelationshipRequestMessage::set_sponsoraccount(const ::std::string& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
}
#if LANG_CXX11
inline void DestroyingRelationshipRequestMessage::set_sponsoraccount(::std::string&& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
}
#endif
inline void DestroyingRelationshipRequestMessage::set_sponsoraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
}
inline void DestroyingRelationshipRequestMessage::set_sponsoraccount(const char* value, size_t size) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
}
inline ::std::string* DestroyingRelationshipRequestMessage::mutable_sponsoraccount() {
  set_has_sponsoraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
  return sponsoraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyingRelationshipRequestMessage::release_sponsoraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
  clear_has_sponsoraccount();
  return sponsoraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyingRelationshipRequestMessage::set_allocated_sponsoraccount(::std::string* sponsoraccount) {
  if (sponsoraccount != NULL) {
    set_has_sponsoraccount();
  } else {
    clear_has_sponsoraccount();
  }
  sponsoraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sponsoraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.DestroyingRelationshipRequestMessage.sponsorAccount)
}

// required string targetAccount = 3;
inline bool DestroyingRelationshipRequestMessage::has_targetaccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DestroyingRelationshipRequestMessage::set_has_targetaccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DestroyingRelationshipRequestMessage::clear_has_targetaccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DestroyingRelationshipRequestMessage::clear_targetaccount() {
  targetaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetaccount();
}
inline const ::std::string& DestroyingRelationshipRequestMessage::targetaccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
  return targetaccount_.GetNoArena();
}
inline void DestroyingRelationshipRequestMessage::set_targetaccount(const ::std::string& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
}
#if LANG_CXX11
inline void DestroyingRelationshipRequestMessage::set_targetaccount(::std::string&& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
}
#endif
inline void DestroyingRelationshipRequestMessage::set_targetaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
}
inline void DestroyingRelationshipRequestMessage::set_targetaccount(const char* value, size_t size) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
}
inline ::std::string* DestroyingRelationshipRequestMessage::mutable_targetaccount() {
  set_has_targetaccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
  return targetaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyingRelationshipRequestMessage::release_targetaccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
  clear_has_targetaccount();
  return targetaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyingRelationshipRequestMessage::set_allocated_targetaccount(::std::string* targetaccount) {
  if (targetaccount != NULL) {
    set_has_targetaccount();
  } else {
    clear_has_targetaccount();
  }
  targetaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetaccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.DestroyingRelationshipRequestMessage.targetAccount)
}

// -------------------------------------------------------------------

// DestoryingRelationshipResponseMessage

// required string sessionID = 1;
inline bool DestoryingRelationshipResponseMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DestoryingRelationshipResponseMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DestoryingRelationshipResponseMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DestoryingRelationshipResponseMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& DestoryingRelationshipResponseMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void DestoryingRelationshipResponseMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
}
#if LANG_CXX11
inline void DestoryingRelationshipResponseMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
}
#endif
inline void DestoryingRelationshipResponseMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
}
inline void DestoryingRelationshipResponseMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
}
inline ::std::string* DestoryingRelationshipResponseMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestoryingRelationshipResponseMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestoryingRelationshipResponseMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.DestoryingRelationshipResponseMessage.sessionID)
}

// required string sponsorAccount = 2;
inline bool DestoryingRelationshipResponseMessage::has_sponsoraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DestoryingRelationshipResponseMessage::set_has_sponsoraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DestoryingRelationshipResponseMessage::clear_has_sponsoraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DestoryingRelationshipResponseMessage::clear_sponsoraccount() {
  sponsoraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sponsoraccount();
}
inline const ::std::string& DestoryingRelationshipResponseMessage::sponsoraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
  return sponsoraccount_.GetNoArena();
}
inline void DestoryingRelationshipResponseMessage::set_sponsoraccount(const ::std::string& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
}
#if LANG_CXX11
inline void DestoryingRelationshipResponseMessage::set_sponsoraccount(::std::string&& value) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
}
#endif
inline void DestoryingRelationshipResponseMessage::set_sponsoraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
}
inline void DestoryingRelationshipResponseMessage::set_sponsoraccount(const char* value, size_t size) {
  set_has_sponsoraccount();
  sponsoraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
}
inline ::std::string* DestoryingRelationshipResponseMessage::mutable_sponsoraccount() {
  set_has_sponsoraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
  return sponsoraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestoryingRelationshipResponseMessage::release_sponsoraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
  clear_has_sponsoraccount();
  return sponsoraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestoryingRelationshipResponseMessage::set_allocated_sponsoraccount(::std::string* sponsoraccount) {
  if (sponsoraccount != NULL) {
    set_has_sponsoraccount();
  } else {
    clear_has_sponsoraccount();
  }
  sponsoraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sponsoraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.DestoryingRelationshipResponseMessage.sponsorAccount)
}

// required string targetAccount = 3;
inline bool DestoryingRelationshipResponseMessage::has_targetaccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DestoryingRelationshipResponseMessage::set_has_targetaccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DestoryingRelationshipResponseMessage::clear_has_targetaccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DestoryingRelationshipResponseMessage::clear_targetaccount() {
  targetaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetaccount();
}
inline const ::std::string& DestoryingRelationshipResponseMessage::targetaccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
  return targetaccount_.GetNoArena();
}
inline void DestoryingRelationshipResponseMessage::set_targetaccount(const ::std::string& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
}
#if LANG_CXX11
inline void DestoryingRelationshipResponseMessage::set_targetaccount(::std::string&& value) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
}
#endif
inline void DestoryingRelationshipResponseMessage::set_targetaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
}
inline void DestoryingRelationshipResponseMessage::set_targetaccount(const char* value, size_t size) {
  set_has_targetaccount();
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
}
inline ::std::string* DestoryingRelationshipResponseMessage::mutable_targetaccount() {
  set_has_targetaccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
  return targetaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestoryingRelationshipResponseMessage::release_targetaccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
  clear_has_targetaccount();
  return targetaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestoryingRelationshipResponseMessage::set_allocated_targetaccount(::std::string* targetaccount) {
  if (targetaccount != NULL) {
    set_has_targetaccount();
  } else {
    clear_has_targetaccount();
  }
  targetaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetaccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.DestoryingRelationshipResponseMessage.targetAccount)
}

// required .kakaIM.Node.DestoryingRelationshipResponseMessage.DestoryingRelationshipResponse response = 4;
inline bool DestoryingRelationshipResponseMessage::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DestoryingRelationshipResponseMessage::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DestoryingRelationshipResponseMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DestoryingRelationshipResponseMessage::clear_response() {
  response_ = 1;
  clear_has_response();
}
inline ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse DestoryingRelationshipResponseMessage::response() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.DestoryingRelationshipResponseMessage.response)
  return static_cast< ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse >(response_);
}
inline void DestoryingRelationshipResponseMessage::set_response(::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse value) {
  assert(::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.DestoryingRelationshipResponseMessage.response)
}

// -------------------------------------------------------------------

// FriendListRequestMessage

// required string sessionID = 1;
inline bool FriendListRequestMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListRequestMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListRequestMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListRequestMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FriendListRequestMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FriendListRequestMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void FriendListRequestMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FriendListRequestMessage.sessionID)
}
#if LANG_CXX11
inline void FriendListRequestMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FriendListRequestMessage.sessionID)
}
#endif
inline void FriendListRequestMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FriendListRequestMessage.sessionID)
}
inline void FriendListRequestMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FriendListRequestMessage.sessionID)
}
inline ::std::string* FriendListRequestMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FriendListRequestMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendListRequestMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FriendListRequestMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendListRequestMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FriendListRequestMessage.sessionID)
}

// -------------------------------------------------------------------

// FriendListItem

// required string friendAccount = 1;
inline bool FriendListItem::has_friendaccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListItem::set_has_friendaccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListItem::clear_has_friendaccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListItem::clear_friendaccount() {
  friendaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendaccount();
}
inline const ::std::string& FriendListItem::friendaccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FriendListItem.friendAccount)
  return friendaccount_.GetNoArena();
}
inline void FriendListItem::set_friendaccount(const ::std::string& value) {
  set_has_friendaccount();
  friendaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FriendListItem.friendAccount)
}
#if LANG_CXX11
inline void FriendListItem::set_friendaccount(::std::string&& value) {
  set_has_friendaccount();
  friendaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FriendListItem.friendAccount)
}
#endif
inline void FriendListItem::set_friendaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friendaccount();
  friendaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FriendListItem.friendAccount)
}
inline void FriendListItem::set_friendaccount(const char* value, size_t size) {
  set_has_friendaccount();
  friendaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FriendListItem.friendAccount)
}
inline ::std::string* FriendListItem::mutable_friendaccount() {
  set_has_friendaccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FriendListItem.friendAccount)
  return friendaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendListItem::release_friendaccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FriendListItem.friendAccount)
  clear_has_friendaccount();
  return friendaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendListItem::set_allocated_friendaccount(::std::string* friendaccount) {
  if (friendaccount != NULL) {
    set_has_friendaccount();
  } else {
    clear_has_friendaccount();
  }
  friendaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendaccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FriendListItem.friendAccount)
}

// -------------------------------------------------------------------

// FriendListResponseMessage

// required string sessionID = 1;
inline bool FriendListResponseMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListResponseMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListResponseMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListResponseMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FriendListResponseMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FriendListResponseMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void FriendListResponseMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FriendListResponseMessage.sessionID)
}
#if LANG_CXX11
inline void FriendListResponseMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FriendListResponseMessage.sessionID)
}
#endif
inline void FriendListResponseMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FriendListResponseMessage.sessionID)
}
inline void FriendListResponseMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FriendListResponseMessage.sessionID)
}
inline ::std::string* FriendListResponseMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FriendListResponseMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendListResponseMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FriendListResponseMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendListResponseMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FriendListResponseMessage.sessionID)
}

// repeated .kakaIM.Node.FriendListItem friend = 2;
inline int FriendListResponseMessage::friend__size() const {
  return friend__.size();
}
inline void FriendListResponseMessage::clear_friend_() {
  friend__.Clear();
}
inline ::kakaIM::Node::FriendListItem* FriendListResponseMessage::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FriendListResponseMessage.friend)
  return friend__.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FriendListItem >*
FriendListResponseMessage::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:kakaIM.Node.FriendListResponseMessage.friend)
  return &friend__;
}
inline const ::kakaIM::Node::FriendListItem& FriendListResponseMessage::friend_(int index) const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FriendListResponseMessage.friend)
  return friend__.Get(index);
}
inline ::kakaIM::Node::FriendListItem* FriendListResponseMessage::add_friend_() {
  // @@protoc_insertion_point(field_add:kakaIM.Node.FriendListResponseMessage.friend)
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FriendListItem >&
FriendListResponseMessage::friend_() const {
  // @@protoc_insertion_point(field_list:kakaIM.Node.FriendListResponseMessage.friend)
  return friend__;
}

// -------------------------------------------------------------------

// OnlineStateMessage

// required string sessionID = 1;
inline bool OnlineStateMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineStateMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineStateMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineStateMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& OnlineStateMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.OnlineStateMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void OnlineStateMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.OnlineStateMessage.sessionID)
}
#if LANG_CXX11
inline void OnlineStateMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.OnlineStateMessage.sessionID)
}
#endif
inline void OnlineStateMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.OnlineStateMessage.sessionID)
}
inline void OnlineStateMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.OnlineStateMessage.sessionID)
}
inline ::std::string* OnlineStateMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.OnlineStateMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineStateMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.OnlineStateMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineStateMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.OnlineStateMessage.sessionID)
}

// required string userAccount = 2;
inline bool OnlineStateMessage::has_useraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineStateMessage::set_has_useraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineStateMessage::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineStateMessage::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& OnlineStateMessage::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.OnlineStateMessage.userAccount)
  return useraccount_.GetNoArena();
}
inline void OnlineStateMessage::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.OnlineStateMessage.userAccount)
}
#if LANG_CXX11
inline void OnlineStateMessage::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.OnlineStateMessage.userAccount)
}
#endif
inline void OnlineStateMessage::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.OnlineStateMessage.userAccount)
}
inline void OnlineStateMessage::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.OnlineStateMessage.userAccount)
}
inline ::std::string* OnlineStateMessage::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.OnlineStateMessage.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineStateMessage::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.OnlineStateMessage.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineStateMessage::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.OnlineStateMessage.userAccount)
}

// required .kakaIM.Node.OnlineStateMessage.OnlineState userState = 3;
inline bool OnlineStateMessage::has_userstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnlineStateMessage::set_has_userstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnlineStateMessage::clear_has_userstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnlineStateMessage::clear_userstate() {
  userstate_ = 1;
  clear_has_userstate();
}
inline ::kakaIM::Node::OnlineStateMessage_OnlineState OnlineStateMessage::userstate() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.OnlineStateMessage.userState)
  return static_cast< ::kakaIM::Node::OnlineStateMessage_OnlineState >(userstate_);
}
inline void OnlineStateMessage::set_userstate(::kakaIM::Node::OnlineStateMessage_OnlineState value) {
  assert(::kakaIM::Node::OnlineStateMessage_OnlineState_IsValid(value));
  set_has_userstate();
  userstate_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.OnlineStateMessage.userState)
}

// -------------------------------------------------------------------

// ChatMessage

// required string sessionID = 1;
inline bool ChatMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatMessage.sessionID)
}
#if LANG_CXX11
inline void ChatMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatMessage.sessionID)
}
#endif
inline void ChatMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatMessage.sessionID)
}
inline void ChatMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatMessage.sessionID)
}
inline ::std::string* ChatMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatMessage.sessionID)
}

// required string senderAccount = 2;
inline bool ChatMessage::has_senderaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_senderaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_senderaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_senderaccount() {
  senderaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senderaccount();
}
inline const ::std::string& ChatMessage::senderaccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatMessage.senderAccount)
  return senderaccount_.GetNoArena();
}
inline void ChatMessage::set_senderaccount(const ::std::string& value) {
  set_has_senderaccount();
  senderaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatMessage.senderAccount)
}
#if LANG_CXX11
inline void ChatMessage::set_senderaccount(::std::string&& value) {
  set_has_senderaccount();
  senderaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatMessage.senderAccount)
}
#endif
inline void ChatMessage::set_senderaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_senderaccount();
  senderaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatMessage.senderAccount)
}
inline void ChatMessage::set_senderaccount(const char* value, size_t size) {
  set_has_senderaccount();
  senderaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatMessage.senderAccount)
}
inline ::std::string* ChatMessage::mutable_senderaccount() {
  set_has_senderaccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatMessage.senderAccount)
  return senderaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_senderaccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatMessage.senderAccount)
  clear_has_senderaccount();
  return senderaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_senderaccount(::std::string* senderaccount) {
  if (senderaccount != NULL) {
    set_has_senderaccount();
  } else {
    clear_has_senderaccount();
  }
  senderaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderaccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatMessage.senderAccount)
}

// required string receiverAccount = 3;
inline bool ChatMessage::has_receiveraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_receiveraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_receiveraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_receiveraccount() {
  receiveraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiveraccount();
}
inline const ::std::string& ChatMessage::receiveraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatMessage.receiverAccount)
  return receiveraccount_.GetNoArena();
}
inline void ChatMessage::set_receiveraccount(const ::std::string& value) {
  set_has_receiveraccount();
  receiveraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatMessage.receiverAccount)
}
#if LANG_CXX11
inline void ChatMessage::set_receiveraccount(::std::string&& value) {
  set_has_receiveraccount();
  receiveraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatMessage.receiverAccount)
}
#endif
inline void ChatMessage::set_receiveraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_receiveraccount();
  receiveraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatMessage.receiverAccount)
}
inline void ChatMessage::set_receiveraccount(const char* value, size_t size) {
  set_has_receiveraccount();
  receiveraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatMessage.receiverAccount)
}
inline ::std::string* ChatMessage::mutable_receiveraccount() {
  set_has_receiveraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatMessage.receiverAccount)
  return receiveraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_receiveraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatMessage.receiverAccount)
  clear_has_receiveraccount();
  return receiveraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_receiveraccount(::std::string* receiveraccount) {
  if (receiveraccount != NULL) {
    set_has_receiveraccount();
  } else {
    clear_has_receiveraccount();
  }
  receiveraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiveraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatMessage.receiverAccount)
}

// required string content = 4;
inline bool ChatMessage::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatMessage.content)
  return content_.GetNoArena();
}
inline void ChatMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatMessage.content)
}
#if LANG_CXX11
inline void ChatMessage::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatMessage.content)
}
#endif
inline void ChatMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatMessage.content)
}
inline void ChatMessage::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatMessage.content)
}
inline ::std::string* ChatMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatMessage.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatMessage.content)
}

// required string timestamp = 5;
inline bool ChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatMessage.timestamp)
  return timestamp_.GetNoArena();
}
inline void ChatMessage::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatMessage.timestamp)
}
#if LANG_CXX11
inline void ChatMessage::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatMessage.timestamp)
}
#endif
inline void ChatMessage::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatMessage.timestamp)
}
inline void ChatMessage::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatMessage.timestamp)
}
inline ::std::string* ChatMessage::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatMessage.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatMessage.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatMessage.timestamp)
}

// optional uint64 messageID = 6;
inline bool ChatMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatMessage::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 ChatMessage::messageid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatMessage.messageID)
  return messageid_;
}
inline void ChatMessage::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatMessage.messageID)
}

// -------------------------------------------------------------------

// NotificationMessage

// required .kakaIM.Node.NotificationMessage.NotificationMessageType type = 1;
inline bool NotificationMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotificationMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotificationMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::kakaIM::Node::NotificationMessage_NotificationMessageType NotificationMessage::type() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.NotificationMessage.type)
  return static_cast< ::kakaIM::Node::NotificationMessage_NotificationMessageType >(type_);
}
inline void NotificationMessage::set_type(::kakaIM::Node::NotificationMessage_NotificationMessageType value) {
  assert(::kakaIM::Node::NotificationMessage_NotificationMessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.NotificationMessage.type)
}

// optional uint64 messageID = 2;
inline bool NotificationMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotificationMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotificationMessage::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 NotificationMessage::messageid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.NotificationMessage.messageID)
  return messageid_;
}
inline void NotificationMessage::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.NotificationMessage.messageID)
}

// -------------------------------------------------------------------

// PullChatMessage

// required string sessionID = 1;
inline bool PullChatMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullChatMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullChatMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullChatMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& PullChatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.PullChatMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void PullChatMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.PullChatMessage.sessionID)
}
#if LANG_CXX11
inline void PullChatMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.PullChatMessage.sessionID)
}
#endif
inline void PullChatMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.PullChatMessage.sessionID)
}
inline void PullChatMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.PullChatMessage.sessionID)
}
inline ::std::string* PullChatMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.PullChatMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PullChatMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.PullChatMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PullChatMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.PullChatMessage.sessionID)
}

// required uint64 messageID = 2;
inline bool PullChatMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullChatMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullChatMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullChatMessage::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 PullChatMessage::messageid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.PullChatMessage.messageID)
  return messageid_;
}
inline void PullChatMessage::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.PullChatMessage.messageID)
}

// -------------------------------------------------------------------

// FetchUserVCardMessage

// required string sessionID = 1;
inline bool FetchUserVCardMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchUserVCardMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchUserVCardMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchUserVCardMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchUserVCardMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchUserVCardMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchUserVCardMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchUserVCardMessage.sessionID)
}
#if LANG_CXX11
inline void FetchUserVCardMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchUserVCardMessage.sessionID)
}
#endif
inline void FetchUserVCardMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchUserVCardMessage.sessionID)
}
inline void FetchUserVCardMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchUserVCardMessage.sessionID)
}
inline ::std::string* FetchUserVCardMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchUserVCardMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchUserVCardMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchUserVCardMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchUserVCardMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchUserVCardMessage.sessionID)
}

// required string userID = 2;
inline bool FetchUserVCardMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchUserVCardMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchUserVCardMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchUserVCardMessage::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& FetchUserVCardMessage::userid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchUserVCardMessage.userID)
  return userid_.GetNoArena();
}
inline void FetchUserVCardMessage::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchUserVCardMessage.userID)
}
#if LANG_CXX11
inline void FetchUserVCardMessage::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchUserVCardMessage.userID)
}
#endif
inline void FetchUserVCardMessage::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchUserVCardMessage.userID)
}
inline void FetchUserVCardMessage::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchUserVCardMessage.userID)
}
inline ::std::string* FetchUserVCardMessage::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchUserVCardMessage.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchUserVCardMessage::release_userid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchUserVCardMessage.userID)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchUserVCardMessage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchUserVCardMessage.userID)
}

// -------------------------------------------------------------------

// UserVCardResponseMessage

// required string sessionID = 1;
inline bool UserVCardResponseMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserVCardResponseMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserVCardResponseMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserVCardResponseMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& UserVCardResponseMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UserVCardResponseMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void UserVCardResponseMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UserVCardResponseMessage.sessionID)
}
#if LANG_CXX11
inline void UserVCardResponseMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UserVCardResponseMessage.sessionID)
}
#endif
inline void UserVCardResponseMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UserVCardResponseMessage.sessionID)
}
inline void UserVCardResponseMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UserVCardResponseMessage.sessionID)
}
inline ::std::string* UserVCardResponseMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UserVCardResponseMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVCardResponseMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UserVCardResponseMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVCardResponseMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UserVCardResponseMessage.sessionID)
}

// required string userID = 2;
inline bool UserVCardResponseMessage::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserVCardResponseMessage::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserVCardResponseMessage::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserVCardResponseMessage::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& UserVCardResponseMessage::userid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UserVCardResponseMessage.userID)
  return userid_.GetNoArena();
}
inline void UserVCardResponseMessage::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UserVCardResponseMessage.userID)
}
#if LANG_CXX11
inline void UserVCardResponseMessage::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UserVCardResponseMessage.userID)
}
#endif
inline void UserVCardResponseMessage::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UserVCardResponseMessage.userID)
}
inline void UserVCardResponseMessage::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UserVCardResponseMessage.userID)
}
inline ::std::string* UserVCardResponseMessage::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UserVCardResponseMessage.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVCardResponseMessage::release_userid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UserVCardResponseMessage.userID)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVCardResponseMessage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UserVCardResponseMessage.userID)
}

// required string nickname = 3;
inline bool UserVCardResponseMessage::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserVCardResponseMessage::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserVCardResponseMessage::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserVCardResponseMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& UserVCardResponseMessage::nickname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UserVCardResponseMessage.nickname)
  return nickname_.GetNoArena();
}
inline void UserVCardResponseMessage::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UserVCardResponseMessage.nickname)
}
#if LANG_CXX11
inline void UserVCardResponseMessage::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UserVCardResponseMessage.nickname)
}
#endif
inline void UserVCardResponseMessage::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UserVCardResponseMessage.nickname)
}
inline void UserVCardResponseMessage::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UserVCardResponseMessage.nickname)
}
inline ::std::string* UserVCardResponseMessage::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UserVCardResponseMessage.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVCardResponseMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UserVCardResponseMessage.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVCardResponseMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UserVCardResponseMessage.nickname)
}

// required .kakaIM.Node.UserGenderType gender = 4;
inline bool UserVCardResponseMessage::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserVCardResponseMessage::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserVCardResponseMessage::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserVCardResponseMessage::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline ::kakaIM::Node::UserGenderType UserVCardResponseMessage::gender() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UserVCardResponseMessage.gender)
  return static_cast< ::kakaIM::Node::UserGenderType >(gender_);
}
inline void UserVCardResponseMessage::set_gender(::kakaIM::Node::UserGenderType value) {
  assert(::kakaIM::Node::UserGenderType_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.UserVCardResponseMessage.gender)
}

// optional string mood = 5;
inline bool UserVCardResponseMessage::has_mood() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserVCardResponseMessage::set_has_mood() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserVCardResponseMessage::clear_has_mood() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserVCardResponseMessage::clear_mood() {
  mood_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mood();
}
inline const ::std::string& UserVCardResponseMessage::mood() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UserVCardResponseMessage.mood)
  return mood_.GetNoArena();
}
inline void UserVCardResponseMessage::set_mood(const ::std::string& value) {
  set_has_mood();
  mood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UserVCardResponseMessage.mood)
}
#if LANG_CXX11
inline void UserVCardResponseMessage::set_mood(::std::string&& value) {
  set_has_mood();
  mood_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UserVCardResponseMessage.mood)
}
#endif
inline void UserVCardResponseMessage::set_mood(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mood();
  mood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UserVCardResponseMessage.mood)
}
inline void UserVCardResponseMessage::set_mood(const char* value, size_t size) {
  set_has_mood();
  mood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UserVCardResponseMessage.mood)
}
inline ::std::string* UserVCardResponseMessage::mutable_mood() {
  set_has_mood();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UserVCardResponseMessage.mood)
  return mood_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVCardResponseMessage::release_mood() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UserVCardResponseMessage.mood)
  clear_has_mood();
  return mood_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVCardResponseMessage::set_allocated_mood(::std::string* mood) {
  if (mood != NULL) {
    set_has_mood();
  } else {
    clear_has_mood();
  }
  mood_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mood);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UserVCardResponseMessage.mood)
}

// optional bytes avator = 6;
inline bool UserVCardResponseMessage::has_avator() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserVCardResponseMessage::set_has_avator() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserVCardResponseMessage::clear_has_avator() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserVCardResponseMessage::clear_avator() {
  avator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avator();
}
inline const ::std::string& UserVCardResponseMessage::avator() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UserVCardResponseMessage.avator)
  return avator_.GetNoArena();
}
inline void UserVCardResponseMessage::set_avator(const ::std::string& value) {
  set_has_avator();
  avator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UserVCardResponseMessage.avator)
}
#if LANG_CXX11
inline void UserVCardResponseMessage::set_avator(::std::string&& value) {
  set_has_avator();
  avator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UserVCardResponseMessage.avator)
}
#endif
inline void UserVCardResponseMessage::set_avator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avator();
  avator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UserVCardResponseMessage.avator)
}
inline void UserVCardResponseMessage::set_avator(const void* value, size_t size) {
  set_has_avator();
  avator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UserVCardResponseMessage.avator)
}
inline ::std::string* UserVCardResponseMessage::mutable_avator() {
  set_has_avator();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UserVCardResponseMessage.avator)
  return avator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserVCardResponseMessage::release_avator() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UserVCardResponseMessage.avator)
  clear_has_avator();
  return avator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserVCardResponseMessage::set_allocated_avator(::std::string* avator) {
  if (avator != NULL) {
    set_has_avator();
  } else {
    clear_has_avator();
  }
  avator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avator);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UserVCardResponseMessage.avator)
}

// -------------------------------------------------------------------

// UpdateUserVCardMessage

// required string sessionID = 1;
inline bool UpdateUserVCardMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateUserVCardMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateUserVCardMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateUserVCardMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& UpdateUserVCardMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void UpdateUserVCardMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessage.sessionID)
}
#if LANG_CXX11
inline void UpdateUserVCardMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateUserVCardMessage.sessionID)
}
#endif
inline void UpdateUserVCardMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateUserVCardMessage.sessionID)
}
inline void UpdateUserVCardMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateUserVCardMessage.sessionID)
}
inline ::std::string* UpdateUserVCardMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateUserVCardMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateUserVCardMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateUserVCardMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateUserVCardMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateUserVCardMessage.sessionID)
}

// optional string nickname = 2;
inline bool UpdateUserVCardMessage::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateUserVCardMessage::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateUserVCardMessage::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateUserVCardMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& UpdateUserVCardMessage::nickname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessage.nickname)
  return nickname_.GetNoArena();
}
inline void UpdateUserVCardMessage::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessage.nickname)
}
#if LANG_CXX11
inline void UpdateUserVCardMessage::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateUserVCardMessage.nickname)
}
#endif
inline void UpdateUserVCardMessage::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateUserVCardMessage.nickname)
}
inline void UpdateUserVCardMessage::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateUserVCardMessage.nickname)
}
inline ::std::string* UpdateUserVCardMessage::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateUserVCardMessage.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateUserVCardMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateUserVCardMessage.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateUserVCardMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateUserVCardMessage.nickname)
}

// optional .kakaIM.Node.UserGenderType gender = 3;
inline bool UpdateUserVCardMessage::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateUserVCardMessage::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateUserVCardMessage::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateUserVCardMessage::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline ::kakaIM::Node::UserGenderType UpdateUserVCardMessage::gender() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessage.gender)
  return static_cast< ::kakaIM::Node::UserGenderType >(gender_);
}
inline void UpdateUserVCardMessage::set_gender(::kakaIM::Node::UserGenderType value) {
  assert(::kakaIM::Node::UserGenderType_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessage.gender)
}

// optional string mood = 4;
inline bool UpdateUserVCardMessage::has_mood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateUserVCardMessage::set_has_mood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateUserVCardMessage::clear_has_mood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateUserVCardMessage::clear_mood() {
  mood_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mood();
}
inline const ::std::string& UpdateUserVCardMessage::mood() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessage.mood)
  return mood_.GetNoArena();
}
inline void UpdateUserVCardMessage::set_mood(const ::std::string& value) {
  set_has_mood();
  mood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessage.mood)
}
#if LANG_CXX11
inline void UpdateUserVCardMessage::set_mood(::std::string&& value) {
  set_has_mood();
  mood_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateUserVCardMessage.mood)
}
#endif
inline void UpdateUserVCardMessage::set_mood(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mood();
  mood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateUserVCardMessage.mood)
}
inline void UpdateUserVCardMessage::set_mood(const char* value, size_t size) {
  set_has_mood();
  mood_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateUserVCardMessage.mood)
}
inline ::std::string* UpdateUserVCardMessage::mutable_mood() {
  set_has_mood();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateUserVCardMessage.mood)
  return mood_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateUserVCardMessage::release_mood() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateUserVCardMessage.mood)
  clear_has_mood();
  return mood_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateUserVCardMessage::set_allocated_mood(::std::string* mood) {
  if (mood != NULL) {
    set_has_mood();
  } else {
    clear_has_mood();
  }
  mood_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mood);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateUserVCardMessage.mood)
}

// optional bytes avator = 5;
inline bool UpdateUserVCardMessage::has_avator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateUserVCardMessage::set_has_avator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateUserVCardMessage::clear_has_avator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateUserVCardMessage::clear_avator() {
  avator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avator();
}
inline const ::std::string& UpdateUserVCardMessage::avator() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessage.avator)
  return avator_.GetNoArena();
}
inline void UpdateUserVCardMessage::set_avator(const ::std::string& value) {
  set_has_avator();
  avator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessage.avator)
}
#if LANG_CXX11
inline void UpdateUserVCardMessage::set_avator(::std::string&& value) {
  set_has_avator();
  avator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateUserVCardMessage.avator)
}
#endif
inline void UpdateUserVCardMessage::set_avator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avator();
  avator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateUserVCardMessage.avator)
}
inline void UpdateUserVCardMessage::set_avator(const void* value, size_t size) {
  set_has_avator();
  avator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateUserVCardMessage.avator)
}
inline ::std::string* UpdateUserVCardMessage::mutable_avator() {
  set_has_avator();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateUserVCardMessage.avator)
  return avator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateUserVCardMessage::release_avator() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateUserVCardMessage.avator)
  clear_has_avator();
  return avator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateUserVCardMessage::set_allocated_avator(::std::string* avator) {
  if (avator != NULL) {
    set_has_avator();
  } else {
    clear_has_avator();
  }
  avator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avator);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateUserVCardMessage.avator)
}

// -------------------------------------------------------------------

// UpdateUserVCardMessageResponse

// required string sessionID = 1;
inline bool UpdateUserVCardMessageResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateUserVCardMessageResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateUserVCardMessageResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateUserVCardMessageResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& UpdateUserVCardMessageResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void UpdateUserVCardMessageResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
}
#if LANG_CXX11
inline void UpdateUserVCardMessageResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
}
#endif
inline void UpdateUserVCardMessageResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
}
inline void UpdateUserVCardMessageResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
}
inline ::std::string* UpdateUserVCardMessageResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateUserVCardMessageResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateUserVCardMessageResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateUserVCardMessageResponse.sessionID)
}

// required .kakaIM.Node.UpdateUserVCardMessageResponse.UpdateUserVCardStateType state = 2;
inline bool UpdateUserVCardMessageResponse::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateUserVCardMessageResponse::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateUserVCardMessageResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateUserVCardMessageResponse::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType UpdateUserVCardMessageResponse::state() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateUserVCardMessageResponse.state)
  return static_cast< ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType >(state_);
}
inline void UpdateUserVCardMessageResponse::set_state(::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType value) {
  assert(::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateUserVCardMessageResponse.state)
}

// -------------------------------------------------------------------

// ChatGroupCreateRequest

// required string sessionID = 1;
inline bool ChatGroupCreateRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupCreateRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupCreateRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupCreateRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupCreateRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupCreateRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupCreateRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupCreateRequest.sessionID)
}
#if LANG_CXX11
inline void ChatGroupCreateRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupCreateRequest.sessionID)
}
#endif
inline void ChatGroupCreateRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupCreateRequest.sessionID)
}
inline void ChatGroupCreateRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupCreateRequest.sessionID)
}
inline ::std::string* ChatGroupCreateRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupCreateRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupCreateRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupCreateRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupCreateRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupCreateRequest.sessionID)
}

// required string groupName = 2;
inline bool ChatGroupCreateRequest::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupCreateRequest::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupCreateRequest::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupCreateRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& ChatGroupCreateRequest::groupname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupCreateRequest.groupName)
  return groupname_.GetNoArena();
}
inline void ChatGroupCreateRequest::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupCreateRequest.groupName)
}
#if LANG_CXX11
inline void ChatGroupCreateRequest::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupCreateRequest.groupName)
}
#endif
inline void ChatGroupCreateRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupCreateRequest.groupName)
}
inline void ChatGroupCreateRequest::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupCreateRequest.groupName)
}
inline ::std::string* ChatGroupCreateRequest::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupCreateRequest.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupCreateRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupCreateRequest.groupName)
  clear_has_groupname();
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupCreateRequest::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupCreateRequest.groupName)
}

// required string groupDescrption = 3;
inline bool ChatGroupCreateRequest::has_groupdescrption() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupCreateRequest::set_has_groupdescrption() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupCreateRequest::clear_has_groupdescrption() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupCreateRequest::clear_groupdescrption() {
  groupdescrption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupdescrption();
}
inline const ::std::string& ChatGroupCreateRequest::groupdescrption() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
  return groupdescrption_.GetNoArena();
}
inline void ChatGroupCreateRequest::set_groupdescrption(const ::std::string& value) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
}
#if LANG_CXX11
inline void ChatGroupCreateRequest::set_groupdescrption(::std::string&& value) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
}
#endif
inline void ChatGroupCreateRequest::set_groupdescrption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
}
inline void ChatGroupCreateRequest::set_groupdescrption(const char* value, size_t size) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
}
inline ::std::string* ChatGroupCreateRequest::mutable_groupdescrption() {
  set_has_groupdescrption();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
  return groupdescrption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupCreateRequest::release_groupdescrption() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
  clear_has_groupdescrption();
  return groupdescrption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupCreateRequest::set_allocated_groupdescrption(::std::string* groupdescrption) {
  if (groupdescrption != NULL) {
    set_has_groupdescrption();
  } else {
    clear_has_groupdescrption();
  }
  groupdescrption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupdescrption);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupCreateRequest.groupDescrption)
}

// -------------------------------------------------------------------

// ChatGroupCreateResponse

// required string sessionID = 1;
inline bool ChatGroupCreateResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupCreateResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupCreateResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupCreateResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupCreateResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupCreateResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupCreateResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupCreateResponse.sessionID)
}
#if LANG_CXX11
inline void ChatGroupCreateResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupCreateResponse.sessionID)
}
#endif
inline void ChatGroupCreateResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupCreateResponse.sessionID)
}
inline void ChatGroupCreateResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupCreateResponse.sessionID)
}
inline ::std::string* ChatGroupCreateResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupCreateResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupCreateResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupCreateResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupCreateResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupCreateResponse.sessionID)
}

// required .kakaIM.Node.ChatGroupCreateResponse.ChatGroupCreateResponseResult result = 2;
inline bool ChatGroupCreateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupCreateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupCreateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupCreateResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult ChatGroupCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupCreateResponse.result)
  return static_cast< ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult >(result_);
}
inline void ChatGroupCreateResponse::set_result(::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult value) {
  assert(::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupCreateResponse.result)
}

// optional string groupId = 3;
inline bool ChatGroupCreateResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupCreateResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupCreateResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupCreateResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& ChatGroupCreateResponse::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupCreateResponse.groupId)
  return groupid_.GetNoArena();
}
inline void ChatGroupCreateResponse::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupCreateResponse.groupId)
}
#if LANG_CXX11
inline void ChatGroupCreateResponse::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupCreateResponse.groupId)
}
#endif
inline void ChatGroupCreateResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupCreateResponse.groupId)
}
inline void ChatGroupCreateResponse::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupCreateResponse.groupId)
}
inline ::std::string* ChatGroupCreateResponse::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupCreateResponse.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupCreateResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupCreateResponse.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupCreateResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupCreateResponse.groupId)
}

// -------------------------------------------------------------------

// ChatGroupDisbandRequest

// required string sessionID = 1;
inline bool ChatGroupDisbandRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupDisbandRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupDisbandRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupDisbandRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupDisbandRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupDisbandRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
}
#if LANG_CXX11
inline void ChatGroupDisbandRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
}
#endif
inline void ChatGroupDisbandRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
}
inline void ChatGroupDisbandRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
}
inline ::std::string* ChatGroupDisbandRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupDisbandRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupDisbandRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupDisbandRequest.sessionID)
}

// required string groupId = 2;
inline bool ChatGroupDisbandRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupDisbandRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupDisbandRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupDisbandRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& ChatGroupDisbandRequest::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupDisbandRequest.groupId)
  return groupid_.GetNoArena();
}
inline void ChatGroupDisbandRequest::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupDisbandRequest.groupId)
}
#if LANG_CXX11
inline void ChatGroupDisbandRequest::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupDisbandRequest.groupId)
}
#endif
inline void ChatGroupDisbandRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupDisbandRequest.groupId)
}
inline void ChatGroupDisbandRequest::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupDisbandRequest.groupId)
}
inline ::std::string* ChatGroupDisbandRequest::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupDisbandRequest.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupDisbandRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupDisbandRequest.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupDisbandRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupDisbandRequest.groupId)
}

// required string operatorId = 3;
inline bool ChatGroupDisbandRequest::has_operatorid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupDisbandRequest::set_has_operatorid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupDisbandRequest::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupDisbandRequest::clear_operatorid() {
  operatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operatorid();
}
inline const ::std::string& ChatGroupDisbandRequest::operatorid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
  return operatorid_.GetNoArena();
}
inline void ChatGroupDisbandRequest::set_operatorid(const ::std::string& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
}
#if LANG_CXX11
inline void ChatGroupDisbandRequest::set_operatorid(::std::string&& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
}
#endif
inline void ChatGroupDisbandRequest::set_operatorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
}
inline void ChatGroupDisbandRequest::set_operatorid(const char* value, size_t size) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
}
inline ::std::string* ChatGroupDisbandRequest::mutable_operatorid() {
  set_has_operatorid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
  return operatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupDisbandRequest::release_operatorid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
  clear_has_operatorid();
  return operatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupDisbandRequest::set_allocated_operatorid(::std::string* operatorid) {
  if (operatorid != NULL) {
    set_has_operatorid();
  } else {
    clear_has_operatorid();
  }
  operatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operatorid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupDisbandRequest.operatorId)
}

// -------------------------------------------------------------------

// ChatGroupDisbandResponse

// required string sessionID = 1;
inline bool ChatGroupDisbandResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupDisbandResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupDisbandResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupDisbandResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupDisbandResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupDisbandResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
}
#if LANG_CXX11
inline void ChatGroupDisbandResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
}
#endif
inline void ChatGroupDisbandResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
}
inline void ChatGroupDisbandResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
}
inline ::std::string* ChatGroupDisbandResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupDisbandResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupDisbandResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupDisbandResponse.sessionID)
}

// required string operatorId = 2;
inline bool ChatGroupDisbandResponse::has_operatorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupDisbandResponse::set_has_operatorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupDisbandResponse::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupDisbandResponse::clear_operatorid() {
  operatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operatorid();
}
inline const ::std::string& ChatGroupDisbandResponse::operatorid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
  return operatorid_.GetNoArena();
}
inline void ChatGroupDisbandResponse::set_operatorid(const ::std::string& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
}
#if LANG_CXX11
inline void ChatGroupDisbandResponse::set_operatorid(::std::string&& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
}
#endif
inline void ChatGroupDisbandResponse::set_operatorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
}
inline void ChatGroupDisbandResponse::set_operatorid(const char* value, size_t size) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
}
inline ::std::string* ChatGroupDisbandResponse::mutable_operatorid() {
  set_has_operatorid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
  return operatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupDisbandResponse::release_operatorid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
  clear_has_operatorid();
  return operatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupDisbandResponse::set_allocated_operatorid(::std::string* operatorid) {
  if (operatorid != NULL) {
    set_has_operatorid();
  } else {
    clear_has_operatorid();
  }
  operatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operatorid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupDisbandResponse.operatorId)
}

// required .kakaIM.Node.ChatGroupDisbandResponse.ChatGroupDisbandResponseResult result = 3;
inline bool ChatGroupDisbandResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupDisbandResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupDisbandResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupDisbandResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult ChatGroupDisbandResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupDisbandResponse.result)
  return static_cast< ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult >(result_);
}
inline void ChatGroupDisbandResponse::set_result(::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult value) {
  assert(::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupDisbandResponse.result)
}

// -------------------------------------------------------------------

// ChatGroupJoinRequest

// required string sessionID = 1;
inline bool ChatGroupJoinRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupJoinRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupJoinRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupJoinRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupJoinRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupJoinRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinRequest.sessionID)
}
#if LANG_CXX11
inline void ChatGroupJoinRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinRequest.sessionID)
}
#endif
inline void ChatGroupJoinRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinRequest.sessionID)
}
inline void ChatGroupJoinRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinRequest.sessionID)
}
inline ::std::string* ChatGroupJoinRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinRequest.sessionID)
}

// required string groupId = 2;
inline bool ChatGroupJoinRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupJoinRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupJoinRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupJoinRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& ChatGroupJoinRequest::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinRequest.groupId)
  return groupid_.GetNoArena();
}
inline void ChatGroupJoinRequest::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinRequest.groupId)
}
#if LANG_CXX11
inline void ChatGroupJoinRequest::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinRequest.groupId)
}
#endif
inline void ChatGroupJoinRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinRequest.groupId)
}
inline void ChatGroupJoinRequest::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinRequest.groupId)
}
inline ::std::string* ChatGroupJoinRequest::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinRequest.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinRequest.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinRequest.groupId)
}

// required string userAccount = 3;
inline bool ChatGroupJoinRequest::has_useraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupJoinRequest::set_has_useraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupJoinRequest::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupJoinRequest::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& ChatGroupJoinRequest::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinRequest.userAccount)
  return useraccount_.GetNoArena();
}
inline void ChatGroupJoinRequest::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinRequest.userAccount)
}
#if LANG_CXX11
inline void ChatGroupJoinRequest::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinRequest.userAccount)
}
#endif
inline void ChatGroupJoinRequest::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinRequest.userAccount)
}
inline void ChatGroupJoinRequest::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinRequest.userAccount)
}
inline ::std::string* ChatGroupJoinRequest::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinRequest.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinRequest::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinRequest.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinRequest::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinRequest.userAccount)
}

// optional string operatorId = 4;
inline bool ChatGroupJoinRequest::has_operatorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatGroupJoinRequest::set_has_operatorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatGroupJoinRequest::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatGroupJoinRequest::clear_operatorid() {
  operatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operatorid();
}
inline const ::std::string& ChatGroupJoinRequest::operatorid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinRequest.operatorId)
  return operatorid_.GetNoArena();
}
inline void ChatGroupJoinRequest::set_operatorid(const ::std::string& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinRequest.operatorId)
}
#if LANG_CXX11
inline void ChatGroupJoinRequest::set_operatorid(::std::string&& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinRequest.operatorId)
}
#endif
inline void ChatGroupJoinRequest::set_operatorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinRequest.operatorId)
}
inline void ChatGroupJoinRequest::set_operatorid(const char* value, size_t size) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinRequest.operatorId)
}
inline ::std::string* ChatGroupJoinRequest::mutable_operatorid() {
  set_has_operatorid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinRequest.operatorId)
  return operatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinRequest::release_operatorid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinRequest.operatorId)
  clear_has_operatorid();
  return operatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinRequest::set_allocated_operatorid(::std::string* operatorid) {
  if (operatorid != NULL) {
    set_has_operatorid();
  } else {
    clear_has_operatorid();
  }
  operatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operatorid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinRequest.operatorId)
}

// optional string introduction = 5;
inline bool ChatGroupJoinRequest::has_introduction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatGroupJoinRequest::set_has_introduction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatGroupJoinRequest::clear_has_introduction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatGroupJoinRequest::clear_introduction() {
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_introduction();
}
inline const ::std::string& ChatGroupJoinRequest::introduction() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinRequest.introduction)
  return introduction_.GetNoArena();
}
inline void ChatGroupJoinRequest::set_introduction(const ::std::string& value) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinRequest.introduction)
}
#if LANG_CXX11
inline void ChatGroupJoinRequest::set_introduction(::std::string&& value) {
  set_has_introduction();
  introduction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinRequest.introduction)
}
#endif
inline void ChatGroupJoinRequest::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinRequest.introduction)
}
inline void ChatGroupJoinRequest::set_introduction(const char* value, size_t size) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinRequest.introduction)
}
inline ::std::string* ChatGroupJoinRequest::mutable_introduction() {
  set_has_introduction();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinRequest.introduction)
  return introduction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinRequest::release_introduction() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinRequest.introduction)
  clear_has_introduction();
  return introduction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinRequest::set_allocated_introduction(::std::string* introduction) {
  if (introduction != NULL) {
    set_has_introduction();
  } else {
    clear_has_introduction();
  }
  introduction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduction);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinRequest.introduction)
}

// optional uint64 applicant_id = 6;
inline bool ChatGroupJoinRequest::has_applicant_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatGroupJoinRequest::set_has_applicant_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatGroupJoinRequest::clear_has_applicant_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatGroupJoinRequest::clear_applicant_id() {
  applicant_id_ = GOOGLE_ULONGLONG(0);
  clear_has_applicant_id();
}
inline ::google::protobuf::uint64 ChatGroupJoinRequest::applicant_id() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinRequest.applicant_id)
  return applicant_id_;
}
inline void ChatGroupJoinRequest::set_applicant_id(::google::protobuf::uint64 value) {
  set_has_applicant_id();
  applicant_id_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinRequest.applicant_id)
}

// -------------------------------------------------------------------

// ChatGroupJoinResponse

// required string sessionID = 1;
inline bool ChatGroupJoinResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupJoinResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupJoinResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupJoinResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupJoinResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupJoinResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinResponse.sessionID)
}
#if LANG_CXX11
inline void ChatGroupJoinResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinResponse.sessionID)
}
#endif
inline void ChatGroupJoinResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinResponse.sessionID)
}
inline void ChatGroupJoinResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinResponse.sessionID)
}
inline ::std::string* ChatGroupJoinResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinResponse.sessionID)
}

// required string groupId = 2;
inline bool ChatGroupJoinResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupJoinResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupJoinResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupJoinResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& ChatGroupJoinResponse::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinResponse.groupId)
  return groupid_.GetNoArena();
}
inline void ChatGroupJoinResponse::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinResponse.groupId)
}
#if LANG_CXX11
inline void ChatGroupJoinResponse::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinResponse.groupId)
}
#endif
inline void ChatGroupJoinResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinResponse.groupId)
}
inline void ChatGroupJoinResponse::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinResponse.groupId)
}
inline ::std::string* ChatGroupJoinResponse::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinResponse.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinResponse.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinResponse.groupId)
}

// required string userAccount = 3;
inline bool ChatGroupJoinResponse::has_useraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupJoinResponse::set_has_useraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupJoinResponse::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupJoinResponse::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& ChatGroupJoinResponse::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinResponse.userAccount)
  return useraccount_.GetNoArena();
}
inline void ChatGroupJoinResponse::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinResponse.userAccount)
}
#if LANG_CXX11
inline void ChatGroupJoinResponse::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinResponse.userAccount)
}
#endif
inline void ChatGroupJoinResponse::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinResponse.userAccount)
}
inline void ChatGroupJoinResponse::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinResponse.userAccount)
}
inline ::std::string* ChatGroupJoinResponse::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinResponse.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinResponse::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinResponse.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinResponse::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinResponse.userAccount)
}

// required .kakaIM.Node.ChatGroupJoinResponse.ChatGroupJoinResponseResult result = 4;
inline bool ChatGroupJoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatGroupJoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatGroupJoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatGroupJoinResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult ChatGroupJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinResponse.result)
  return static_cast< ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult >(result_);
}
inline void ChatGroupJoinResponse::set_result(::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult value) {
  assert(::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinResponse.result)
}

// optional uint64 applicant_id = 5;
inline bool ChatGroupJoinResponse::has_applicant_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatGroupJoinResponse::set_has_applicant_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatGroupJoinResponse::clear_has_applicant_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatGroupJoinResponse::clear_applicant_id() {
  applicant_id_ = GOOGLE_ULONGLONG(0);
  clear_has_applicant_id();
}
inline ::google::protobuf::uint64 ChatGroupJoinResponse::applicant_id() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinResponse.applicant_id)
  return applicant_id_;
}
inline void ChatGroupJoinResponse::set_applicant_id(::google::protobuf::uint64 value) {
  set_has_applicant_id();
  applicant_id_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinResponse.applicant_id)
}

// optional string operatorId = 6;
inline bool ChatGroupJoinResponse::has_operatorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatGroupJoinResponse::set_has_operatorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatGroupJoinResponse::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatGroupJoinResponse::clear_operatorid() {
  operatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operatorid();
}
inline const ::std::string& ChatGroupJoinResponse::operatorid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupJoinResponse.operatorId)
  return operatorid_.GetNoArena();
}
inline void ChatGroupJoinResponse::set_operatorid(const ::std::string& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupJoinResponse.operatorId)
}
#if LANG_CXX11
inline void ChatGroupJoinResponse::set_operatorid(::std::string&& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupJoinResponse.operatorId)
}
#endif
inline void ChatGroupJoinResponse::set_operatorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupJoinResponse.operatorId)
}
inline void ChatGroupJoinResponse::set_operatorid(const char* value, size_t size) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupJoinResponse.operatorId)
}
inline ::std::string* ChatGroupJoinResponse::mutable_operatorid() {
  set_has_operatorid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupJoinResponse.operatorId)
  return operatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupJoinResponse::release_operatorid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupJoinResponse.operatorId)
  clear_has_operatorid();
  return operatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupJoinResponse::set_allocated_operatorid(::std::string* operatorid) {
  if (operatorid != NULL) {
    set_has_operatorid();
  } else {
    clear_has_operatorid();
  }
  operatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operatorid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupJoinResponse.operatorId)
}

// -------------------------------------------------------------------

// ChatGroupQuitRequest

// required string sessionID = 1;
inline bool ChatGroupQuitRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupQuitRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupQuitRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupQuitRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupQuitRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupQuitRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitRequest.sessionID)
}
#if LANG_CXX11
inline void ChatGroupQuitRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitRequest.sessionID)
}
#endif
inline void ChatGroupQuitRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitRequest.sessionID)
}
inline void ChatGroupQuitRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitRequest.sessionID)
}
inline ::std::string* ChatGroupQuitRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitRequest.sessionID)
}

// required string userAccount = 2;
inline bool ChatGroupQuitRequest::has_useraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupQuitRequest::set_has_useraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupQuitRequest::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupQuitRequest::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& ChatGroupQuitRequest::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitRequest.userAccount)
  return useraccount_.GetNoArena();
}
inline void ChatGroupQuitRequest::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitRequest.userAccount)
}
#if LANG_CXX11
inline void ChatGroupQuitRequest::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitRequest.userAccount)
}
#endif
inline void ChatGroupQuitRequest::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitRequest.userAccount)
}
inline void ChatGroupQuitRequest::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitRequest.userAccount)
}
inline ::std::string* ChatGroupQuitRequest::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitRequest.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitRequest::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitRequest.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitRequest::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitRequest.userAccount)
}

// required string groupId = 3;
inline bool ChatGroupQuitRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupQuitRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupQuitRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupQuitRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& ChatGroupQuitRequest::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitRequest.groupId)
  return groupid_.GetNoArena();
}
inline void ChatGroupQuitRequest::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitRequest.groupId)
}
#if LANG_CXX11
inline void ChatGroupQuitRequest::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitRequest.groupId)
}
#endif
inline void ChatGroupQuitRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitRequest.groupId)
}
inline void ChatGroupQuitRequest::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitRequest.groupId)
}
inline ::std::string* ChatGroupQuitRequest::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitRequest.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitRequest.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitRequest.groupId)
}

// optional string operatorId = 4;
inline bool ChatGroupQuitRequest::has_operatorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatGroupQuitRequest::set_has_operatorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatGroupQuitRequest::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatGroupQuitRequest::clear_operatorid() {
  operatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operatorid();
}
inline const ::std::string& ChatGroupQuitRequest::operatorid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitRequest.operatorId)
  return operatorid_.GetNoArena();
}
inline void ChatGroupQuitRequest::set_operatorid(const ::std::string& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitRequest.operatorId)
}
#if LANG_CXX11
inline void ChatGroupQuitRequest::set_operatorid(::std::string&& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitRequest.operatorId)
}
#endif
inline void ChatGroupQuitRequest::set_operatorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitRequest.operatorId)
}
inline void ChatGroupQuitRequest::set_operatorid(const char* value, size_t size) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitRequest.operatorId)
}
inline ::std::string* ChatGroupQuitRequest::mutable_operatorid() {
  set_has_operatorid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitRequest.operatorId)
  return operatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitRequest::release_operatorid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitRequest.operatorId)
  clear_has_operatorid();
  return operatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitRequest::set_allocated_operatorid(::std::string* operatorid) {
  if (operatorid != NULL) {
    set_has_operatorid();
  } else {
    clear_has_operatorid();
  }
  operatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operatorid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitRequest.operatorId)
}

// -------------------------------------------------------------------

// ChatGroupQuitResponse

// required string sessionID = 1;
inline bool ChatGroupQuitResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatGroupQuitResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatGroupQuitResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatGroupQuitResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& ChatGroupQuitResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void ChatGroupQuitResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitResponse.sessionID)
}
#if LANG_CXX11
inline void ChatGroupQuitResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitResponse.sessionID)
}
#endif
inline void ChatGroupQuitResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitResponse.sessionID)
}
inline void ChatGroupQuitResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitResponse.sessionID)
}
inline ::std::string* ChatGroupQuitResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitResponse.sessionID)
}

// required string userAccount = 2;
inline bool ChatGroupQuitResponse::has_useraccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatGroupQuitResponse::set_has_useraccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatGroupQuitResponse::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatGroupQuitResponse::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& ChatGroupQuitResponse::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitResponse.userAccount)
  return useraccount_.GetNoArena();
}
inline void ChatGroupQuitResponse::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitResponse.userAccount)
}
#if LANG_CXX11
inline void ChatGroupQuitResponse::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitResponse.userAccount)
}
#endif
inline void ChatGroupQuitResponse::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitResponse.userAccount)
}
inline void ChatGroupQuitResponse::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitResponse.userAccount)
}
inline ::std::string* ChatGroupQuitResponse::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitResponse.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitResponse::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitResponse.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitResponse::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitResponse.userAccount)
}

// required string groupId = 3;
inline bool ChatGroupQuitResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatGroupQuitResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatGroupQuitResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatGroupQuitResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& ChatGroupQuitResponse::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitResponse.groupId)
  return groupid_.GetNoArena();
}
inline void ChatGroupQuitResponse::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitResponse.groupId)
}
#if LANG_CXX11
inline void ChatGroupQuitResponse::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitResponse.groupId)
}
#endif
inline void ChatGroupQuitResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitResponse.groupId)
}
inline void ChatGroupQuitResponse::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitResponse.groupId)
}
inline ::std::string* ChatGroupQuitResponse::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitResponse.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitResponse.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitResponse.groupId)
}

// required .kakaIM.Node.ChatGroupQuitResponse.ChatGroupQuitResponseResult result = 4;
inline bool ChatGroupQuitResponse::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatGroupQuitResponse::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatGroupQuitResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatGroupQuitResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult ChatGroupQuitResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitResponse.result)
  return static_cast< ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult >(result_);
}
inline void ChatGroupQuitResponse::set_result(::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult value) {
  assert(::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitResponse.result)
}

// optional string operatorId = 5;
inline bool ChatGroupQuitResponse::has_operatorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatGroupQuitResponse::set_has_operatorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatGroupQuitResponse::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatGroupQuitResponse::clear_operatorid() {
  operatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operatorid();
}
inline const ::std::string& ChatGroupQuitResponse::operatorid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.ChatGroupQuitResponse.operatorId)
  return operatorid_.GetNoArena();
}
inline void ChatGroupQuitResponse::set_operatorid(const ::std::string& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.ChatGroupQuitResponse.operatorId)
}
#if LANG_CXX11
inline void ChatGroupQuitResponse::set_operatorid(::std::string&& value) {
  set_has_operatorid();
  operatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.ChatGroupQuitResponse.operatorId)
}
#endif
inline void ChatGroupQuitResponse::set_operatorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.ChatGroupQuitResponse.operatorId)
}
inline void ChatGroupQuitResponse::set_operatorid(const char* value, size_t size) {
  set_has_operatorid();
  operatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.ChatGroupQuitResponse.operatorId)
}
inline ::std::string* ChatGroupQuitResponse::mutable_operatorid() {
  set_has_operatorid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.ChatGroupQuitResponse.operatorId)
  return operatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatGroupQuitResponse::release_operatorid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.ChatGroupQuitResponse.operatorId)
  clear_has_operatorid();
  return operatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatGroupQuitResponse::set_allocated_operatorid(::std::string* operatorid) {
  if (operatorid != NULL) {
    set_has_operatorid();
  } else {
    clear_has_operatorid();
  }
  operatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operatorid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.ChatGroupQuitResponse.operatorId)
}

// -------------------------------------------------------------------

// UpdateChatGroupInfoRequest

// required string sessionID = 1;
inline bool UpdateChatGroupInfoRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChatGroupInfoRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChatGroupInfoRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChatGroupInfoRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& UpdateChatGroupInfoRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void UpdateChatGroupInfoRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
}
#endif
inline void UpdateChatGroupInfoRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
}
inline void UpdateChatGroupInfoRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
}
inline ::std::string* UpdateChatGroupInfoRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoRequest.sessionID)
}

// required string groupId = 2;
inline bool UpdateChatGroupInfoRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateChatGroupInfoRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateChatGroupInfoRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateChatGroupInfoRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& UpdateChatGroupInfoRequest::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
  return groupid_.GetNoArena();
}
inline void UpdateChatGroupInfoRequest::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoRequest::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
}
#endif
inline void UpdateChatGroupInfoRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
}
inline void UpdateChatGroupInfoRequest::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
}
inline ::std::string* UpdateChatGroupInfoRequest::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoRequest.groupId)
}

// required string groupName = 3;
inline bool UpdateChatGroupInfoRequest::has_groupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateChatGroupInfoRequest::set_has_groupname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateChatGroupInfoRequest::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateChatGroupInfoRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& UpdateChatGroupInfoRequest::groupname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
  return groupname_.GetNoArena();
}
inline void UpdateChatGroupInfoRequest::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoRequest::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
}
#endif
inline void UpdateChatGroupInfoRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
}
inline void UpdateChatGroupInfoRequest::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
}
inline ::std::string* UpdateChatGroupInfoRequest::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
  clear_has_groupname();
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoRequest::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoRequest.groupName)
}

// required string groupDescrption = 4;
inline bool UpdateChatGroupInfoRequest::has_groupdescrption() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateChatGroupInfoRequest::set_has_groupdescrption() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateChatGroupInfoRequest::clear_has_groupdescrption() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateChatGroupInfoRequest::clear_groupdescrption() {
  groupdescrption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupdescrption();
}
inline const ::std::string& UpdateChatGroupInfoRequest::groupdescrption() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
  return groupdescrption_.GetNoArena();
}
inline void UpdateChatGroupInfoRequest::set_groupdescrption(const ::std::string& value) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoRequest::set_groupdescrption(::std::string&& value) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
}
#endif
inline void UpdateChatGroupInfoRequest::set_groupdescrption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
}
inline void UpdateChatGroupInfoRequest::set_groupdescrption(const char* value, size_t size) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
}
inline ::std::string* UpdateChatGroupInfoRequest::mutable_groupdescrption() {
  set_has_groupdescrption();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
  return groupdescrption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoRequest::release_groupdescrption() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
  clear_has_groupdescrption();
  return groupdescrption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoRequest::set_allocated_groupdescrption(::std::string* groupdescrption) {
  if (groupdescrption != NULL) {
    set_has_groupdescrption();
  } else {
    clear_has_groupdescrption();
  }
  groupdescrption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupdescrption);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoRequest.groupDescrption)
}

// -------------------------------------------------------------------

// UpdateChatGroupInfoResponse

// required string sessionID = 1;
inline bool UpdateChatGroupInfoResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChatGroupInfoResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChatGroupInfoResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChatGroupInfoResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& UpdateChatGroupInfoResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void UpdateChatGroupInfoResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
}
#endif
inline void UpdateChatGroupInfoResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
}
inline void UpdateChatGroupInfoResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
}
inline ::std::string* UpdateChatGroupInfoResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoResponse.sessionID)
}

// required string groupId = 2;
inline bool UpdateChatGroupInfoResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateChatGroupInfoResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateChatGroupInfoResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateChatGroupInfoResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& UpdateChatGroupInfoResponse::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
  return groupid_.GetNoArena();
}
inline void UpdateChatGroupInfoResponse::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoResponse::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
}
#endif
inline void UpdateChatGroupInfoResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
}
inline void UpdateChatGroupInfoResponse::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
}
inline ::std::string* UpdateChatGroupInfoResponse::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoResponse.groupId)
}

// required .kakaIM.Node.UpdateChatGroupInfoResponse.UpdateChatGroupInfoResponseResult result = 4;
inline bool UpdateChatGroupInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateChatGroupInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateChatGroupInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateChatGroupInfoResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult UpdateChatGroupInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoResponse.result)
  return static_cast< ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult >(result_);
}
inline void UpdateChatGroupInfoResponse::set_result(::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult value) {
  assert(::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoResponse.result)
}

// optional string operator = 3;
inline bool UpdateChatGroupInfoResponse::has_operator_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateChatGroupInfoResponse::set_has_operator_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateChatGroupInfoResponse::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateChatGroupInfoResponse::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operator_();
}
inline const ::std::string& UpdateChatGroupInfoResponse::operator_() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
  return operator__.GetNoArena();
}
inline void UpdateChatGroupInfoResponse::set_operator_(const ::std::string& value) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
}
#if LANG_CXX11
inline void UpdateChatGroupInfoResponse::set_operator_(::std::string&& value) {
  set_has_operator_();
  operator__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
}
#endif
inline void UpdateChatGroupInfoResponse::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
}
inline void UpdateChatGroupInfoResponse::set_operator_(const char* value, size_t size) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
}
inline ::std::string* UpdateChatGroupInfoResponse::mutable_operator_() {
  set_has_operator_();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
  return operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateChatGroupInfoResponse::release_operator_() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
  clear_has_operator_();
  return operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateChatGroupInfoResponse::set_allocated_operator_(::std::string* operator_) {
  if (operator_ != NULL) {
    set_has_operator_();
  } else {
    clear_has_operator_();
  }
  operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.UpdateChatGroupInfoResponse.operator)
}

// -------------------------------------------------------------------

// FetchChatGroupInfoRequest

// required string sessionID = 1;
inline bool FetchChatGroupInfoRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupInfoRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupInfoRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupInfoRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchChatGroupInfoRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchChatGroupInfoRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
}
#if LANG_CXX11
inline void FetchChatGroupInfoRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
}
#endif
inline void FetchChatGroupInfoRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
}
inline void FetchChatGroupInfoRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
}
inline ::std::string* FetchChatGroupInfoRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoRequest.sessionID)
}

// required string groupId = 2;
inline bool FetchChatGroupInfoRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchChatGroupInfoRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchChatGroupInfoRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchChatGroupInfoRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& FetchChatGroupInfoRequest::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
  return groupid_.GetNoArena();
}
inline void FetchChatGroupInfoRequest::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
}
#if LANG_CXX11
inline void FetchChatGroupInfoRequest::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
}
#endif
inline void FetchChatGroupInfoRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
}
inline void FetchChatGroupInfoRequest::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
}
inline ::std::string* FetchChatGroupInfoRequest::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoRequest.groupId)
}

// -------------------------------------------------------------------

// FetchChatGroupInfoResponse

// required string sessionID = 1;
inline bool FetchChatGroupInfoResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupInfoResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupInfoResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupInfoResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchChatGroupInfoResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchChatGroupInfoResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
}
#if LANG_CXX11
inline void FetchChatGroupInfoResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
}
#endif
inline void FetchChatGroupInfoResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
}
inline void FetchChatGroupInfoResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
}
inline ::std::string* FetchChatGroupInfoResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoResponse.sessionID)
}

// required string groupId = 2;
inline bool FetchChatGroupInfoResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchChatGroupInfoResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchChatGroupInfoResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchChatGroupInfoResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& FetchChatGroupInfoResponse::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
  return groupid_.GetNoArena();
}
inline void FetchChatGroupInfoResponse::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
}
#if LANG_CXX11
inline void FetchChatGroupInfoResponse::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
}
#endif
inline void FetchChatGroupInfoResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
}
inline void FetchChatGroupInfoResponse::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
}
inline ::std::string* FetchChatGroupInfoResponse::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoResponse.groupId)
}

// required .kakaIM.Node.FetchChatGroupInfoResponse.FetchChatGroupInfoResponseResult result = 3;
inline bool FetchChatGroupInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FetchChatGroupInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FetchChatGroupInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FetchChatGroupInfoResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult FetchChatGroupInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoResponse.result)
  return static_cast< ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult >(result_);
}
inline void FetchChatGroupInfoResponse::set_result(::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult value) {
  assert(::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoResponse.result)
}

// optional string groupName = 4;
inline bool FetchChatGroupInfoResponse::has_groupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetchChatGroupInfoResponse::set_has_groupname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetchChatGroupInfoResponse::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetchChatGroupInfoResponse::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& FetchChatGroupInfoResponse::groupname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
  return groupname_.GetNoArena();
}
inline void FetchChatGroupInfoResponse::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
}
#if LANG_CXX11
inline void FetchChatGroupInfoResponse::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
}
#endif
inline void FetchChatGroupInfoResponse::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
}
inline void FetchChatGroupInfoResponse::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
}
inline ::std::string* FetchChatGroupInfoResponse::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoResponse::release_groupname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
  clear_has_groupname();
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoResponse::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoResponse.groupName)
}

// optional string groupDescrption = 5;
inline bool FetchChatGroupInfoResponse::has_groupdescrption() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetchChatGroupInfoResponse::set_has_groupdescrption() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetchChatGroupInfoResponse::clear_has_groupdescrption() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetchChatGroupInfoResponse::clear_groupdescrption() {
  groupdescrption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupdescrption();
}
inline const ::std::string& FetchChatGroupInfoResponse::groupdescrption() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
  return groupdescrption_.GetNoArena();
}
inline void FetchChatGroupInfoResponse::set_groupdescrption(const ::std::string& value) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
}
#if LANG_CXX11
inline void FetchChatGroupInfoResponse::set_groupdescrption(::std::string&& value) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
}
#endif
inline void FetchChatGroupInfoResponse::set_groupdescrption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
}
inline void FetchChatGroupInfoResponse::set_groupdescrption(const char* value, size_t size) {
  set_has_groupdescrption();
  groupdescrption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
}
inline ::std::string* FetchChatGroupInfoResponse::mutable_groupdescrption() {
  set_has_groupdescrption();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
  return groupdescrption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoResponse::release_groupdescrption() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
  clear_has_groupdescrption();
  return groupdescrption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoResponse::set_allocated_groupdescrption(::std::string* groupdescrption) {
  if (groupdescrption != NULL) {
    set_has_groupdescrption();
  } else {
    clear_has_groupdescrption();
  }
  groupdescrption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupdescrption);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoResponse.groupDescrption)
}

// optional string groupMaster = 6;
inline bool FetchChatGroupInfoResponse::has_groupmaster() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FetchChatGroupInfoResponse::set_has_groupmaster() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FetchChatGroupInfoResponse::clear_has_groupmaster() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FetchChatGroupInfoResponse::clear_groupmaster() {
  groupmaster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupmaster();
}
inline const ::std::string& FetchChatGroupInfoResponse::groupmaster() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
  return groupmaster_.GetNoArena();
}
inline void FetchChatGroupInfoResponse::set_groupmaster(const ::std::string& value) {
  set_has_groupmaster();
  groupmaster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
}
#if LANG_CXX11
inline void FetchChatGroupInfoResponse::set_groupmaster(::std::string&& value) {
  set_has_groupmaster();
  groupmaster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
}
#endif
inline void FetchChatGroupInfoResponse::set_groupmaster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupmaster();
  groupmaster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
}
inline void FetchChatGroupInfoResponse::set_groupmaster(const char* value, size_t size) {
  set_has_groupmaster();
  groupmaster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
}
inline ::std::string* FetchChatGroupInfoResponse::mutable_groupmaster() {
  set_has_groupmaster();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
  return groupmaster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupInfoResponse::release_groupmaster() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
  clear_has_groupmaster();
  return groupmaster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupInfoResponse::set_allocated_groupmaster(::std::string* groupmaster) {
  if (groupmaster != NULL) {
    set_has_groupmaster();
  } else {
    clear_has_groupmaster();
  }
  groupmaster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupmaster);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupInfoResponse.groupMaster)
}

// -------------------------------------------------------------------

// FetchChatGroupMemberListRequest

// required string sessionID = 1;
inline bool FetchChatGroupMemberListRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupMemberListRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupMemberListRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupMemberListRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchChatGroupMemberListRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchChatGroupMemberListRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
}
#if LANG_CXX11
inline void FetchChatGroupMemberListRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
}
#endif
inline void FetchChatGroupMemberListRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
}
inline void FetchChatGroupMemberListRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
}
inline ::std::string* FetchChatGroupMemberListRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupMemberListRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupMemberListRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupMemberListRequest.sessionID)
}

// required string groupId = 2;
inline bool FetchChatGroupMemberListRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchChatGroupMemberListRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchChatGroupMemberListRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchChatGroupMemberListRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& FetchChatGroupMemberListRequest::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
  return groupid_.GetNoArena();
}
inline void FetchChatGroupMemberListRequest::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
}
#if LANG_CXX11
inline void FetchChatGroupMemberListRequest::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
}
#endif
inline void FetchChatGroupMemberListRequest::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
}
inline void FetchChatGroupMemberListRequest::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
}
inline ::std::string* FetchChatGroupMemberListRequest::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupMemberListRequest::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupMemberListRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupMemberListRequest.groupId)
}

// -------------------------------------------------------------------

// FetchChatGroupMemberListResponse_ChatGroupMemberInfo

// required string userAccount = 1;
inline bool FetchChatGroupMemberListResponse_ChatGroupMemberInfo::has_useraccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_has_useraccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::clear_useraccount() {
  useraccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_useraccount();
}
inline const ::std::string& FetchChatGroupMemberListResponse_ChatGroupMemberInfo::useraccount() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
  return useraccount_.GetNoArena();
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
}
#if LANG_CXX11
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_useraccount(::std::string&& value) {
  set_has_useraccount();
  useraccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
}
#endif
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_useraccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  useraccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
}
inline ::std::string* FetchChatGroupMemberListResponse_ChatGroupMemberInfo::mutable_useraccount() {
  set_has_useraccount();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
  return useraccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupMemberListResponse_ChatGroupMemberInfo::release_useraccount() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
  clear_has_useraccount();
  return useraccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_allocated_useraccount(::std::string* useraccount) {
  if (useraccount != NULL) {
    set_has_useraccount();
  } else {
    clear_has_useraccount();
  }
  useraccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useraccount);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.userAccount)
}

// optional string groupNickName = 2;
inline bool FetchChatGroupMemberListResponse_ChatGroupMemberInfo::has_groupnickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_has_groupnickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::clear_has_groupnickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::clear_groupnickname() {
  groupnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupnickname();
}
inline const ::std::string& FetchChatGroupMemberListResponse_ChatGroupMemberInfo::groupnickname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
  return groupnickname_.GetNoArena();
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_groupnickname(const ::std::string& value) {
  set_has_groupnickname();
  groupnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
}
#if LANG_CXX11
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_groupnickname(::std::string&& value) {
  set_has_groupnickname();
  groupnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
}
#endif
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_groupnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupnickname();
  groupnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_groupnickname(const char* value, size_t size) {
  set_has_groupnickname();
  groupnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
}
inline ::std::string* FetchChatGroupMemberListResponse_ChatGroupMemberInfo::mutable_groupnickname() {
  set_has_groupnickname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
  return groupnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupMemberListResponse_ChatGroupMemberInfo::release_groupnickname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
  clear_has_groupnickname();
  return groupnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupMemberListResponse_ChatGroupMemberInfo::set_allocated_groupnickname(::std::string* groupnickname) {
  if (groupnickname != NULL) {
    set_has_groupnickname();
  } else {
    clear_has_groupnickname();
  }
  groupnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupnickname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo.groupNickName)
}

// -------------------------------------------------------------------

// FetchChatGroupMemberListResponse

// required string sessionID = 1;
inline bool FetchChatGroupMemberListResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupMemberListResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupMemberListResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupMemberListResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchChatGroupMemberListResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchChatGroupMemberListResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
}
#if LANG_CXX11
inline void FetchChatGroupMemberListResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
}
#endif
inline void FetchChatGroupMemberListResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
}
inline void FetchChatGroupMemberListResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
}
inline ::std::string* FetchChatGroupMemberListResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupMemberListResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupMemberListResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupMemberListResponse.sessionID)
}

// required string groupId = 2;
inline bool FetchChatGroupMemberListResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchChatGroupMemberListResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchChatGroupMemberListResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchChatGroupMemberListResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& FetchChatGroupMemberListResponse::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
  return groupid_.GetNoArena();
}
inline void FetchChatGroupMemberListResponse::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
}
#if LANG_CXX11
inline void FetchChatGroupMemberListResponse::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
}
#endif
inline void FetchChatGroupMemberListResponse::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
}
inline void FetchChatGroupMemberListResponse::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
}
inline ::std::string* FetchChatGroupMemberListResponse::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupMemberListResponse::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupMemberListResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupMemberListResponse.groupId)
}

// required .kakaIM.Node.FetchChatGroupMemberListResponse.FetchChatGroupMemberListResponseResult result = 3;
inline bool FetchChatGroupMemberListResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetchChatGroupMemberListResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetchChatGroupMemberListResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetchChatGroupMemberListResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult FetchChatGroupMemberListResponse::result() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListResponse.result)
  return static_cast< ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult >(result_);
}
inline void FetchChatGroupMemberListResponse::set_result(::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult value) {
  assert(::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupMemberListResponse.result)
}

// repeated .kakaIM.Node.FetchChatGroupMemberListResponse.ChatGroupMemberInfo groupMember = 4;
inline int FetchChatGroupMemberListResponse::groupmember_size() const {
  return groupmember_.size();
}
inline void FetchChatGroupMemberListResponse::clear_groupmember() {
  groupmember_.Clear();
}
inline ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo* FetchChatGroupMemberListResponse::mutable_groupmember(int index) {
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupMemberListResponse.groupMember)
  return groupmember_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo >*
FetchChatGroupMemberListResponse::mutable_groupmember() {
  // @@protoc_insertion_point(field_mutable_list:kakaIM.Node.FetchChatGroupMemberListResponse.groupMember)
  return &groupmember_;
}
inline const ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo& FetchChatGroupMemberListResponse::groupmember(int index) const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupMemberListResponse.groupMember)
  return groupmember_.Get(index);
}
inline ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo* FetchChatGroupMemberListResponse::add_groupmember() {
  // @@protoc_insertion_point(field_add:kakaIM.Node.FetchChatGroupMemberListResponse.groupMember)
  return groupmember_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupMemberListResponse_ChatGroupMemberInfo >&
FetchChatGroupMemberListResponse::groupmember() const {
  // @@protoc_insertion_point(field_list:kakaIM.Node.FetchChatGroupMemberListResponse.groupMember)
  return groupmember_;
}

// -------------------------------------------------------------------

// FetchChatGroupListRequest

// required string sessionID = 1;
inline bool FetchChatGroupListRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupListRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupListRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupListRequest::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchChatGroupListRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupListRequest.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchChatGroupListRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupListRequest.sessionID)
}
#if LANG_CXX11
inline void FetchChatGroupListRequest::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupListRequest.sessionID)
}
#endif
inline void FetchChatGroupListRequest::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupListRequest.sessionID)
}
inline void FetchChatGroupListRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupListRequest.sessionID)
}
inline ::std::string* FetchChatGroupListRequest::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupListRequest.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupListRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupListRequest.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupListRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupListRequest.sessionID)
}

// -------------------------------------------------------------------

// FetchChatGroupListResponse_GroupInfo

// required string groupId = 1;
inline bool FetchChatGroupListResponse_GroupInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupListResponse_GroupInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupListResponse_GroupInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupListResponse_GroupInfo::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& FetchChatGroupListResponse_GroupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
  return groupid_.GetNoArena();
}
inline void FetchChatGroupListResponse_GroupInfo::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
}
#if LANG_CXX11
inline void FetchChatGroupListResponse_GroupInfo::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
}
#endif
inline void FetchChatGroupListResponse_GroupInfo::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
}
inline void FetchChatGroupListResponse_GroupInfo::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
}
inline ::std::string* FetchChatGroupListResponse_GroupInfo::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupListResponse_GroupInfo::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupListResponse_GroupInfo::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupId)
}

// required string groupName = 2;
inline bool FetchChatGroupListResponse_GroupInfo::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchChatGroupListResponse_GroupInfo::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchChatGroupListResponse_GroupInfo::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchChatGroupListResponse_GroupInfo::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& FetchChatGroupListResponse_GroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
  return groupname_.GetNoArena();
}
inline void FetchChatGroupListResponse_GroupInfo::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
}
#if LANG_CXX11
inline void FetchChatGroupListResponse_GroupInfo::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
}
#endif
inline void FetchChatGroupListResponse_GroupInfo::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
}
inline void FetchChatGroupListResponse_GroupInfo::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
}
inline ::std::string* FetchChatGroupListResponse_GroupInfo::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupListResponse_GroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
  clear_has_groupname();
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupListResponse_GroupInfo::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupListResponse.GroupInfo.groupName)
}

// -------------------------------------------------------------------

// FetchChatGroupListResponse

// required string sessionID = 1;
inline bool FetchChatGroupListResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchChatGroupListResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchChatGroupListResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchChatGroupListResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& FetchChatGroupListResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupListResponse.sessionID)
  return sessionid_.GetNoArena();
}
inline void FetchChatGroupListResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.FetchChatGroupListResponse.sessionID)
}
#if LANG_CXX11
inline void FetchChatGroupListResponse::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.FetchChatGroupListResponse.sessionID)
}
#endif
inline void FetchChatGroupListResponse::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.FetchChatGroupListResponse.sessionID)
}
inline void FetchChatGroupListResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.FetchChatGroupListResponse.sessionID)
}
inline ::std::string* FetchChatGroupListResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupListResponse.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetchChatGroupListResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.FetchChatGroupListResponse.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetchChatGroupListResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.FetchChatGroupListResponse.sessionID)
}

// repeated .kakaIM.Node.FetchChatGroupListResponse.GroupInfo group = 2;
inline int FetchChatGroupListResponse::group_size() const {
  return group_.size();
}
inline void FetchChatGroupListResponse::clear_group() {
  group_.Clear();
}
inline ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo* FetchChatGroupListResponse::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.FetchChatGroupListResponse.group)
  return group_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo >*
FetchChatGroupListResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:kakaIM.Node.FetchChatGroupListResponse.group)
  return &group_;
}
inline const ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo& FetchChatGroupListResponse::group(int index) const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.FetchChatGroupListResponse.group)
  return group_.Get(index);
}
inline ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo* FetchChatGroupListResponse::add_group() {
  // @@protoc_insertion_point(field_add:kakaIM.Node.FetchChatGroupListResponse.group)
  return group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kakaIM::Node::FetchChatGroupListResponse_GroupInfo >&
FetchChatGroupListResponse::group() const {
  // @@protoc_insertion_point(field_list:kakaIM.Node.FetchChatGroupListResponse.group)
  return group_;
}

// -------------------------------------------------------------------

// GroupChatMessage

// required string sessionID = 1;
inline bool GroupChatMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupChatMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupChatMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupChatMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& GroupChatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.GroupChatMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void GroupChatMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.GroupChatMessage.sessionID)
}
#if LANG_CXX11
inline void GroupChatMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.GroupChatMessage.sessionID)
}
#endif
inline void GroupChatMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.GroupChatMessage.sessionID)
}
inline void GroupChatMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.GroupChatMessage.sessionID)
}
inline ::std::string* GroupChatMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.GroupChatMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.GroupChatMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.GroupChatMessage.sessionID)
}

// required string sender = 2;
inline bool GroupChatMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupChatMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupChatMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupChatMessage::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
inline const ::std::string& GroupChatMessage::sender() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.GroupChatMessage.sender)
  return sender_.GetNoArena();
}
inline void GroupChatMessage::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.GroupChatMessage.sender)
}
#if LANG_CXX11
inline void GroupChatMessage::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.GroupChatMessage.sender)
}
#endif
inline void GroupChatMessage::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.GroupChatMessage.sender)
}
inline void GroupChatMessage::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.GroupChatMessage.sender)
}
inline ::std::string* GroupChatMessage::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.GroupChatMessage.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatMessage::release_sender() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.GroupChatMessage.sender)
  clear_has_sender();
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatMessage::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.GroupChatMessage.sender)
}

// required string groupId = 3;
inline bool GroupChatMessage::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupChatMessage::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupChatMessage::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupChatMessage::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& GroupChatMessage::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.GroupChatMessage.groupId)
  return groupid_.GetNoArena();
}
inline void GroupChatMessage::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.GroupChatMessage.groupId)
}
#if LANG_CXX11
inline void GroupChatMessage::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.GroupChatMessage.groupId)
}
#endif
inline void GroupChatMessage::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.GroupChatMessage.groupId)
}
inline void GroupChatMessage::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.GroupChatMessage.groupId)
}
inline ::std::string* GroupChatMessage::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.GroupChatMessage.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatMessage::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.GroupChatMessage.groupId)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatMessage::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.GroupChatMessage.groupId)
}

// required string content = 4;
inline bool GroupChatMessage::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupChatMessage::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupChatMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupChatMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& GroupChatMessage::content() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.GroupChatMessage.content)
  return content_.GetNoArena();
}
inline void GroupChatMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.GroupChatMessage.content)
}
#if LANG_CXX11
inline void GroupChatMessage::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.GroupChatMessage.content)
}
#endif
inline void GroupChatMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.GroupChatMessage.content)
}
inline void GroupChatMessage::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.GroupChatMessage.content)
}
inline ::std::string* GroupChatMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.GroupChatMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.GroupChatMessage.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.GroupChatMessage.content)
}

// optional uint64 msgId = 5;
inline bool GroupChatMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupChatMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupChatMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupChatMessage::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::uint64 GroupChatMessage::msgid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.GroupChatMessage.msgId)
  return msgid_;
}
inline void GroupChatMessage::set_msgid(::google::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.GroupChatMessage.msgId)
}

// -------------------------------------------------------------------

// PullGroupChatMessage

// required string sessionID = 1;
inline bool PullGroupChatMessage::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullGroupChatMessage::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullGroupChatMessage::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullGroupChatMessage::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& PullGroupChatMessage::sessionid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.PullGroupChatMessage.sessionID)
  return sessionid_.GetNoArena();
}
inline void PullGroupChatMessage::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.PullGroupChatMessage.sessionID)
}
#if LANG_CXX11
inline void PullGroupChatMessage::set_sessionid(::std::string&& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.PullGroupChatMessage.sessionID)
}
#endif
inline void PullGroupChatMessage::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.PullGroupChatMessage.sessionID)
}
inline void PullGroupChatMessage::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.PullGroupChatMessage.sessionID)
}
inline ::std::string* PullGroupChatMessage::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.PullGroupChatMessage.sessionID)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PullGroupChatMessage::release_sessionid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.PullGroupChatMessage.sessionID)
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PullGroupChatMessage::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.PullGroupChatMessage.sessionID)
}

// required string groupID = 2;
inline bool PullGroupChatMessage::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullGroupChatMessage::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullGroupChatMessage::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullGroupChatMessage::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
inline const ::std::string& PullGroupChatMessage::groupid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.PullGroupChatMessage.groupID)
  return groupid_.GetNoArena();
}
inline void PullGroupChatMessage::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kakaIM.Node.PullGroupChatMessage.groupID)
}
#if LANG_CXX11
inline void PullGroupChatMessage::set_groupid(::std::string&& value) {
  set_has_groupid();
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kakaIM.Node.PullGroupChatMessage.groupID)
}
#endif
inline void PullGroupChatMessage::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kakaIM.Node.PullGroupChatMessage.groupID)
}
inline void PullGroupChatMessage::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kakaIM.Node.PullGroupChatMessage.groupID)
}
inline ::std::string* PullGroupChatMessage::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:kakaIM.Node.PullGroupChatMessage.groupID)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PullGroupChatMessage::release_groupid() {
  // @@protoc_insertion_point(field_release:kakaIM.Node.PullGroupChatMessage.groupID)
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PullGroupChatMessage::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:kakaIM.Node.PullGroupChatMessage.groupID)
}

// required uint64 messageID = 3;
inline bool PullGroupChatMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PullGroupChatMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PullGroupChatMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PullGroupChatMessage::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 PullGroupChatMessage::messageid() const {
  // @@protoc_insertion_point(field_get:kakaIM.Node.PullGroupChatMessage.messageID)
  return messageid_;
}
inline void PullGroupChatMessage::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:kakaIM.Node.PullGroupChatMessage.messageID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Node
}  // namespace kakaIM

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kakaIM::Node::ResponseSessionIDMessage_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ResponseSessionIDMessage_Status>() {
  return ::kakaIM::Node::ResponseSessionIDMessage_Status_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ResponseLoginMessage_LoginState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ResponseLoginMessage_LoginState>() {
  return ::kakaIM::Node::ResponseLoginMessage_LoginState_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ResponseLoginMessage_FailureError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ResponseLoginMessage_FailureError>() {
  return ::kakaIM::Node::ResponseLoginMessage_FailureError_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::RegisterMessage_UserSex> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::RegisterMessage_UserSex>() {
  return ::kakaIM::Node::RegisterMessage_UserSex_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ResponseRegisterMessage_RegisterState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ResponseRegisterMessage_RegisterState>() {
  return ::kakaIM::Node::ResponseRegisterMessage_RegisterState_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ResponseRegisterMessage_FailureError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ResponseRegisterMessage_FailureError>() {
  return ::kakaIM::Node::ResponseRegisterMessage_FailureError_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::LogoutMessage_OfflineMailState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::LogoutMessage_OfflineMailState>() {
  return ::kakaIM::Node::LogoutMessage_OfflineMailState_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState>() {
  return ::kakaIM::Node::ResponseLogoutMessage_OfflineMailState_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer>() {
  return ::kakaIM::Node::BuildingRelationshipAnswerMessage_BuildingRelationshipAnswer_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse>() {
  return ::kakaIM::Node::DestoryingRelationshipResponseMessage_DestoryingRelationshipResponse_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::OnlineStateMessage_OnlineState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::OnlineStateMessage_OnlineState>() {
  return ::kakaIM::Node::OnlineStateMessage_OnlineState_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::NotificationMessage_NotificationMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::NotificationMessage_NotificationMessageType>() {
  return ::kakaIM::Node::NotificationMessage_NotificationMessageType_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType>() {
  return ::kakaIM::Node::UpdateUserVCardMessageResponse_UpdateUserVCardStateType_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult>() {
  return ::kakaIM::Node::ChatGroupCreateResponse_ChatGroupCreateResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult>() {
  return ::kakaIM::Node::ChatGroupDisbandResponse_ChatGroupDisbandResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult>() {
  return ::kakaIM::Node::ChatGroupJoinResponse_ChatGroupJoinResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult>() {
  return ::kakaIM::Node::ChatGroupQuitResponse_ChatGroupQuitResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult>() {
  return ::kakaIM::Node::UpdateChatGroupInfoResponse_UpdateChatGroupInfoResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult>() {
  return ::kakaIM::Node::FetchChatGroupInfoResponse_FetchChatGroupInfoResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult>() {
  return ::kakaIM::Node::FetchChatGroupMemberListResponse_FetchChatGroupMemberListResponseResult_descriptor();
}
template <> struct is_proto_enum< ::kakaIM::Node::UserGenderType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kakaIM::Node::UserGenderType>() {
  return ::kakaIM::Node::UserGenderType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KakaIMMessage_2eproto_INCLUDED
