// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCluster.proto

#include "MessageCluster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace kakaIM {
namespace president {
class RequestJoinClusterMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestJoinClusterMessage>
      _instance;
} _RequestJoinClusterMessage_default_instance_;
class ResponseJoinClusterMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseJoinClusterMessage>
      _instance;
} _ResponseJoinClusterMessage_default_instance_;
class HeartBeatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatMessage>
      _instance;
} _HeartBeatMessage_default_instance_;
class ResponseHeartBeatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeartBeatMessage>
      _instance;
} _ResponseHeartBeatMessage_default_instance_;
class NodeSecessionMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeSecessionMessage>
      _instance;
} _NodeSecessionMessage_default_instance_;
class UserOnlineStateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserOnlineStateMessage>
      _instance;
} _UserOnlineStateMessage_default_instance_;
class UpdateUserOnlineStateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateUserOnlineStateMessage>
      _instance;
} _UpdateUserOnlineStateMessage_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerMessage>
      _instance;
} _ServerMessage_default_instance_;
class SessionMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionMessage>
      _instance;
} _SessionMessage_default_instance_;
class RequestMessageIDMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestMessageIDMessage>
      _instance;
} _RequestMessageIDMessage_default_instance_;
class ResponseMessageIDMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseMessageIDMessage>
      _instance;
} _ResponseMessageIDMessage_default_instance_;
class NodeLoadInfoMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeLoadInfoMessage>
      _instance;
} _NodeLoadInfoMessage_default_instance_;
}  // namespace president
}  // namespace kakaIM
namespace protobuf_MessageCluster_2eproto {
void InitDefaultsRequestJoinClusterMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_RequestJoinClusterMessage_default_instance_;
    new (ptr) ::kakaIM::president::RequestJoinClusterMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::RequestJoinClusterMessage::InitAsDefaultInstance();
}

void InitDefaultsRequestJoinClusterMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestJoinClusterMessageImpl);
}

void InitDefaultsResponseJoinClusterMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_ResponseJoinClusterMessage_default_instance_;
    new (ptr) ::kakaIM::president::ResponseJoinClusterMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::ResponseJoinClusterMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseJoinClusterMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseJoinClusterMessageImpl);
}

void InitDefaultsHeartBeatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_HeartBeatMessage_default_instance_;
    new (ptr) ::kakaIM::president::HeartBeatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::HeartBeatMessage::InitAsDefaultInstance();
}

void InitDefaultsHeartBeatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeartBeatMessageImpl);
}

void InitDefaultsResponseHeartBeatMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_ResponseHeartBeatMessage_default_instance_;
    new (ptr) ::kakaIM::president::ResponseHeartBeatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::ResponseHeartBeatMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseHeartBeatMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseHeartBeatMessageImpl);
}

void InitDefaultsNodeSecessionMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_NodeSecessionMessage_default_instance_;
    new (ptr) ::kakaIM::president::NodeSecessionMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::NodeSecessionMessage::InitAsDefaultInstance();
}

void InitDefaultsNodeSecessionMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeSecessionMessageImpl);
}

void InitDefaultsUserOnlineStateMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_UserOnlineStateMessage_default_instance_;
    new (ptr) ::kakaIM::president::UserOnlineStateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::UserOnlineStateMessage::InitAsDefaultInstance();
}

void InitDefaultsUserOnlineStateMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserOnlineStateMessageImpl);
}

void InitDefaultsUpdateUserOnlineStateMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_MessageCluster_2eproto::InitDefaultsUserOnlineStateMessage();
  {
    void* ptr = &::kakaIM::president::_UpdateUserOnlineStateMessage_default_instance_;
    new (ptr) ::kakaIM::president::UpdateUserOnlineStateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::UpdateUserOnlineStateMessage::InitAsDefaultInstance();
}

void InitDefaultsUpdateUserOnlineStateMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateUserOnlineStateMessageImpl);
}

void InitDefaultsServerMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_ServerMessage_default_instance_;
    new (ptr) ::kakaIM::president::ServerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::ServerMessage::InitAsDefaultInstance();
}

void InitDefaultsServerMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerMessageImpl);
}

void InitDefaultsSessionMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_SessionMessage_default_instance_;
    new (ptr) ::kakaIM::president::SessionMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::SessionMessage::InitAsDefaultInstance();
}

void InitDefaultsSessionMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionMessageImpl);
}

void InitDefaultsRequestMessageIDMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_RequestMessageIDMessage_default_instance_;
    new (ptr) ::kakaIM::president::RequestMessageIDMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::RequestMessageIDMessage::InitAsDefaultInstance();
}

void InitDefaultsRequestMessageIDMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestMessageIDMessageImpl);
}

void InitDefaultsResponseMessageIDMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_ResponseMessageIDMessage_default_instance_;
    new (ptr) ::kakaIM::president::ResponseMessageIDMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::ResponseMessageIDMessage::InitAsDefaultInstance();
}

void InitDefaultsResponseMessageIDMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseMessageIDMessageImpl);
}

void InitDefaultsNodeLoadInfoMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::president::_NodeLoadInfoMessage_default_instance_;
    new (ptr) ::kakaIM::president::NodeLoadInfoMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::president::NodeLoadInfoMessage::InitAsDefaultInstance();
}

void InitDefaultsNodeLoadInfoMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeLoadInfoMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, invitationcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, serviceaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestJoinClusterMessage, serviceport_),
  0,
  1,
  3,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseJoinClusterMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseJoinClusterMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseJoinClusterMessage, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::HeartBeatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::HeartBeatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::HeartBeatMessage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::HeartBeatMessage, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseHeartBeatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseHeartBeatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseHeartBeatMessage, timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeSecessionMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeSecessionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeSecessionMessage, serverid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UserOnlineStateMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UserOnlineStateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UserOnlineStateMessage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UserOnlineStateMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UserOnlineStateMessage, userstate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UpdateUserOnlineStateMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UpdateUserOnlineStateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::UpdateUserOnlineStateMessage, useronlinestate_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ServerMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ServerMessage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ServerMessage, messagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ServerMessage, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ServerMessage, targetuser_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, targetserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, targetsessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, messagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::SessionMessage, content_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestMessageIDMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestMessageIDMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestMessageIDMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestMessageIDMessage, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::RequestMessageIDMessage, requestid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseMessageIDMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseMessageIDMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseMessageIDMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseMessageIDMessage, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::ResponseMessageIDMessage, requestid_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeLoadInfoMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeLoadInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeLoadInfoMessage, connectioncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeLoadInfoMessage, cpuusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::president::NodeLoadInfoMessage, memusage_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::kakaIM::president::RequestJoinClusterMessage)},
  { 17, 23, sizeof(::kakaIM::president::ResponseJoinClusterMessage)},
  { 24, 31, sizeof(::kakaIM::president::HeartBeatMessage)},
  { 33, 39, sizeof(::kakaIM::president::ResponseHeartBeatMessage)},
  { 40, 46, sizeof(::kakaIM::president::NodeSecessionMessage)},
  { 47, 55, sizeof(::kakaIM::president::UserOnlineStateMessage)},
  { 58, 64, sizeof(::kakaIM::president::UpdateUserOnlineStateMessage)},
  { 65, 74, sizeof(::kakaIM::president::ServerMessage)},
  { 78, 88, sizeof(::kakaIM::president::SessionMessage)},
  { 93, 101, sizeof(::kakaIM::president::RequestMessageIDMessage)},
  { 104, 112, sizeof(::kakaIM::president::ResponseMessageIDMessage)},
  { 115, 123, sizeof(::kakaIM::president::NodeLoadInfoMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_RequestJoinClusterMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_ResponseJoinClusterMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_HeartBeatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_ResponseHeartBeatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_NodeSecessionMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_UserOnlineStateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_UpdateUserOnlineStateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_ServerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_SessionMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_RequestMessageIDMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_ResponseMessageIDMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::president::_NodeLoadInfoMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "MessageCluster.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024MessageCluster.proto\022\020kakaIM.president"
      "\"\224\001\n\031RequestJoinClusterMessage\022\020\n\010server"
      "ID\030\001 \002(\t\022\026\n\016invitationCode\030\002 \002(\t\022\021\n\tLong"
      "itude\030\003 \002(\002\022\020\n\010latitude\030\004 \002(\002\022\023\n\013service"
      "Addr\030\005 \002(\t\022\023\n\013servicePort\030\006 \002(\005\"\215\001\n\032Resp"
      "onseJoinClusterMessage\022G\n\006result\030\001 \002(\01627"
      ".kakaIM.president.ResponseJoinClusterMes"
      "sage.JoinResult\"&\n\nJoinResult\022\013\n\007Success"
      "\020\001\022\013\n\007Failure\020\002\"7\n\020HeartBeatMessage\022\020\n\010s"
      "erverID\030\001 \002(\t\022\021\n\ttimestamp\030\002 \002(\t\"-\n\030Resp"
      "onseHeartBeatMessage\022\021\n\ttimestamp\030\002 \002(\t\""
      "(\n\024NodeSecessionMessage\022\020\n\010serverID\030\001 \002("
      "\t\"\277\001\n\026UserOnlineStateMessage\022\020\n\010serverID"
      "\030\001 \002(\t\022\023\n\013userAccount\030\002 \002(\t\022G\n\tuserState"
      "\030\003 \002(\01624.kakaIM.president.UserOnlineStat"
      "eMessage.OnlineState\"5\n\013OnlineState\022\n\n\006O"
      "nline\020\001\022\013\n\007Offline\020\002\022\r\n\tInvisible\020\003\"a\n\034U"
      "pdateUserOnlineStateMessage\022A\n\017userOnlin"
      "eState\030\001 \003(\0132(.kakaIM.president.UserOnli"
      "neStateMessage\"[\n\rServerMessage\022\020\n\010serve"
      "rID\030\001 \002(\t\022\023\n\013messageType\030\002 \002(\t\022\017\n\007conten"
      "t\030\003 \002(\014\022\022\n\ntargetUser\030\004 \002(\t\"y\n\016SessionMe"
      "ssage\022\020\n\010serverID\030\001 \002(\t\022\026\n\016targetServerI"
      "D\030\002 \002(\t\022\027\n\017targetSessionID\030\003 \002(\t\022\023\n\013mess"
      "ageType\030\004 \002(\t\022\017\n\007content\030\005 \002(\014\"S\n\027Reques"
      "tMessageIDMessage\022\023\n\013userAccount\030\001 \002(\t\022\020"
      "\n\010serverID\030\002 \002(\t\022\021\n\trequestID\030\003 \002(\014\"U\n\030R"
      "esponseMessageIDMessage\022\023\n\013userAccount\030\001"
      " \002(\t\022\021\n\tmessageID\030\002 \002(\004\022\021\n\trequestID\030\003 \002"
      "(\014\"R\n\023NodeLoadInfoMessage\022\027\n\017connectionC"
      "ount\030\001 \002(\004\022\020\n\010cpuUsage\030\002 \002(\002\022\020\n\010memUsage"
      "\030\003 \002(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageCluster.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MessageCluster_2eproto
namespace kakaIM {
namespace president {
const ::google::protobuf::EnumDescriptor* ResponseJoinClusterMessage_JoinResult_descriptor() {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MessageCluster_2eproto::file_level_enum_descriptors[0];
}
bool ResponseJoinClusterMessage_JoinResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseJoinClusterMessage_JoinResult ResponseJoinClusterMessage::Success;
const ResponseJoinClusterMessage_JoinResult ResponseJoinClusterMessage::Failure;
const ResponseJoinClusterMessage_JoinResult ResponseJoinClusterMessage::JoinResult_MIN;
const ResponseJoinClusterMessage_JoinResult ResponseJoinClusterMessage::JoinResult_MAX;
const int ResponseJoinClusterMessage::JoinResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserOnlineStateMessage_OnlineState_descriptor() {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MessageCluster_2eproto::file_level_enum_descriptors[1];
}
bool UserOnlineStateMessage_OnlineState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserOnlineStateMessage_OnlineState UserOnlineStateMessage::Online;
const UserOnlineStateMessage_OnlineState UserOnlineStateMessage::Offline;
const UserOnlineStateMessage_OnlineState UserOnlineStateMessage::Invisible;
const UserOnlineStateMessage_OnlineState UserOnlineStateMessage::OnlineState_MIN;
const UserOnlineStateMessage_OnlineState UserOnlineStateMessage::OnlineState_MAX;
const int UserOnlineStateMessage::OnlineState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RequestJoinClusterMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestJoinClusterMessage::kServerIDFieldNumber;
const int RequestJoinClusterMessage::kInvitationCodeFieldNumber;
const int RequestJoinClusterMessage::kLongitudeFieldNumber;
const int RequestJoinClusterMessage::kLatitudeFieldNumber;
const int RequestJoinClusterMessage::kServiceAddrFieldNumber;
const int RequestJoinClusterMessage::kServicePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestJoinClusterMessage::RequestJoinClusterMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsRequestJoinClusterMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.RequestJoinClusterMessage)
}
RequestJoinClusterMessage::RequestJoinClusterMessage(const RequestJoinClusterMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  invitationcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_invitationcode()) {
    invitationcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitationcode_);
  }
  serviceaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serviceaddr()) {
    serviceaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceaddr_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&serviceport_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(serviceport_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.RequestJoinClusterMessage)
}

void RequestJoinClusterMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitationcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serviceport_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(serviceport_));
}

RequestJoinClusterMessage::~RequestJoinClusterMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.RequestJoinClusterMessage)
  SharedDtor();
}

void RequestJoinClusterMessage::SharedDtor() {
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitationcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestJoinClusterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestJoinClusterMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestJoinClusterMessage& RequestJoinClusterMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsRequestJoinClusterMessage();
  return *internal_default_instance();
}

RequestJoinClusterMessage* RequestJoinClusterMessage::New(::google::protobuf::Arena* arena) const {
  RequestJoinClusterMessage* n = new RequestJoinClusterMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestJoinClusterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.RequestJoinClusterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!invitationcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*invitationcode_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!serviceaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serviceaddr_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&serviceport_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(serviceport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestJoinClusterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.RequestJoinClusterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.RequestJoinClusterMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string invitationCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitationcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitationcode().data(), static_cast<int>(this->invitationcode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.RequestJoinClusterMessage.invitationCode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string serviceAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceaddr().data(), static_cast<int>(this->serviceaddr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.RequestJoinClusterMessage.serviceAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 servicePort = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_serviceport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serviceport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.RequestJoinClusterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.RequestJoinClusterMessage)
  return false;
#undef DO_
}

void RequestJoinClusterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.RequestJoinClusterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestJoinClusterMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // required string invitationCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitationcode().data(), static_cast<int>(this->invitationcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestJoinClusterMessage.invitationCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitationcode(), output);
  }

  // required float Longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // required float latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  // required string serviceAddr = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceaddr().data(), static_cast<int>(this->serviceaddr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestJoinClusterMessage.serviceAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serviceaddr(), output);
  }

  // required int32 servicePort = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->serviceport(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.RequestJoinClusterMessage)
}

::google::protobuf::uint8* RequestJoinClusterMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.RequestJoinClusterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestJoinClusterMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // required string invitationCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitationcode().data(), static_cast<int>(this->invitationcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestJoinClusterMessage.invitationCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitationcode(), target);
  }

  // required float Longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // required float latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  // required string serviceAddr = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceaddr().data(), static_cast<int>(this->serviceaddr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestJoinClusterMessage.serviceAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serviceaddr(), target);
  }

  // required int32 servicePort = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->serviceport(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.RequestJoinClusterMessage)
  return target;
}

size_t RequestJoinClusterMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.RequestJoinClusterMessage)
  size_t total_size = 0;

  if (has_serverid()) {
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }

  if (has_invitationcode()) {
    // required string invitationCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->invitationcode());
  }

  if (has_serviceaddr()) {
    // required string serviceAddr = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceaddr());
  }

  if (has_longitude()) {
    // required float Longitude = 3;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float latitude = 4;
    total_size += 1 + 4;
  }

  if (has_serviceport()) {
    // required int32 servicePort = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serviceport());
  }

  return total_size;
}
size_t RequestJoinClusterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.RequestJoinClusterMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());

    // required string invitationCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->invitationcode());

    // required string serviceAddr = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceaddr());

    // required float Longitude = 3;
    total_size += 1 + 4;

    // required float latitude = 4;
    total_size += 1 + 4;

    // required int32 servicePort = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serviceport());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestJoinClusterMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.RequestJoinClusterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestJoinClusterMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestJoinClusterMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.RequestJoinClusterMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.RequestJoinClusterMessage)
    MergeFrom(*source);
  }
}

void RequestJoinClusterMessage::MergeFrom(const RequestJoinClusterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.RequestJoinClusterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverid();
      serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_invitationcode();
      invitationcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitationcode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_serviceaddr();
      serviceaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceaddr_);
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      serviceport_ = from.serviceport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestJoinClusterMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.RequestJoinClusterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestJoinClusterMessage::CopyFrom(const RequestJoinClusterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.RequestJoinClusterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinClusterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void RequestJoinClusterMessage::Swap(RequestJoinClusterMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestJoinClusterMessage::InternalSwap(RequestJoinClusterMessage* other) {
  using std::swap;
  serverid_.Swap(&other->serverid_);
  invitationcode_.Swap(&other->invitationcode_);
  serviceaddr_.Swap(&other->serviceaddr_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(serviceport_, other->serviceport_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestJoinClusterMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseJoinClusterMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseJoinClusterMessage::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseJoinClusterMessage::ResponseJoinClusterMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsResponseJoinClusterMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.ResponseJoinClusterMessage)
}
ResponseJoinClusterMessage::ResponseJoinClusterMessage(const ResponseJoinClusterMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.ResponseJoinClusterMessage)
}

void ResponseJoinClusterMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
}

ResponseJoinClusterMessage::~ResponseJoinClusterMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.ResponseJoinClusterMessage)
  SharedDtor();
}

void ResponseJoinClusterMessage::SharedDtor() {
}

void ResponseJoinClusterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseJoinClusterMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseJoinClusterMessage& ResponseJoinClusterMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsResponseJoinClusterMessage();
  return *internal_default_instance();
}

ResponseJoinClusterMessage* ResponseJoinClusterMessage::New(::google::protobuf::Arena* arena) const {
  ResponseJoinClusterMessage* n = new ResponseJoinClusterMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseJoinClusterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.ResponseJoinClusterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseJoinClusterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.ResponseJoinClusterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kakaIM.president.ResponseJoinClusterMessage.JoinResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::president::ResponseJoinClusterMessage_JoinResult_IsValid(value)) {
            set_result(static_cast< ::kakaIM::president::ResponseJoinClusterMessage_JoinResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.ResponseJoinClusterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.ResponseJoinClusterMessage)
  return false;
#undef DO_
}

void ResponseJoinClusterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.ResponseJoinClusterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .kakaIM.president.ResponseJoinClusterMessage.JoinResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.ResponseJoinClusterMessage)
}

::google::protobuf::uint8* ResponseJoinClusterMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.ResponseJoinClusterMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .kakaIM.president.ResponseJoinClusterMessage.JoinResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.ResponseJoinClusterMessage)
  return target;
}

size_t ResponseJoinClusterMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.ResponseJoinClusterMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .kakaIM.president.ResponseJoinClusterMessage.JoinResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseJoinClusterMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.ResponseJoinClusterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseJoinClusterMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseJoinClusterMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.ResponseJoinClusterMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.ResponseJoinClusterMessage)
    MergeFrom(*source);
  }
}

void ResponseJoinClusterMessage::MergeFrom(const ResponseJoinClusterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.ResponseJoinClusterMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ResponseJoinClusterMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.ResponseJoinClusterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseJoinClusterMessage::CopyFrom(const ResponseJoinClusterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.ResponseJoinClusterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseJoinClusterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResponseJoinClusterMessage::Swap(ResponseJoinClusterMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseJoinClusterMessage::InternalSwap(ResponseJoinClusterMessage* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseJoinClusterMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartBeatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatMessage::kServerIDFieldNumber;
const int HeartBeatMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatMessage::HeartBeatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsHeartBeatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.HeartBeatMessage)
}
HeartBeatMessage::HeartBeatMessage(const HeartBeatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.HeartBeatMessage)
}

void HeartBeatMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartBeatMessage::~HeartBeatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.HeartBeatMessage)
  SharedDtor();
}

void HeartBeatMessage::SharedDtor() {
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeatMessage& HeartBeatMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsHeartBeatMessage();
  return *internal_default_instance();
}

HeartBeatMessage* HeartBeatMessage::New(::google::protobuf::Arena* arena) const {
  HeartBeatMessage* n = new HeartBeatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timestamp_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.HeartBeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.HeartBeatMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.HeartBeatMessage.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.HeartBeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.HeartBeatMessage)
  return false;
#undef DO_
}

void HeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.HeartBeatMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // required string timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.HeartBeatMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.HeartBeatMessage)
}

::google::protobuf::uint8* HeartBeatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.HeartBeatMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // required string timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.HeartBeatMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.HeartBeatMessage)
  return target;
}

size_t HeartBeatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.HeartBeatMessage)
  size_t total_size = 0;

  if (has_serverid()) {
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }

  if (has_timestamp()) {
    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  return total_size;
}
size_t HeartBeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.HeartBeatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());

    // required string timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.HeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.HeartBeatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.HeartBeatMessage)
    MergeFrom(*source);
  }
}

void HeartBeatMessage::MergeFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.HeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverid();
      serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
  }
}

void HeartBeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.HeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatMessage::CopyFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.HeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeartBeatMessage::Swap(HeartBeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatMessage::InternalSwap(HeartBeatMessage* other) {
  using std::swap;
  serverid_.Swap(&other->serverid_);
  timestamp_.Swap(&other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseHeartBeatMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeartBeatMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeartBeatMessage::ResponseHeartBeatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsResponseHeartBeatMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.ResponseHeartBeatMessage)
}
ResponseHeartBeatMessage::ResponseHeartBeatMessage(const ResponseHeartBeatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp()) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.ResponseHeartBeatMessage)
}

void ResponseHeartBeatMessage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseHeartBeatMessage::~ResponseHeartBeatMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.ResponseHeartBeatMessage)
  SharedDtor();
}

void ResponseHeartBeatMessage::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseHeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeartBeatMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeartBeatMessage& ResponseHeartBeatMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsResponseHeartBeatMessage();
  return *internal_default_instance();
}

ResponseHeartBeatMessage* ResponseHeartBeatMessage::New(::google::protobuf::Arena* arena) const {
  ResponseHeartBeatMessage* n = new ResponseHeartBeatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeartBeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.ResponseHeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!timestamp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*timestamp_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseHeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.ResponseHeartBeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.ResponseHeartBeatMessage.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.ResponseHeartBeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.ResponseHeartBeatMessage)
  return false;
#undef DO_
}

void ResponseHeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.ResponseHeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ResponseHeartBeatMessage.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.ResponseHeartBeatMessage)
}

::google::protobuf::uint8* ResponseHeartBeatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.ResponseHeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ResponseHeartBeatMessage.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.ResponseHeartBeatMessage)
  return target;
}

size_t ResponseHeartBeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.ResponseHeartBeatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string timestamp = 2;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeartBeatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.ResponseHeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeartBeatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeartBeatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.ResponseHeartBeatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.ResponseHeartBeatMessage)
    MergeFrom(*source);
  }
}

void ResponseHeartBeatMessage::MergeFrom(const ResponseHeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.ResponseHeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    set_has_timestamp();
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void ResponseHeartBeatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.ResponseHeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeartBeatMessage::CopyFrom(const ResponseHeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.ResponseHeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeartBeatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResponseHeartBeatMessage::Swap(ResponseHeartBeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeartBeatMessage::InternalSwap(ResponseHeartBeatMessage* other) {
  using std::swap;
  timestamp_.Swap(&other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeartBeatMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeSecessionMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeSecessionMessage::kServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeSecessionMessage::NodeSecessionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsNodeSecessionMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.NodeSecessionMessage)
}
NodeSecessionMessage::NodeSecessionMessage(const NodeSecessionMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.NodeSecessionMessage)
}

void NodeSecessionMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeSecessionMessage::~NodeSecessionMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.NodeSecessionMessage)
  SharedDtor();
}

void NodeSecessionMessage::SharedDtor() {
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeSecessionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeSecessionMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeSecessionMessage& NodeSecessionMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsNodeSecessionMessage();
  return *internal_default_instance();
}

NodeSecessionMessage* NodeSecessionMessage::New(::google::protobuf::Arena* arena) const {
  NodeSecessionMessage* n = new NodeSecessionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeSecessionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.NodeSecessionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*serverid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeSecessionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.NodeSecessionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.NodeSecessionMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.NodeSecessionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.NodeSecessionMessage)
  return false;
#undef DO_
}

void NodeSecessionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.NodeSecessionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.NodeSecessionMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.NodeSecessionMessage)
}

::google::protobuf::uint8* NodeSecessionMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.NodeSecessionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.NodeSecessionMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.NodeSecessionMessage)
  return target;
}

size_t NodeSecessionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.NodeSecessionMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string serverID = 1;
  if (has_serverid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeSecessionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.NodeSecessionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeSecessionMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeSecessionMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.NodeSecessionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.NodeSecessionMessage)
    MergeFrom(*source);
  }
}

void NodeSecessionMessage::MergeFrom(const NodeSecessionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.NodeSecessionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serverid()) {
    set_has_serverid();
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
}

void NodeSecessionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.NodeSecessionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSecessionMessage::CopyFrom(const NodeSecessionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.NodeSecessionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSecessionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NodeSecessionMessage::Swap(NodeSecessionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeSecessionMessage::InternalSwap(NodeSecessionMessage* other) {
  using std::swap;
  serverid_.Swap(&other->serverid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeSecessionMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserOnlineStateMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserOnlineStateMessage::kServerIDFieldNumber;
const int UserOnlineStateMessage::kUserAccountFieldNumber;
const int UserOnlineStateMessage::kUserStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserOnlineStateMessage::UserOnlineStateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsUserOnlineStateMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.UserOnlineStateMessage)
}
UserOnlineStateMessage::UserOnlineStateMessage(const UserOnlineStateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  userstate_ = from.userstate_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.UserOnlineStateMessage)
}

void UserOnlineStateMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userstate_ = 1;
}

UserOnlineStateMessage::~UserOnlineStateMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.UserOnlineStateMessage)
  SharedDtor();
}

void UserOnlineStateMessage::SharedDtor() {
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserOnlineStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOnlineStateMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserOnlineStateMessage& UserOnlineStateMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsUserOnlineStateMessage();
  return *internal_default_instance();
}

UserOnlineStateMessage* UserOnlineStateMessage::New(::google::protobuf::Arena* arena) const {
  UserOnlineStateMessage* n = new UserOnlineStateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserOnlineStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.UserOnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useraccount_.UnsafeRawStringPointer())->clear();
    }
    userstate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserOnlineStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.UserOnlineStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.UserOnlineStateMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.UserOnlineStateMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.president.UserOnlineStateMessage.OnlineState userState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::president::UserOnlineStateMessage_OnlineState_IsValid(value)) {
            set_userstate(static_cast< ::kakaIM::president::UserOnlineStateMessage_OnlineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.UserOnlineStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.UserOnlineStateMessage)
  return false;
#undef DO_
}

void UserOnlineStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.UserOnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.UserOnlineStateMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.UserOnlineStateMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->useraccount(), output);
  }

  // required .kakaIM.president.UserOnlineStateMessage.OnlineState userState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->userstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.UserOnlineStateMessage)
}

::google::protobuf::uint8* UserOnlineStateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.UserOnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.UserOnlineStateMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // required string userAccount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.UserOnlineStateMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->useraccount(), target);
  }

  // required .kakaIM.president.UserOnlineStateMessage.OnlineState userState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->userstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.UserOnlineStateMessage)
  return target;
}

size_t UserOnlineStateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.UserOnlineStateMessage)
  size_t total_size = 0;

  if (has_serverid()) {
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }

  if (has_useraccount()) {
    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_userstate()) {
    // required .kakaIM.president.UserOnlineStateMessage.OnlineState userState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->userstate());
  }

  return total_size;
}
size_t UserOnlineStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.UserOnlineStateMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());

    // required string userAccount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required .kakaIM.president.UserOnlineStateMessage.OnlineState userState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->userstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOnlineStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.UserOnlineStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserOnlineStateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserOnlineStateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.UserOnlineStateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.UserOnlineStateMessage)
    MergeFrom(*source);
  }
}

void UserOnlineStateMessage::MergeFrom(const UserOnlineStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.UserOnlineStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverid();
      serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      userstate_ = from.userstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserOnlineStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.UserOnlineStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineStateMessage::CopyFrom(const UserOnlineStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.UserOnlineStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineStateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserOnlineStateMessage::Swap(UserOnlineStateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserOnlineStateMessage::InternalSwap(UserOnlineStateMessage* other) {
  using std::swap;
  serverid_.Swap(&other->serverid_);
  useraccount_.Swap(&other->useraccount_);
  swap(userstate_, other->userstate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserOnlineStateMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateUserOnlineStateMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateUserOnlineStateMessage::kUserOnlineStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateUserOnlineStateMessage::UpdateUserOnlineStateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsUpdateUserOnlineStateMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.UpdateUserOnlineStateMessage)
}
UpdateUserOnlineStateMessage::UpdateUserOnlineStateMessage(const UpdateUserOnlineStateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      useronlinestate_(from.useronlinestate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.UpdateUserOnlineStateMessage)
}

void UpdateUserOnlineStateMessage::SharedCtor() {
  _cached_size_ = 0;
}

UpdateUserOnlineStateMessage::~UpdateUserOnlineStateMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.UpdateUserOnlineStateMessage)
  SharedDtor();
}

void UpdateUserOnlineStateMessage::SharedDtor() {
}

void UpdateUserOnlineStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserOnlineStateMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateUserOnlineStateMessage& UpdateUserOnlineStateMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsUpdateUserOnlineStateMessage();
  return *internal_default_instance();
}

UpdateUserOnlineStateMessage* UpdateUserOnlineStateMessage::New(::google::protobuf::Arena* arena) const {
  UpdateUserOnlineStateMessage* n = new UpdateUserOnlineStateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateUserOnlineStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.UpdateUserOnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  useronlinestate_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateUserOnlineStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.UpdateUserOnlineStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kakaIM.president.UserOnlineStateMessage userOnlineState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_useronlinestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.UpdateUserOnlineStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.UpdateUserOnlineStateMessage)
  return false;
#undef DO_
}

void UpdateUserOnlineStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.UpdateUserOnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kakaIM.president.UserOnlineStateMessage userOnlineState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->useronlinestate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->useronlinestate(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.UpdateUserOnlineStateMessage)
}

::google::protobuf::uint8* UpdateUserOnlineStateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.UpdateUserOnlineStateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kakaIM.president.UserOnlineStateMessage userOnlineState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->useronlinestate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->useronlinestate(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.UpdateUserOnlineStateMessage)
  return target;
}

size_t UpdateUserOnlineStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.UpdateUserOnlineStateMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .kakaIM.president.UserOnlineStateMessage userOnlineState = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->useronlinestate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->useronlinestate(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserOnlineStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.UpdateUserOnlineStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserOnlineStateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateUserOnlineStateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.UpdateUserOnlineStateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.UpdateUserOnlineStateMessage)
    MergeFrom(*source);
  }
}

void UpdateUserOnlineStateMessage::MergeFrom(const UpdateUserOnlineStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.UpdateUserOnlineStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  useronlinestate_.MergeFrom(from.useronlinestate_);
}

void UpdateUserOnlineStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.UpdateUserOnlineStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserOnlineStateMessage::CopyFrom(const UpdateUserOnlineStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.UpdateUserOnlineStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserOnlineStateMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->useronlinestate())) return false;
  return true;
}

void UpdateUserOnlineStateMessage::Swap(UpdateUserOnlineStateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateUserOnlineStateMessage::InternalSwap(UpdateUserOnlineStateMessage* other) {
  using std::swap;
  useronlinestate_.InternalSwap(&other->useronlinestate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateUserOnlineStateMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMessage::kServerIDFieldNumber;
const int ServerMessage::kMessageTypeFieldNumber;
const int ServerMessage::kContentFieldNumber;
const int ServerMessage::kTargetUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessage::ServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsServerMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_messagetype()) {
    messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  targetuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetuser()) {
    targetuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetuser_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.ServerMessage)
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetuser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerMessage& ServerMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsServerMessage();
  return *internal_default_instance();
}

ServerMessage* ServerMessage::New(::google::protobuf::Arena* arena) const {
  ServerMessage* n = new ServerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!messagetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*messagetype_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!targetuser_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetuser_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.ServerMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string messageType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetype().data(), static_cast<int>(this->messagetype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.ServerMessage.messageType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetUser = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetuser().data(), static_cast<int>(this->targetuser().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.ServerMessage.targetUser");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ServerMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // required string messageType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), static_cast<int>(this->messagetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ServerMessage.messageType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->messagetype(), output);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required string targetUser = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetuser().data(), static_cast<int>(this->targetuser().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ServerMessage.targetUser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->targetuser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.ServerMessage)
}

::google::protobuf::uint8* ServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ServerMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // required string messageType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), static_cast<int>(this->messagetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ServerMessage.messageType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messagetype(), target);
  }

  // required bytes content = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required string targetUser = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetuser().data(), static_cast<int>(this->targetuser().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ServerMessage.targetUser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetuser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.ServerMessage)
  return target;
}

size_t ServerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.ServerMessage)
  size_t total_size = 0;

  if (has_serverid()) {
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }

  if (has_messagetype()) {
    // required string messageType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());
  }

  if (has_content()) {
    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_targetuser()) {
    // required string targetUser = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetuser());
  }

  return total_size;
}
size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.ServerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());

    // required string messageType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());

    // required bytes content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required string targetUser = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetuser());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.ServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverid();
      serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_messagetype();
      messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_targetuser();
      targetuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetuser_);
    }
  }
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  serverid_.Swap(&other->serverid_);
  messagetype_.Swap(&other->messagetype_);
  content_.Swap(&other->content_);
  targetuser_.Swap(&other->targetuser_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionMessage::kServerIDFieldNumber;
const int SessionMessage::kTargetServerIDFieldNumber;
const int SessionMessage::kTargetSessionIDFieldNumber;
const int SessionMessage::kMessageTypeFieldNumber;
const int SessionMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionMessage::SessionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsSessionMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.SessionMessage)
}
SessionMessage::SessionMessage(const SessionMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  targetserverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetserverid()) {
    targetserverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetserverid_);
  }
  targetsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetsessionid()) {
    targetsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetsessionid_);
  }
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_messagetype()) {
    messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.SessionMessage)
}

void SessionMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetserverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SessionMessage::~SessionMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.SessionMessage)
  SharedDtor();
}

void SessionMessage::SharedDtor() {
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetserverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetsessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionMessage& SessionMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsSessionMessage();
  return *internal_default_instance();
}

SessionMessage* SessionMessage::New(::google::protobuf::Arena* arena) const {
  SessionMessage* n = new SessionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.SessionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!targetserverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetserverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!targetsessionid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetsessionid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!messagetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*messagetype_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.SessionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.SessionMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetServerID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetserverid().data(), static_cast<int>(this->targetserverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.SessionMessage.targetServerID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string targetSessionID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetsessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetsessionid().data(), static_cast<int>(this->targetsessionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.SessionMessage.targetSessionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string messageType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetype().data(), static_cast<int>(this->messagetype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.SessionMessage.messageType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.SessionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.SessionMessage)
  return false;
#undef DO_
}

void SessionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.SessionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // required string targetServerID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetserverid().data(), static_cast<int>(this->targetserverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.targetServerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->targetserverid(), output);
  }

  // required string targetSessionID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetsessionid().data(), static_cast<int>(this->targetsessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.targetSessionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetsessionid(), output);
  }

  // required string messageType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), static_cast<int>(this->messagetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.messageType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messagetype(), output);
  }

  // required bytes content = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.SessionMessage)
}

::google::protobuf::uint8* SessionMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.SessionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serverID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // required string targetServerID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetserverid().data(), static_cast<int>(this->targetserverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.targetServerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetserverid(), target);
  }

  // required string targetSessionID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetsessionid().data(), static_cast<int>(this->targetsessionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.targetSessionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetsessionid(), target);
  }

  // required string messageType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), static_cast<int>(this->messagetype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.SessionMessage.messageType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messagetype(), target);
  }

  // required bytes content = 5;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.SessionMessage)
  return target;
}

size_t SessionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.SessionMessage)
  size_t total_size = 0;

  if (has_serverid()) {
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }

  if (has_targetserverid()) {
    // required string targetServerID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetserverid());
  }

  if (has_targetsessionid()) {
    // required string targetSessionID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetsessionid());
  }

  if (has_messagetype()) {
    // required string messageType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());
  }

  if (has_content()) {
    // required bytes content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  return total_size;
}
size_t SessionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.SessionMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string serverID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());

    // required string targetServerID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetserverid());

    // required string targetSessionID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetsessionid());

    // required string messageType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());

    // required bytes content = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.SessionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.SessionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.SessionMessage)
    MergeFrom(*source);
  }
}

void SessionMessage::MergeFrom(const SessionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.SessionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverid();
      serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_targetserverid();
      targetserverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetserverid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_targetsessionid();
      targetsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetsessionid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_messagetype();
      messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
  }
}

void SessionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.SessionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionMessage::CopyFrom(const SessionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.SessionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void SessionMessage::Swap(SessionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionMessage::InternalSwap(SessionMessage* other) {
  using std::swap;
  serverid_.Swap(&other->serverid_);
  targetserverid_.Swap(&other->targetserverid_);
  targetsessionid_.Swap(&other->targetsessionid_);
  messagetype_.Swap(&other->messagetype_);
  content_.Swap(&other->content_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestMessageIDMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestMessageIDMessage::kUserAccountFieldNumber;
const int RequestMessageIDMessage::kServerIDFieldNumber;
const int RequestMessageIDMessage::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestMessageIDMessage::RequestMessageIDMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsRequestMessageIDMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.RequestMessageIDMessage)
}
RequestMessageIDMessage::RequestMessageIDMessage(const RequestMessageIDMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverid()) {
    serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
  }
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requestid()) {
    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.RequestMessageIDMessage)
}

void RequestMessageIDMessage::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestMessageIDMessage::~RequestMessageIDMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.RequestMessageIDMessage)
  SharedDtor();
}

void RequestMessageIDMessage::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestMessageIDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMessageIDMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestMessageIDMessage& RequestMessageIDMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsRequestMessageIDMessage();
  return *internal_default_instance();
}

RequestMessageIDMessage* RequestMessageIDMessage::New(::google::protobuf::Arena* arena) const {
  RequestMessageIDMessage* n = new RequestMessageIDMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestMessageIDMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.RequestMessageIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useraccount_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!serverid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serverid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!requestid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*requestid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestMessageIDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.RequestMessageIDMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.RequestMessageIDMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string serverID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), static_cast<int>(this->serverid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.RequestMessageIDMessage.serverID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes requestID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_requestid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.RequestMessageIDMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.RequestMessageIDMessage)
  return false;
#undef DO_
}

void RequestMessageIDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.RequestMessageIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestMessageIDMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required string serverID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestMessageIDMessage.serverID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // required bytes requestID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.RequestMessageIDMessage)
}

::google::protobuf::uint8* RequestMessageIDMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.RequestMessageIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestMessageIDMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required string serverID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), static_cast<int>(this->serverid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.RequestMessageIDMessage.serverID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // required bytes requestID = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.RequestMessageIDMessage)
  return target;
}

size_t RequestMessageIDMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.RequestMessageIDMessage)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_serverid()) {
    // required string serverID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());
  }

  if (has_requestid()) {
    // required bytes requestID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->requestid());
  }

  return total_size;
}
size_t RequestMessageIDMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.RequestMessageIDMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required string serverID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverid());

    // required bytes requestID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMessageIDMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.RequestMessageIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessageIDMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestMessageIDMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.RequestMessageIDMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.RequestMessageIDMessage)
    MergeFrom(*source);
  }
}

void RequestMessageIDMessage::MergeFrom(const RequestMessageIDMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.RequestMessageIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serverid();
      serverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_requestid();
      requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
    }
  }
}

void RequestMessageIDMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.RequestMessageIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessageIDMessage::CopyFrom(const RequestMessageIDMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.RequestMessageIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessageIDMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RequestMessageIDMessage::Swap(RequestMessageIDMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestMessageIDMessage::InternalSwap(RequestMessageIDMessage* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  serverid_.Swap(&other->serverid_);
  requestid_.Swap(&other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestMessageIDMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseMessageIDMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseMessageIDMessage::kUserAccountFieldNumber;
const int ResponseMessageIDMessage::kMessageIDFieldNumber;
const int ResponseMessageIDMessage::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseMessageIDMessage::ResponseMessageIDMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsResponseMessageIDMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.ResponseMessageIDMessage)
}
ResponseMessageIDMessage::ResponseMessageIDMessage(const ResponseMessageIDMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requestid()) {
    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
  messageid_ = from.messageid_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.ResponseMessageIDMessage)
}

void ResponseMessageIDMessage::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = GOOGLE_ULONGLONG(0);
}

ResponseMessageIDMessage::~ResponseMessageIDMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.ResponseMessageIDMessage)
  SharedDtor();
}

void ResponseMessageIDMessage::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseMessageIDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseMessageIDMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseMessageIDMessage& ResponseMessageIDMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsResponseMessageIDMessage();
  return *internal_default_instance();
}

ResponseMessageIDMessage* ResponseMessageIDMessage::New(::google::protobuf::Arena* arena) const {
  ResponseMessageIDMessage* n = new ResponseMessageIDMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseMessageIDMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.ResponseMessageIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useraccount_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!requestid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*requestid_.UnsafeRawStringPointer())->clear();
    }
  }
  messageid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseMessageIDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.ResponseMessageIDMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.president.ResponseMessageIDMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 messageID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes requestID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_requestid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.ResponseMessageIDMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.ResponseMessageIDMessage)
  return false;
#undef DO_
}

void ResponseMessageIDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.ResponseMessageIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ResponseMessageIDMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required uint64 messageID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->messageid(), output);
  }

  // required bytes requestID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.ResponseMessageIDMessage)
}

::google::protobuf::uint8* ResponseMessageIDMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.ResponseMessageIDMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.president.ResponseMessageIDMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required uint64 messageID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->messageid(), target);
  }

  // required bytes requestID = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.ResponseMessageIDMessage)
  return target;
}

size_t ResponseMessageIDMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.ResponseMessageIDMessage)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_requestid()) {
    // required bytes requestID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->requestid());
  }

  if (has_messageid()) {
    // required uint64 messageID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());
  }

  return total_size;
}
size_t ResponseMessageIDMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.ResponseMessageIDMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required bytes requestID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->requestid());

    // required uint64 messageID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->messageid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseMessageIDMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.ResponseMessageIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseMessageIDMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseMessageIDMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.ResponseMessageIDMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.ResponseMessageIDMessage)
    MergeFrom(*source);
  }
}

void ResponseMessageIDMessage::MergeFrom(const ResponseMessageIDMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.ResponseMessageIDMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_requestid();
      requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
    }
    if (cached_has_bits & 0x00000004u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseMessageIDMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.ResponseMessageIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseMessageIDMessage::CopyFrom(const ResponseMessageIDMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.ResponseMessageIDMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessageIDMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResponseMessageIDMessage::Swap(ResponseMessageIDMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseMessageIDMessage::InternalSwap(ResponseMessageIDMessage* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  requestid_.Swap(&other->requestid_);
  swap(messageid_, other->messageid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseMessageIDMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeLoadInfoMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeLoadInfoMessage::kConnectionCountFieldNumber;
const int NodeLoadInfoMessage::kCpuUsageFieldNumber;
const int NodeLoadInfoMessage::kMemUsageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeLoadInfoMessage::NodeLoadInfoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageCluster_2eproto::InitDefaultsNodeLoadInfoMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.president.NodeLoadInfoMessage)
}
NodeLoadInfoMessage::NodeLoadInfoMessage(const NodeLoadInfoMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connectioncount_, &from.connectioncount_,
    static_cast<size_t>(reinterpret_cast<char*>(&memusage_) -
    reinterpret_cast<char*>(&connectioncount_)) + sizeof(memusage_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.president.NodeLoadInfoMessage)
}

void NodeLoadInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&connectioncount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memusage_) -
      reinterpret_cast<char*>(&connectioncount_)) + sizeof(memusage_));
}

NodeLoadInfoMessage::~NodeLoadInfoMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.president.NodeLoadInfoMessage)
  SharedDtor();
}

void NodeLoadInfoMessage::SharedDtor() {
}

void NodeLoadInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeLoadInfoMessage::descriptor() {
  ::protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeLoadInfoMessage& NodeLoadInfoMessage::default_instance() {
  ::protobuf_MessageCluster_2eproto::InitDefaultsNodeLoadInfoMessage();
  return *internal_default_instance();
}

NodeLoadInfoMessage* NodeLoadInfoMessage::New(::google::protobuf::Arena* arena) const {
  NodeLoadInfoMessage* n = new NodeLoadInfoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeLoadInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.president.NodeLoadInfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&connectioncount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&memusage_) -
        reinterpret_cast<char*>(&connectioncount_)) + sizeof(memusage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeLoadInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.president.NodeLoadInfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 connectionCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connectioncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connectioncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cpuUsage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_cpuusage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float memUsage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_memusage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.president.NodeLoadInfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.president.NodeLoadInfoMessage)
  return false;
#undef DO_
}

void NodeLoadInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.president.NodeLoadInfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 connectionCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->connectioncount(), output);
  }

  // required float cpuUsage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cpuusage(), output);
  }

  // required float memUsage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->memusage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.president.NodeLoadInfoMessage)
}

::google::protobuf::uint8* NodeLoadInfoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.president.NodeLoadInfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 connectionCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->connectioncount(), target);
  }

  // required float cpuUsage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cpuusage(), target);
  }

  // required float memUsage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->memusage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.president.NodeLoadInfoMessage)
  return target;
}

size_t NodeLoadInfoMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.president.NodeLoadInfoMessage)
  size_t total_size = 0;

  if (has_connectioncount()) {
    // required uint64 connectionCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connectioncount());
  }

  if (has_cpuusage()) {
    // required float cpuUsage = 2;
    total_size += 1 + 4;
  }

  if (has_memusage()) {
    // required float memUsage = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t NodeLoadInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.president.NodeLoadInfoMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 connectionCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connectioncount());

    // required float cpuUsage = 2;
    total_size += 1 + 4;

    // required float memUsage = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLoadInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.president.NodeLoadInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeLoadInfoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeLoadInfoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.president.NodeLoadInfoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.president.NodeLoadInfoMessage)
    MergeFrom(*source);
  }
}

void NodeLoadInfoMessage::MergeFrom(const NodeLoadInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.president.NodeLoadInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      connectioncount_ = from.connectioncount_;
    }
    if (cached_has_bits & 0x00000002u) {
      cpuusage_ = from.cpuusage_;
    }
    if (cached_has_bits & 0x00000004u) {
      memusage_ = from.memusage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeLoadInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.president.NodeLoadInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLoadInfoMessage::CopyFrom(const NodeLoadInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.president.NodeLoadInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLoadInfoMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void NodeLoadInfoMessage::Swap(NodeLoadInfoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeLoadInfoMessage::InternalSwap(NodeLoadInfoMessage* other) {
  using std::swap;
  swap(connectioncount_, other->connectioncount_);
  swap(cpuusage_, other->cpuusage_);
  swap(memusage_, other->memusage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeLoadInfoMessage::GetMetadata() const {
  protobuf_MessageCluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageCluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace president
}  // namespace kakaIM

// @@protoc_insertion_point(global_scope)
