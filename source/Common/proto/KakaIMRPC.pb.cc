// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaIMRPC.proto

#include "KakaIMRPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace kakaIM {
namespace rpc {
class AuthenticationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticationRequest>
      _instance;
} _AuthenticationRequest_default_instance_;
class AuthenticationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticationResponse>
      _instance;
} _AuthenticationResponse_default_instance_;
class FriendListRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendListRequestMessage>
      _instance;
} _FriendListRequestMessage_default_instance_;
class FriendListItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendListItem>
      _instance;
} _FriendListItem_default_instance_;
class FriendListResponseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FriendListResponseMessage>
      _instance;
} _FriendListResponseMessage_default_instance_;
}  // namespace rpc
}  // namespace kakaIM
namespace protobuf_KakaIMRPC_2eproto {
void InitDefaultsAuthenticationRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::rpc::_AuthenticationRequest_default_instance_;
    new (ptr) ::kakaIM::rpc::AuthenticationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::rpc::AuthenticationRequest::InitAsDefaultInstance();
}

void InitDefaultsAuthenticationRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthenticationRequestImpl);
}

void InitDefaultsAuthenticationResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::rpc::_AuthenticationResponse_default_instance_;
    new (ptr) ::kakaIM::rpc::AuthenticationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::rpc::AuthenticationResponse::InitAsDefaultInstance();
}

void InitDefaultsAuthenticationResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthenticationResponseImpl);
}

void InitDefaultsFriendListRequestMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::rpc::_FriendListRequestMessage_default_instance_;
    new (ptr) ::kakaIM::rpc::FriendListRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::rpc::FriendListRequestMessage::InitAsDefaultInstance();
}

void InitDefaultsFriendListRequestMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFriendListRequestMessageImpl);
}

void InitDefaultsFriendListItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kakaIM::rpc::_FriendListItem_default_instance_;
    new (ptr) ::kakaIM::rpc::FriendListItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::rpc::FriendListItem::InitAsDefaultInstance();
}

void InitDefaultsFriendListItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFriendListItemImpl);
}

void InitDefaultsFriendListResponseMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListItem();
  {
    void* ptr = &::kakaIM::rpc::_FriendListResponseMessage_default_instance_;
    new (ptr) ::kakaIM::rpc::FriendListResponseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kakaIM::rpc::FriendListResponseMessage::InitAsDefaultInstance();
}

void InitDefaultsFriendListResponseMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFriendListResponseMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationRequest, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationRequest, userpassword_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationResponse, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::AuthenticationResponse, failureerror_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListRequestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListRequestMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListRequestMessage, currentversion_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListItem, friendaccount_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, useraccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, failureerror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, currentversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kakaIM::rpc::FriendListResponseMessage, friend__),
  0,
  2,
  3,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::kakaIM::rpc::AuthenticationRequest)},
  { 9, 17, sizeof(::kakaIM::rpc::AuthenticationResponse)},
  { 20, 27, sizeof(::kakaIM::rpc::FriendListRequestMessage)},
  { 29, 35, sizeof(::kakaIM::rpc::FriendListItem)},
  { 36, 46, sizeof(::kakaIM::rpc::FriendListResponseMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::rpc::_AuthenticationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::rpc::_AuthenticationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::rpc::_FriendListRequestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::rpc::_FriendListItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kakaIM::rpc::_FriendListResponseMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "KakaIMRPC.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017KakaIMRPC.proto\022\nkakaIM.rpc\"B\n\025Authent"
      "icationRequest\022\023\n\013userAccount\030\001 \002(\t\022\024\n\014u"
      "serPassword\030\002 \002(\t\"\225\002\n\026AuthenticationResp"
      "onse\022\023\n\013userAccount\030\001 \002(\t\0229\n\006status\030\002 \002("
      "\0162).kakaIM.rpc.AuthenticationResponse.St"
      "atus\022D\n\014failureError\030\003 \001(\0162..kakaIM.rpc."
      "AuthenticationResponse.FailureType\"!\n\006St"
      "atus\022\013\n\007Success\020\001\022\n\n\006Failed\020\002\"B\n\013Failure"
      "Type\022\032\n\026WrongAccountOrPassword\020\001\022\027\n\023Serv"
      "erInternalError\020\002\"G\n\030FriendListRequestMe"
      "ssage\022\023\n\013userAccount\030\001 \002(\t\022\026\n\016currentVer"
      "sion\030\002 \002(\004\"\'\n\016FriendListItem\022\025\n\rfriendAc"
      "count\030\001 \002(\t\"\365\002\n\031FriendListResponseMessag"
      "e\022\023\n\013userAccount\030\001 \002(\t\022<\n\006status\030\002 \002(\0162,"
      ".kakaIM.rpc.FriendListResponseMessage.St"
      "atus\022G\n\014failureError\030\003 \001(\01621.kakaIM.rpc."
      "FriendListResponseMessage.FailureType\022\026\n"
      "\016currentVersion\030\004 \001(\004\022*\n\006friend\030\005 \003(\0132\032."
      "kakaIM.rpc.FriendListItem\"<\n\006Status\022\013\n\007S"
      "uccess\020\001\022\031\n\025SuccessButNoNewChange\020\002\022\n\n\006F"
      "ailed\020\003\":\n\013FailureType\022\027\n\023ServerInternal"
      "Error\020\001\022\022\n\016RecordNotExist\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KakaIMRPC.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KakaIMRPC_2eproto
namespace kakaIM {
namespace rpc {
const ::google::protobuf::EnumDescriptor* AuthenticationResponse_Status_descriptor() {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMRPC_2eproto::file_level_enum_descriptors[0];
}
bool AuthenticationResponse_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthenticationResponse_Status AuthenticationResponse::Success;
const AuthenticationResponse_Status AuthenticationResponse::Failed;
const AuthenticationResponse_Status AuthenticationResponse::Status_MIN;
const AuthenticationResponse_Status AuthenticationResponse::Status_MAX;
const int AuthenticationResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AuthenticationResponse_FailureType_descriptor() {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMRPC_2eproto::file_level_enum_descriptors[1];
}
bool AuthenticationResponse_FailureType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthenticationResponse_FailureType AuthenticationResponse::WrongAccountOrPassword;
const AuthenticationResponse_FailureType AuthenticationResponse::ServerInternalError;
const AuthenticationResponse_FailureType AuthenticationResponse::FailureType_MIN;
const AuthenticationResponse_FailureType AuthenticationResponse::FailureType_MAX;
const int AuthenticationResponse::FailureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FriendListResponseMessage_Status_descriptor() {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMRPC_2eproto::file_level_enum_descriptors[2];
}
bool FriendListResponseMessage_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FriendListResponseMessage_Status FriendListResponseMessage::Success;
const FriendListResponseMessage_Status FriendListResponseMessage::SuccessButNoNewChange;
const FriendListResponseMessage_Status FriendListResponseMessage::Failed;
const FriendListResponseMessage_Status FriendListResponseMessage::Status_MIN;
const FriendListResponseMessage_Status FriendListResponseMessage::Status_MAX;
const int FriendListResponseMessage::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FriendListResponseMessage_FailureType_descriptor() {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KakaIMRPC_2eproto::file_level_enum_descriptors[3];
}
bool FriendListResponseMessage_FailureType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FriendListResponseMessage_FailureType FriendListResponseMessage::ServerInternalError;
const FriendListResponseMessage_FailureType FriendListResponseMessage::RecordNotExist;
const FriendListResponseMessage_FailureType FriendListResponseMessage::FailureType_MIN;
const FriendListResponseMessage_FailureType FriendListResponseMessage::FailureType_MAX;
const int FriendListResponseMessage::FailureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void AuthenticationRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticationRequest::kUserAccountFieldNumber;
const int AuthenticationRequest::kUserPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticationRequest::AuthenticationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMRPC_2eproto::InitDefaultsAuthenticationRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.rpc.AuthenticationRequest)
}
AuthenticationRequest::AuthenticationRequest(const AuthenticationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userpassword()) {
    userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.rpc.AuthenticationRequest)
}

void AuthenticationRequest::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticationRequest::~AuthenticationRequest() {
  // @@protoc_insertion_point(destructor:kakaIM.rpc.AuthenticationRequest)
  SharedDtor();
}

void AuthenticationRequest::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationRequest::descriptor() {
  ::protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticationRequest& AuthenticationRequest::default_instance() {
  ::protobuf_KakaIMRPC_2eproto::InitDefaultsAuthenticationRequest();
  return *internal_default_instance();
}

AuthenticationRequest* AuthenticationRequest::New(::google::protobuf::Arena* arena) const {
  AuthenticationRequest* n = new AuthenticationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.rpc.AuthenticationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useraccount_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!userpassword_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userpassword_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.rpc.AuthenticationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.rpc.AuthenticationRequest.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userPassword = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpassword().data(), static_cast<int>(this->userpassword().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.rpc.AuthenticationRequest.userPassword");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.rpc.AuthenticationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.rpc.AuthenticationRequest)
  return false;
#undef DO_
}

void AuthenticationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.rpc.AuthenticationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.AuthenticationRequest.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required string userPassword = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), static_cast<int>(this->userpassword().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.AuthenticationRequest.userPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpassword(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.rpc.AuthenticationRequest)
}

::google::protobuf::uint8* AuthenticationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.rpc.AuthenticationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.AuthenticationRequest.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required string userPassword = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), static_cast<int>(this->userpassword().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.AuthenticationRequest.userPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpassword(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.rpc.AuthenticationRequest)
  return target;
}

size_t AuthenticationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.rpc.AuthenticationRequest)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_userpassword()) {
    // required string userPassword = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());
  }

  return total_size;
}
size_t AuthenticationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.rpc.AuthenticationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required string userPassword = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.rpc.AuthenticationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.rpc.AuthenticationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.rpc.AuthenticationRequest)
    MergeFrom(*source);
  }
}

void AuthenticationRequest::MergeFrom(const AuthenticationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.rpc.AuthenticationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userpassword();
      userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
    }
  }
}

void AuthenticationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.rpc.AuthenticationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationRequest::CopyFrom(const AuthenticationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.rpc.AuthenticationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AuthenticationRequest::Swap(AuthenticationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticationRequest::InternalSwap(AuthenticationRequest* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  userpassword_.Swap(&other->userpassword_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticationRequest::GetMetadata() const {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticationResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticationResponse::kUserAccountFieldNumber;
const int AuthenticationResponse::kStatusFieldNumber;
const int AuthenticationResponse::kFailureErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticationResponse::AuthenticationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMRPC_2eproto::InitDefaultsAuthenticationResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.rpc.AuthenticationResponse)
}
AuthenticationResponse::AuthenticationResponse(const AuthenticationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&failureerror_) -
    reinterpret_cast<char*>(&status_)) + sizeof(failureerror_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.rpc.AuthenticationResponse)
}

void AuthenticationResponse::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  failureerror_ = 1;
}

AuthenticationResponse::~AuthenticationResponse() {
  // @@protoc_insertion_point(destructor:kakaIM.rpc.AuthenticationResponse)
  SharedDtor();
}

void AuthenticationResponse::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationResponse::descriptor() {
  ::protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticationResponse& AuthenticationResponse::default_instance() {
  ::protobuf_KakaIMRPC_2eproto::InitDefaultsAuthenticationResponse();
  return *internal_default_instance();
}

AuthenticationResponse* AuthenticationResponse::New(::google::protobuf::Arena* arena) const {
  AuthenticationResponse* n = new AuthenticationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.rpc.AuthenticationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*useraccount_.UnsafeRawStringPointer())->clear();
    }
    status_ = 1;
    failureerror_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.rpc.AuthenticationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.rpc.AuthenticationResponse.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.rpc.AuthenticationResponse.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::rpc::AuthenticationResponse_Status_IsValid(value)) {
            set_status(static_cast< ::kakaIM::rpc::AuthenticationResponse_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.rpc.AuthenticationResponse.FailureType failureError = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::rpc::AuthenticationResponse_FailureType_IsValid(value)) {
            set_failureerror(static_cast< ::kakaIM::rpc::AuthenticationResponse_FailureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.rpc.AuthenticationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.rpc.AuthenticationResponse)
  return false;
#undef DO_
}

void AuthenticationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.rpc.AuthenticationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.AuthenticationResponse.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required .kakaIM.rpc.AuthenticationResponse.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .kakaIM.rpc.AuthenticationResponse.FailureType failureError = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->failureerror(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.rpc.AuthenticationResponse)
}

::google::protobuf::uint8* AuthenticationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.rpc.AuthenticationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.AuthenticationResponse.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required .kakaIM.rpc.AuthenticationResponse.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .kakaIM.rpc.AuthenticationResponse.FailureType failureError = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->failureerror(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.rpc.AuthenticationResponse)
  return target;
}

size_t AuthenticationResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.rpc.AuthenticationResponse)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_status()) {
    // required .kakaIM.rpc.AuthenticationResponse.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t AuthenticationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.rpc.AuthenticationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required .kakaIM.rpc.AuthenticationResponse.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .kakaIM.rpc.AuthenticationResponse.FailureType failureError = 3;
  if (has_failureerror()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->failureerror());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.rpc.AuthenticationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.rpc.AuthenticationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.rpc.AuthenticationResponse)
    MergeFrom(*source);
  }
}

void AuthenticationResponse::MergeFrom(const AuthenticationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.rpc.AuthenticationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      failureerror_ = from.failureerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthenticationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.rpc.AuthenticationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationResponse::CopyFrom(const AuthenticationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.rpc.AuthenticationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AuthenticationResponse::Swap(AuthenticationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticationResponse::InternalSwap(AuthenticationResponse* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  swap(status_, other->status_);
  swap(failureerror_, other->failureerror_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticationResponse::GetMetadata() const {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendListRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListRequestMessage::kUserAccountFieldNumber;
const int FriendListRequestMessage::kCurrentVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListRequestMessage::FriendListRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListRequestMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.rpc.FriendListRequestMessage)
}
FriendListRequestMessage::FriendListRequestMessage(const FriendListRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  currentversion_ = from.currentversion_;
  // @@protoc_insertion_point(copy_constructor:kakaIM.rpc.FriendListRequestMessage)
}

void FriendListRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currentversion_ = GOOGLE_ULONGLONG(0);
}

FriendListRequestMessage::~FriendListRequestMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.rpc.FriendListRequestMessage)
  SharedDtor();
}

void FriendListRequestMessage::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendListRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListRequestMessage::descriptor() {
  ::protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendListRequestMessage& FriendListRequestMessage::default_instance() {
  ::protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListRequestMessage();
  return *internal_default_instance();
}

FriendListRequestMessage* FriendListRequestMessage::New(::google::protobuf::Arena* arena) const {
  FriendListRequestMessage* n = new FriendListRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendListRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.rpc.FriendListRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*useraccount_.UnsafeRawStringPointer())->clear();
  }
  currentversion_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendListRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.rpc.FriendListRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.rpc.FriendListRequestMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 currentVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_currentversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.rpc.FriendListRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.rpc.FriendListRequestMessage)
  return false;
#undef DO_
}

void FriendListRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.rpc.FriendListRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.FriendListRequestMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required uint64 currentVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->currentversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.rpc.FriendListRequestMessage)
}

::google::protobuf::uint8* FriendListRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.rpc.FriendListRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.FriendListRequestMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required uint64 currentVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->currentversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.rpc.FriendListRequestMessage)
  return target;
}

size_t FriendListRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.rpc.FriendListRequestMessage)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_currentversion()) {
    // required uint64 currentVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->currentversion());
  }

  return total_size;
}
size_t FriendListRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.rpc.FriendListRequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required uint64 currentVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->currentversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.rpc.FriendListRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.rpc.FriendListRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.rpc.FriendListRequestMessage)
    MergeFrom(*source);
  }
}

void FriendListRequestMessage::MergeFrom(const FriendListRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.rpc.FriendListRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      currentversion_ = from.currentversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendListRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.rpc.FriendListRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListRequestMessage::CopyFrom(const FriendListRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.rpc.FriendListRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FriendListRequestMessage::Swap(FriendListRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListRequestMessage::InternalSwap(FriendListRequestMessage* other) {
  using std::swap;
  useraccount_.Swap(&other->useraccount_);
  swap(currentversion_, other->currentversion_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListRequestMessage::GetMetadata() const {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendListItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListItem::kFriendAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListItem::FriendListItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.rpc.FriendListItem)
}
FriendListItem::FriendListItem(const FriendListItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friendaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friendaccount()) {
    friendaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendaccount_);
  }
  // @@protoc_insertion_point(copy_constructor:kakaIM.rpc.FriendListItem)
}

void FriendListItem::SharedCtor() {
  _cached_size_ = 0;
  friendaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendListItem::~FriendListItem() {
  // @@protoc_insertion_point(destructor:kakaIM.rpc.FriendListItem)
  SharedDtor();
}

void FriendListItem::SharedDtor() {
  friendaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListItem::descriptor() {
  ::protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendListItem& FriendListItem::default_instance() {
  ::protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListItem();
  return *internal_default_instance();
}

FriendListItem* FriendListItem::New(::google::protobuf::Arena* arena) const {
  FriendListItem* n = new FriendListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.rpc.FriendListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!friendaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*friendaccount_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.rpc.FriendListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string friendAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendaccount().data(), static_cast<int>(this->friendaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.rpc.FriendListItem.friendAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.rpc.FriendListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.rpc.FriendListItem)
  return false;
#undef DO_
}

void FriendListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.rpc.FriendListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string friendAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendaccount().data(), static_cast<int>(this->friendaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.FriendListItem.friendAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->friendaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.rpc.FriendListItem)
}

::google::protobuf::uint8* FriendListItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.rpc.FriendListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string friendAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendaccount().data(), static_cast<int>(this->friendaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.FriendListItem.friendAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friendaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.rpc.FriendListItem)
  return target;
}

size_t FriendListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.rpc.FriendListItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string friendAccount = 1;
  if (has_friendaccount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friendaccount());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.rpc.FriendListItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.rpc.FriendListItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.rpc.FriendListItem)
    MergeFrom(*source);
  }
}

void FriendListItem::MergeFrom(const FriendListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.rpc.FriendListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friendaccount()) {
    set_has_friendaccount();
    friendaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendaccount_);
  }
}

void FriendListItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.rpc.FriendListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListItem::CopyFrom(const FriendListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.rpc.FriendListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FriendListItem::Swap(FriendListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListItem::InternalSwap(FriendListItem* other) {
  using std::swap;
  friendaccount_.Swap(&other->friendaccount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListItem::GetMetadata() const {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FriendListResponseMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListResponseMessage::kUserAccountFieldNumber;
const int FriendListResponseMessage::kStatusFieldNumber;
const int FriendListResponseMessage::kFailureErrorFieldNumber;
const int FriendListResponseMessage::kCurrentVersionFieldNumber;
const int FriendListResponseMessage::kFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListResponseMessage::FriendListResponseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListResponseMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kakaIM.rpc.FriendListResponseMessage)
}
FriendListResponseMessage::FriendListResponseMessage(const FriendListResponseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friend__(from.friend__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useraccount()) {
    useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
  }
  ::memcpy(&currentversion_, &from.currentversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&failureerror_) -
    reinterpret_cast<char*>(&currentversion_)) + sizeof(failureerror_));
  // @@protoc_insertion_point(copy_constructor:kakaIM.rpc.FriendListResponseMessage)
}

void FriendListResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  useraccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currentversion_ = GOOGLE_ULONGLONG(0);
  status_ = 1;
  failureerror_ = 1;
}

FriendListResponseMessage::~FriendListResponseMessage() {
  // @@protoc_insertion_point(destructor:kakaIM.rpc.FriendListResponseMessage)
  SharedDtor();
}

void FriendListResponseMessage::SharedDtor() {
  useraccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendListResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListResponseMessage::descriptor() {
  ::protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendListResponseMessage& FriendListResponseMessage::default_instance() {
  ::protobuf_KakaIMRPC_2eproto::InitDefaultsFriendListResponseMessage();
  return *internal_default_instance();
}

FriendListResponseMessage* FriendListResponseMessage::New(::google::protobuf::Arena* arena) const {
  FriendListResponseMessage* n = new FriendListResponseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendListResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:kakaIM.rpc.FriendListResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend__.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!useraccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*useraccount_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    currentversion_ = GOOGLE_ULONGLONG(0);
    status_ = 1;
    failureerror_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendListResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kakaIM.rpc.FriendListResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useraccount().data(), static_cast<int>(this->useraccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kakaIM.rpc.FriendListResponseMessage.userAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kakaIM.rpc.FriendListResponseMessage.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::rpc::FriendListResponseMessage_Status_IsValid(value)) {
            set_status(static_cast< ::kakaIM::rpc::FriendListResponseMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kakaIM.rpc.FriendListResponseMessage.FailureType failureError = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kakaIM::rpc::FriendListResponseMessage_FailureType_IsValid(value)) {
            set_failureerror(static_cast< ::kakaIM::rpc::FriendListResponseMessage_FailureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 currentVersion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_currentversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kakaIM.rpc.FriendListItem friend = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_friend_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kakaIM.rpc.FriendListResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kakaIM.rpc.FriendListResponseMessage)
  return false;
#undef DO_
}

void FriendListResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kakaIM.rpc.FriendListResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.FriendListResponseMessage.userAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->useraccount(), output);
  }

  // required .kakaIM.rpc.FriendListResponseMessage.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .kakaIM.rpc.FriendListResponseMessage.FailureType failureError = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->failureerror(), output);
  }

  // optional uint64 currentVersion = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->currentversion(), output);
  }

  // repeated .kakaIM.rpc.FriendListItem friend = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friend__size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->friend_(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kakaIM.rpc.FriendListResponseMessage)
}

::google::protobuf::uint8* FriendListResponseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kakaIM.rpc.FriendListResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userAccount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useraccount().data(), static_cast<int>(this->useraccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kakaIM.rpc.FriendListResponseMessage.userAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }

  // required .kakaIM.rpc.FriendListResponseMessage.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .kakaIM.rpc.FriendListResponseMessage.FailureType failureError = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->failureerror(), target);
  }

  // optional uint64 currentVersion = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->currentversion(), target);
  }

  // repeated .kakaIM.rpc.FriendListItem friend = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friend__size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->friend_(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kakaIM.rpc.FriendListResponseMessage)
  return target;
}

size_t FriendListResponseMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kakaIM.rpc.FriendListResponseMessage)
  size_t total_size = 0;

  if (has_useraccount()) {
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());
  }

  if (has_status()) {
    // required .kakaIM.rpc.FriendListResponseMessage.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t FriendListResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kakaIM.rpc.FriendListResponseMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string userAccount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->useraccount());

    // required .kakaIM.rpc.FriendListResponseMessage.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .kakaIM.rpc.FriendListItem friend = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->friend__size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friend_(static_cast<int>(i)));
    }
  }

  // optional uint64 currentVersion = 4;
  if (has_currentversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->currentversion());
  }

  // optional .kakaIM.rpc.FriendListResponseMessage.FailureType failureError = 3;
  if (has_failureerror()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->failureerror());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kakaIM.rpc.FriendListResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendListResponseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListResponseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kakaIM.rpc.FriendListResponseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kakaIM.rpc.FriendListResponseMessage)
    MergeFrom(*source);
  }
}

void FriendListResponseMessage::MergeFrom(const FriendListResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kakaIM.rpc.FriendListResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friend__.MergeFrom(from.friend__);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_useraccount();
      useraccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useraccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      currentversion_ = from.currentversion_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      failureerror_ = from.failureerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendListResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kakaIM.rpc.FriendListResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListResponseMessage::CopyFrom(const FriendListResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kakaIM.rpc.FriendListResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friend_())) return false;
  return true;
}

void FriendListResponseMessage::Swap(FriendListResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListResponseMessage::InternalSwap(FriendListResponseMessage* other) {
  using std::swap;
  friend__.InternalSwap(&other->friend__);
  useraccount_.Swap(&other->useraccount_);
  swap(currentversion_, other->currentversion_);
  swap(status_, other->status_);
  swap(failureerror_, other->failureerror_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListResponseMessage::GetMetadata() const {
  protobuf_KakaIMRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KakaIMRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace kakaIM

// @@protoc_insertion_point(global_scope)
