// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageCluster.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MessageCluster.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageClusterRoot

@implementation MessageClusterRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessageClusterRoot_FileDescriptor

static GPBFileDescriptor *MessageClusterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"kakaIM.president"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RequestJoinClusterMessage

@implementation RequestJoinClusterMessage

@dynamic hasServerId, serverId;
@dynamic hasInvitationCode, invitationCode;

typedef struct RequestJoinClusterMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *serverId;
  NSString *invitationCode;
} RequestJoinClusterMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = RequestJoinClusterMessage_FieldNumber_ServerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestJoinClusterMessage__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invitationCode",
        .dataTypeSpecific.className = NULL,
        .number = RequestJoinClusterMessage_FieldNumber_InvitationCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestJoinClusterMessage__storage_, invitationCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestJoinClusterMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestJoinClusterMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseJoinClusterMessage

@implementation ResponseJoinClusterMessage

@dynamic hasResult, result;

typedef struct ResponseJoinClusterMessage__storage_ {
  uint32_t _has_storage_[1];
  ResponseJoinClusterMessage_JoinResult result;
} ResponseJoinClusterMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = ResponseJoinClusterMessage_JoinResult_Success,
        .core.name = "result",
        .core.dataTypeSpecific.enumDescFunc = ResponseJoinClusterMessage_JoinResult_EnumDescriptor,
        .core.number = ResponseJoinClusterMessage_FieldNumber_Result,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(ResponseJoinClusterMessage__storage_, result),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseJoinClusterMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(ResponseJoinClusterMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum ResponseJoinClusterMessage_JoinResult

GPBEnumDescriptor *ResponseJoinClusterMessage_JoinResult_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Failure\000";
    static const int32_t values[] = {
        ResponseJoinClusterMessage_JoinResult_Success,
        ResponseJoinClusterMessage_JoinResult_Failure,
    };
    static const char *extraTextFormatInfo = "\002\000\007\000\001\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResponseJoinClusterMessage_JoinResult)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResponseJoinClusterMessage_JoinResult_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResponseJoinClusterMessage_JoinResult_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResponseJoinClusterMessage_JoinResult_Success:
    case ResponseJoinClusterMessage_JoinResult_Failure:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HeartBeatMessage

@implementation HeartBeatMessage

@dynamic hasServerId, serverId;
@dynamic hasTimestamp, timestamp;

typedef struct HeartBeatMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *serverId;
  NSString *timestamp;
} HeartBeatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = HeartBeatMessage_FieldNumber_ServerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartBeatMessage__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = HeartBeatMessage_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeartBeatMessage__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartBeatMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartBeatMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseHeartBeatMessage

@implementation ResponseHeartBeatMessage

@dynamic hasTimestamp, timestamp;

typedef struct ResponseHeartBeatMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *timestamp;
} ResponseHeartBeatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = ResponseHeartBeatMessage_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseHeartBeatMessage__storage_, timestamp),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseHeartBeatMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseHeartBeatMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserOnlineStateMessage

@implementation UserOnlineStateMessage

@dynamic hasServerId, serverId;
@dynamic hasUserAccount, userAccount;
@dynamic hasUserState, userState;

typedef struct UserOnlineStateMessage__storage_ {
  uint32_t _has_storage_[1];
  UserOnlineStateMessage_OnlineState userState;
  NSString *serverId;
  NSString *userAccount;
} UserOnlineStateMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "serverId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = UserOnlineStateMessage_FieldNumber_ServerId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(UserOnlineStateMessage__storage_, serverId),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "userAccount",
        .core.dataTypeSpecific.className = NULL,
        .core.number = UserOnlineStateMessage_FieldNumber_UserAccount,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(UserOnlineStateMessage__storage_, userAccount),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = UserOnlineStateMessage_OnlineState_Offline,
        .core.name = "userState",
        .core.dataTypeSpecific.enumDescFunc = UserOnlineStateMessage_OnlineState_EnumDescriptor,
        .core.number = UserOnlineStateMessage_FieldNumber_UserState,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(UserOnlineStateMessage__storage_, userState),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserOnlineStateMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(UserOnlineStateMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007A\000\002\013\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum UserOnlineStateMessage_OnlineState

GPBEnumDescriptor *UserOnlineStateMessage_OnlineState_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Offline\000Invisible\000";
    static const int32_t values[] = {
        UserOnlineStateMessage_OnlineState_Offline,
        UserOnlineStateMessage_OnlineState_Invisible,
    };
    static const char *extraTextFormatInfo = "\002\000\007\000\001\t\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserOnlineStateMessage_OnlineState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserOnlineStateMessage_OnlineState_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserOnlineStateMessage_OnlineState_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserOnlineStateMessage_OnlineState_Offline:
    case UserOnlineStateMessage_OnlineState_Invisible:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UpdateUserOnlineStateMessage

@implementation UpdateUserOnlineStateMessage

@dynamic hasItemCount, itemCount;
@dynamic userOnlineStateArray, userOnlineStateArray_Count;

typedef struct UpdateUserOnlineStateMessage__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userOnlineStateArray;
  uint64_t itemCount;
} UpdateUserOnlineStateMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemCount",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserOnlineStateMessage_FieldNumber_ItemCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserOnlineStateMessage__storage_, itemCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userOnlineStateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserOnlineStateMessage),
        .number = UpdateUserOnlineStateMessage_FieldNumber_UserOnlineStateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateUserOnlineStateMessage__storage_, userOnlineStateArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserOnlineStateMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserOnlineStateMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\000userOnlineState\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServerMessage

@implementation ServerMessage

@dynamic hasServerId, serverId;
@dynamic hasMessageType, messageType;
@dynamic hasContent, content;

typedef struct ServerMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *serverId;
  NSString *messageType;
  NSData *content;
} ServerMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = ServerMessage_FieldNumber_ServerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ServerMessage__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageType",
        .dataTypeSpecific.className = NULL,
        .number = ServerMessage_FieldNumber_MessageType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ServerMessage__storage_, messageType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = ServerMessage_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ServerMessage__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServerMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007A\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestMessageIDMessage

@implementation RequestMessageIDMessage

@dynamic hasUserAccount, userAccount;
@dynamic hasServerId, serverId;
@dynamic hasRequestId, requestId;

typedef struct RequestMessageIDMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *userAccount;
  NSString *serverId;
  NSString *requestId;
} RequestMessageIDMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userAccount",
        .dataTypeSpecific.className = NULL,
        .number = RequestMessageIDMessage_FieldNumber_UserAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestMessageIDMessage__storage_, userAccount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = RequestMessageIDMessage_FieldNumber_ServerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestMessageIDMessage__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = RequestMessageIDMessage_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RequestMessageIDMessage__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestMessageIDMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestMessageIDMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\013\000\002\007A\000\003\010A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseMessageIDMessage

@implementation ResponseMessageIDMessage

@dynamic hasUserAccount, userAccount;
@dynamic hasMessageId, messageId;
@dynamic hasServerId, serverId;
@dynamic hasRequestId, requestId;

typedef struct ResponseMessageIDMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *userAccount;
  NSString *messageId;
  NSString *serverId;
  NSString *requestId;
} ResponseMessageIDMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userAccount",
        .dataTypeSpecific.className = NULL,
        .number = ResponseMessageIDMessage_FieldNumber_UserAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseMessageIDMessage__storage_, userAccount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = ResponseMessageIDMessage_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseMessageIDMessage__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serverId",
        .dataTypeSpecific.className = NULL,
        .number = ResponseMessageIDMessage_FieldNumber_ServerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseMessageIDMessage__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ResponseMessageIDMessage_FieldNumber_RequestId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ResponseMessageIDMessage__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseMessageIDMessage class]
                                     rootClass:[MessageClusterRoot class]
                                          file:MessageClusterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseMessageIDMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\010A\000\003\007A\000\004\010A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
